http://bugs.gentoo.org/176712

----------------------------
revision 1.139
date: 2007/05/07 03:43:55;  author: drepper;  state: Exp;  lines: +3 -2
(process_string_arg): Optimize ridiculous precision in wide char code
printing multi-byte string.
----------------------------
revision 1.138
date: 2007/05/05 04:41:35;  author: drepper;  state: Exp;  lines: +2 -2
(process_string_arg): Adjust call to __mbsnrtowcs after last change.
----------------------------
revision 1.137
date: 2007/05/02 08:15:50;  author: drepper;  state: Exp;  lines: +2 -1
(process_string_arg): Use a VLA rather than fixed length array for ignore.
----------------------------
revision 1.136
date: 2007/05/01 04:11:26;  author: drepper;  state: Exp;  lines: +15 -9
(process_string_arg): Don't overflow the stack for large precisions.
----------------------------

---
 stdio-common/vfprintf.c |   30 +++++++++++++++++++-----------
 1 file changed, 19 insertions(+), 11 deletions(-)

Index: glibc-2.5/stdio-common/vfprintf.c
===================================================================
--- glibc-2.5.orig/stdio-common/vfprintf.c
+++ glibc-2.5/stdio-common/vfprintf.c
@@ -1025,10 +1025,11 @@ vfprintf (FILE *s, const CHAR_T *format,
 	    const char *mbs = (const char *) string;			      \
 	    mbstate_t mbstate;						      \
 									      \
-	    len = prec != -1 ? (size_t) prec : strlen (mbs);		      \
+	    len = prec != -1 ? __strnlen (mbs, (size_t) prec) : strlen (mbs); \
 									      \
 	    /* Allocate dynamically an array which definitely is long	      \
-	       enough for the wide character version.  */		      \
+	       enough for the wide character version.  Each byte in the	      \
+	       multi-byte string can produce at most one wide character.  */  \
 	    if (__libc_use_alloca (len * sizeof (wchar_t)))		      \
 	      string = (CHAR_T *) alloca (len * sizeof (wchar_t));	      \
 	    else if ((string = (CHAR_T *) malloc (len * sizeof (wchar_t)))    \
@@ -1159,19 +1160,26 @@ vfprintf (FILE *s, const CHAR_T *format,
 		else							      \
 		  {							      \
 		    /* In case we have a multibyte character set the	      \
-		       situation is more compilcated.  We must not copy	      \
+		       situation is more complicated.  We must not copy	      \
 		       bytes at the end which form an incomplete character. */\
-		    wchar_t ignore[prec];				      \
+		    size_t ignore_size = (unsigned) prec > 1024 ? 1024 : prec;\
+		    wchar_t ignore[ignore_size];			      \
 		    const char *str2 = string;				      \
-		    mbstate_t ps;					      \
+		    const char *strend = string + prec;			      \
+		    if (strend < string)				      \
+		      strend = (const char *) UINTPTR_MAX;		      \
 									      \
+		    mbstate_t ps;					      \
 		    memset (&ps, '\0', sizeof (ps));			      \
-		    if (__mbsnrtowcs (ignore, &str2, prec, prec, &ps)	      \
-			== (size_t) -1)					      \
-		      {							      \
-			done = -1;					      \
-			goto all_done;					      \
-		      }							      \
+									      \
+		    while (str2 != NULL && str2 < strend)		      \
+		      if (__mbsnrtowcs (ignore, &str2, strend - str2,	      \
+					ignore_size, &ps) == (size_t) -1)     \
+			{						      \
+			  done = -1;					      \
+			  goto all_done;				      \
+			}						      \
+									      \
 		    if (str2 == NULL)					      \
 		      len = strlen (string);				      \
 		    else						      \
