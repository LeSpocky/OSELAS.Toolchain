http://sourceware.org/ml/libc-alpha/2007-02/msg00025.html

nptl/sysdeps/unix/sysv/linux/fork.c : __libc_fork()

Reset the refcntr for the fork-handlers in the child process to 1.

	The refcntr may have been bumped up by the *OTHER* thread(s) doing a fork() in the parent process. This would leave the child with an incorrect refcntr for the fork-handlers leading us to wait for non-existing threads to drop the refcntr while doing __unregister_atfork(). Since there is only one thread in the child process, we reset it to 1, to reflect the actual count.

---
 nptl/sysdeps/unix/sysv/linux/fork.c |    8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

Index: glibc-2.5/nptl/sysdeps/unix/sysv/linux/fork.c
===================================================================
--- glibc-2.5.orig/nptl/sysdeps/unix/sysv/linux/fork.c
+++ glibc-2.5/nptl/sysdeps/unix/sysv/linux/fork.c
@@ -167,8 +167,12 @@ __libc_fork (void)
 	    allp->handler->child_handler ();
 
 	  /* Note that we do not have to wake any possible waiter.
-	     This is the only thread in the new process.  */
-	  --allp->handler->refcntr;
+	     This is the only thread in the new process.
+	     The count may have been bumped up by the other threads in 
+	     the parent, doing a fork. We reset it to 1, to avoid waiting
+	     for non-existing thread(s) to release the count.
+	   */
+	  allp->handler->refcntr = 1;
 
 	  /* XXX We could at this point look through the object pool
 	     and mark all objects not on the __fork_handlers list as
