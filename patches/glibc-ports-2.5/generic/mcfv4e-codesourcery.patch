diff -Naur glibc-ports-2.5/ChangeLog.m68k glibc-ports-2.5-cs/ChangeLog.m68k
--- glibc-ports-2.5/ChangeLog.m68k	2006-02-28 11:12:50.000000000 +0100
+++ glibc-ports-2.5-cs/ChangeLog.m68k	2007-03-27 15:02:32.000000000 +0200
@@ -1,3 +1,311 @@
+2006-10-03  Andreas Schwab  <schwab@suse.de>
+
+	* sysdeps/m68k/setjmp.c: Use __builtin_return_address and
+	__builtin_frame_address.  Don't call __sigjmp_save in ld.so.
+
+	* sysdeps/unix/sysv/linux/m68k/mremap.S: Accept fifth parameter.
+
+2006-10-03  Richard Sandiford  <richard@codesourcery.com>
+
+	* sysdeps/m68k/bits/mathdef.h: Moved from sysdeps/m68k to
+	sysdeps/m68k/m680x0.
+	* sysdeps/m68k/m68020/submul_1.S: Likewise.
+	* sysdeps/m68k/m68020/Makefile: Likewise.
+	* sysdeps/m68k/m68020/mul_1.S: Likewise.
+	* sysdeps/m68k/m68020/wordcopy.S: Likewise.
+	* sysdeps/m68k/m68020/addmul_1.S: Likewise.
+	* sysdeps/m68k/m68020/bits/string.h: Likewise.
+	* sysdeps/m68k/m68020/bits/atomic.h: Likewise.
+	* sysdeps/m68k/sub_n.S: Likewise.
+	* sysdeps/m68k/add_n.S: Likewise.
+	* sysdeps/m68k/s_isnanl.c: Likewise.
+	* sysdeps/m68k/fpu/s_log1p.c: Likewise.
+	* sysdeps/m68k/fpu/e_asinf.c: Likewise.
+	* sysdeps/m68k/fpu/s_cosl.c: Likewise.
+	* sysdeps/m68k/fpu/s_isinff.c: Likewise.
+	* sysdeps/m68k/fpu/k_rem_pio2.c: Likewise.
+	* sysdeps/m68k/fpu/s_ccos.c: Likewise.
+	* sysdeps/m68k/fpu/s_expm1.c: Likewise.
+	* sysdeps/m68k/fpu/slowexp.c: Likewise.
+	* sysdeps/m68k/fpu/k_rem_pio2l.c: Likewise.
+	* sysdeps/m68k/fpu/s_ccoshf.c: Likewise.
+	* sysdeps/m68k/fpu/s_ilogbl.c: Likewise.
+	* sysdeps/m68k/fpu/Makefile: Likewise.
+	* sysdeps/m68k/fpu/s_expm1f.c: Likewise.
+	* sysdeps/m68k/fpu/s_significandf.c: Likewise.
+	* sysdeps/m68k/fpu/e_pow.c: Likewise.
+	* sysdeps/m68k/fpu/s_csinh.c: Likewise.
+	* sysdeps/m68k/fpu/e_exp.c: Likewise.
+	* sysdeps/m68k/fpu/s_remquof.c: Likewise.
+	* sysdeps/m68k/fpu/s_ilogbf.c: Likewise.
+	* sysdeps/m68k/fpu/s_truncl.c: Likewise.
+	* sysdeps/m68k/fpu/s_frexpf.c: Likewise.
+	* sysdeps/m68k/fpu/s_cos.c: Likewise.
+	* sysdeps/m68k/fpu/fraiseexcpt.c: Likewise.
+	* sysdeps/m68k/fpu/branred.c: Likewise.
+	* sysdeps/m68k/fpu/s_frexpl.c: Likewise.
+	* sysdeps/m68k/fpu/s_atan.c: Likewise.
+	* sysdeps/m68k/fpu/e_rem_pio2f.c: Likewise.
+	* sysdeps/m68k/fpu/e_scalbl.c: Likewise.
+	* sysdeps/m68k/fpu/e_exp2.c: Likewise.
+	* sysdeps/m68k/fpu/s_cexpf.c: Likewise.
+	* sysdeps/m68k/fpu/mplog.c: Likewise.
+	* sysdeps/m68k/fpu/s_rintf.c: Likewise.
+	* sysdeps/m68k/fpu/s_tanh.c: Likewise.
+	* sysdeps/m68k/fpu/e_scalbf.c: Likewise.
+	* sysdeps/m68k/fpu/s_csinhl.c: Likewise.
+	* sysdeps/m68k/fpu/s_floorl.c: Likewise.
+	* sysdeps/m68k/fpu/k_tanf.c: Likewise.
+	* sysdeps/m68k/fpu/k_tanl.c: Likewise.
+	* sysdeps/m68k/fpu/e_fmodf.c: Likewise.
+	* sysdeps/m68k/fpu/e_atanhf.c: Likewise.
+	* sysdeps/m68k/fpu/s_isnanf.c: Likewise.
+	* sysdeps/m68k/fpu/s_fpclassifyl.c: Likewise.
+	* sysdeps/m68k/fpu/s_modf.c: Likewise.
+	* sysdeps/m68k/fpu/e_log2.c: Likewise.
+	* sysdeps/m68k/fpu/e_acosf.c: Likewise.
+	* sysdeps/m68k/fpu/s_log1pl.c: Likewise.
+	* sysdeps/m68k/fpu/e_log2f.c: Likewise.
+	* sysdeps/m68k/fpu/mpa.c: Likewise.
+	* sysdeps/m68k/fpu/t_exp.c: Likewise.
+	* sysdeps/m68k/fpu/e_acos.c: Likewise.
+	* sysdeps/m68k/fpu/s_expm1l.c: Likewise.
+	* sysdeps/m68k/fpu/s_ccoshl.c: Likewise.
+	* sysdeps/m68k/fpu/s_sinf.c: Likewise.
+	* sysdeps/m68k/fpu/k_tan.c: Likewise.
+	* sysdeps/m68k/fpu/k_cosl.c: Likewise.
+	* sysdeps/m68k/fpu/e_remainder.c: Likewise.
+	* sysdeps/m68k/fpu/s_trunc.c: Likewise.
+	* sysdeps/m68k/fpu/s_sincos.c: Likewise.
+	* sysdeps/m68k/fpu/s_scalbnl.c: Likewise.
+	* sysdeps/m68k/fpu/s_finitef.c: Likewise.
+	* sysdeps/m68k/fpu/s_tanhl.c: Likewise.
+	* sysdeps/m68k/fpu/s_lrintl.c: Likewise.
+	* sysdeps/m68k/fpu/slowpow.c: Likewise.
+	* sysdeps/m68k/fpu/mpexp.c: Likewise.
+	* sysdeps/m68k/fpu/s_isnanl.c: Likewise.
+	* sysdeps/m68k/fpu/e_expf.c: Likewise.
+	* sysdeps/m68k/fpu/s_significand.c: Likewise.
+	* sysdeps/m68k/fpu/e_sinhf.c: Likewise.
+	* sysdeps/m68k/fpu/s_tanl.c: Likewise.
+	* sysdeps/m68k/fpu/s_tanhf.c: Likewise.
+	* sysdeps/m68k/fpu/s_cexp.c: Likewise.
+	* sysdeps/m68k/fpu/e_sqrtf.c: Likewise.
+	* sysdeps/m68k/fpu/s_isinf.c: Likewise.
+	* sysdeps/m68k/fpu/s_nearbyint.c: Likewise.
+	* sysdeps/m68k/fpu/e_fmod.c: Likewise.
+	* sysdeps/m68k/fpu/sincos32.c: Likewise.
+	* sysdeps/m68k/fpu/e_sqrtl.c: Likewise.
+	* sysdeps/m68k/fpu/s_sincosl.c: Likewise.
+	* sysdeps/m68k/fpu/e_atan2f.c: Likewise.
+	* sysdeps/m68k/fpu/s_nearbyintf.c: Likewise.
+	* sysdeps/m68k/fpu/e_fmodl.c: Likewise.
+	* sysdeps/m68k/fpu/e_coshf.c: Likewise.
+	* sysdeps/m68k/fpu/s_csinf.c: Likewise.
+	* sysdeps/m68k/fpu/s_ccosl.c: Likewise.
+	* sysdeps/m68k/fpu/e_sqrt.c: Likewise.
+	* sysdeps/m68k/fpu/s_sin.c: Likewise.
+	* sysdeps/m68k/fpu/e_asin.c: Likewise.
+	* sysdeps/m68k/fpu/mptan.c: Likewise.
+	* sysdeps/m68k/fpu/e_exp10f.c: Likewise.
+	* sysdeps/m68k/fpu/e_scalb.c: Likewise.
+	* sysdeps/m68k/fpu/s_finitel.c: Likewise.
+	* sysdeps/m68k/fpu/e_log10.c: Likewise.
+	* sysdeps/m68k/fpu/k_sinl.c: Likewise.
+	* sysdeps/m68k/fpu/e_remainderl.c: Likewise.
+	* sysdeps/m68k/fpu/s_remquol.c: Likewise.
+	* sysdeps/m68k/fpu/s_scalblnf.c: Likewise.
+	* sysdeps/m68k/fpu/s_llrint.c: Likewise.
+	* sysdeps/m68k/fpu/e_rem_pio2.c: Likewise.
+	* sysdeps/m68k/fpu/e_asinl.c: Likewise.
+	* sysdeps/m68k/fpu/e_logl.c: Likewise.
+	* sysdeps/m68k/fpu/s_cosf.c: Likewise.
+	* sysdeps/m68k/fpu/s_rint.c: Likewise.
+	* sysdeps/m68k/fpu/s_ceill.c: Likewise.
+	* sysdeps/m68k/fpu/s_modfl.c: Likewise.
+	* sysdeps/m68k/fpu/s_csinl.c: Likewise.
+	* sysdeps/m68k/fpu/s_tan.c: Likewise.
+	* sysdeps/m68k/fpu/s_sincosf.c: Likewise.
+	* sysdeps/m68k/fpu/dosincos.c: Likewise.
+	* sysdeps/m68k/fpu/e_powl.c: Likewise.
+	* sysdeps/m68k/fpu/s_ilogb.c: Likewise.
+	* sysdeps/m68k/fpu/s_llrintl.c: Likewise.
+	* sysdeps/m68k/fpu/e_expl.c: Likewise.
+	* sysdeps/m68k/fpu/libm-test-ulps: Likewise.
+	* sysdeps/m68k/fpu/s_tanf.c: Likewise.
+	* sysdeps/m68k/fpu/mpsqrt.c: Likewise.
+	* sysdeps/m68k/fpu/s_sinl.c: Likewise.
+	* sysdeps/m68k/fpu/mathimpl.h: Likewise.
+	* sysdeps/m68k/fpu/e_acosl.c: Likewise.
+	* sysdeps/m68k/fpu/e_cosh.c: Likewise.
+	* sysdeps/m68k/fpu/s_cexpl.c: Likewise.
+	* sysdeps/m68k/fpu/s_fabsl.c: Likewise.
+	* sysdeps/m68k/fpu/halfulp.c: Likewise.
+	* sysdeps/m68k/fpu/s_modff.c: Likewise.
+	* sysdeps/m68k/fpu/s_isnan.c: Likewise.
+	* sysdeps/m68k/fpu/e_atan2.c: Likewise.
+	* sysdeps/m68k/fpu/s_fabs.c: Likewise.
+	* sysdeps/m68k/fpu/e_log10f.c: Likewise.
+	* sysdeps/m68k/fpu/k_cosf.c: Likewise.
+	* sysdeps/m68k/fpu/e_sinh.c: Likewise.
+	* sysdeps/m68k/fpu/s_truncf.c: Likewise.
+	* sysdeps/m68k/fpu/s_ceil.c: Likewise.
+	* sysdeps/m68k/fpu/s_log1pf.c: Likewise.
+	* sysdeps/m68k/fpu/e_logf.c: Likewise.
+	* sysdeps/m68k/fpu/mpatan.c: Likewise.
+	* sysdeps/m68k/fpu/s_csin.c: Likewise.
+	* sysdeps/m68k/fpu/e_exp2l.c: Likewise.
+	* sysdeps/m68k/fpu/e_sinhl.c: Likewise.
+	* sysdeps/m68k/fpu/e_atan2l.c: Likewise.
+	* sysdeps/m68k/fpu/s_scalbn.c: Likewise.
+	* sysdeps/m68k/fpu/s_floorf.c: Likewise.
+	* sysdeps/m68k/fpu/e_log2l.c: Likewise.
+	* sysdeps/m68k/fpu/s_atanl.c: Likewise.
+	* sysdeps/m68k/fpu/s_llrintf.c: Likewise.
+	* sysdeps/m68k/fpu/k_sinf.c: Likewise.
+	* sysdeps/m68k/fpu/s_csinhf.c: Likewise.
+	* sysdeps/m68k/fpu/s_frexp.c: Likewise.
+	* sysdeps/m68k/fpu/s_atanf.c: Likewise.
+	* sysdeps/m68k/fpu/s_floor.c: Likewise.
+	* sysdeps/m68k/fpu/e_exp10l.c: Likewise.
+	* sysdeps/m68k/fpu/doasin.c: Likewise.
+	* sysdeps/m68k/fpu/s_rintl.c: Likewise.
+	* sysdeps/m68k/fpu/e_atanhl.c: Likewise.
+	* sysdeps/m68k/fpu/e_remainderf.c: Likewise.
+	* sysdeps/m68k/fpu/s_scalbln.c: Likewise.
+	* sysdeps/m68k/fpu/e_rem_pio2l.c: Likewise.
+	* sysdeps/m68k/fpu/e_exp10.c: Likewise.
+	* sysdeps/m68k/fpu/s_lrintf.c: Likewise.
+	* sysdeps/m68k/fpu/k_cos.c: Likewise.
+	* sysdeps/m68k/fpu/s_lrint.c: Likewise.
+	* sysdeps/m68k/fpu/s_ccosf.c: Likewise.
+	* sysdeps/m68k/fpu/s_scalblnl.c: Likewise.
+	* sysdeps/m68k/fpu/switch/Makefile: Likewise.
+	* sysdeps/m68k/fpu/switch/switch.c: Likewise.
+	* sysdeps/m68k/fpu/switch/68881-sw.h: Likewise.
+	* sysdeps/m68k/fpu/switch/bits/mathinline.h: Likewise.
+	* sysdeps/m68k/fpu/e_log.c: Likewise.
+	* sysdeps/m68k/fpu/s_nextafterl.c: Likewise.
+	* sysdeps/m68k/fpu/s_nearbyintl.c: Likewise.
+	* sysdeps/m68k/fpu/mpatan2.c: Likewise.
+	* sysdeps/m68k/fpu/k_sin.c: Likewise.
+	* sysdeps/m68k/fpu/e_atanh.c: Likewise.
+	* sysdeps/m68k/fpu/s_remquo.c: Likewise.
+	* sysdeps/m68k/fpu/e_log10l.c: Likewise.
+	* sysdeps/m68k/fpu/s_ceilf.c: Likewise.
+	* sysdeps/m68k/fpu/s_fabsf.c: Likewise.
+	* sysdeps/m68k/fpu/s_significandl.c: Likewise.
+	* sysdeps/m68k/fpu/s_ccosh.c: Likewise.
+	* sysdeps/m68k/fpu/e_coshl.c: Likewise.
+	* sysdeps/m68k/fpu/s_scalbnf.c: Likewise.
+	* sysdeps/m68k/fpu/s_finite.c: Likewise.
+	* sysdeps/m68k/fpu/e_exp2f.c: Likewise.
+	* sysdeps/m68k/fpu/k_rem_pio2f.c: Likewise.
+	* sysdeps/m68k/fpu/s_isinfl.c: Likewise.
+	* sysdeps/m68k/fpu/bits/mathinline.h: Likewise.
+	* sysdeps/m68k/fpu/e_powf.c: Likewise.
+	* sysdeps/m68k/rshift.S: Likewise.
+	* sysdeps/m68k/lshift.S: Likewise.
+	* sysdeps/m68k/strtold_l.c: Likewise.
+	* sysdeps/m68k/printf_fphex.c: Likewise.
+	* sysdeps/m68k/s_isinfl.c: Likewise.
+	* sysdeps/m68k/bits/huge_vall.h: Likewise.
+
+	* sysdeps/m68k/asm-syntax.h (andw, andl, subqw, tstw, tstl): New.
+	* sysdeps/m68k/bits/byteswap.h (__bswap32): Don't define for
+	Coldfire targets.
+	* sysdeps/m68k/bits/setjmp.h (__jmp_buf): Add a 64-byte
+	__fpregs field for Coldfire FPUs.
+	* sysdeps/m68k/dl-machine.h: Include sysdep.h.
+	(elf_machine_load_address): Use PCREL_OP.
+	(_dl_start_user): Likewise.
+	* sysdeps/m68k/dl-trampoline.S (_dl_runtime_resolve): Avoid jmp (%dN)
+	on Coldfire; push the target address and use rts instead.
+	(_dl_runtime_profile): Likewise.  Round up the frame size to longword
+	rather than word alignment.  Avoid dbra on Coldfire.  Avoid using
+	jsr (%d0) on Coldfire; push the return address and target address
+	and use rts instead.  Use fmovem.l rather than fmovem.x on Coldfire.
+	Add missing initialization of lrv_a0 and restore a0 from it after
+	calling _dl_call_pltexit.  Adjust the stack offsets of later data
+	accordingly, fixing a previously incorrect offset for the inregs
+	parameter.
+	* sysdeps/m68k/fpu/fegetenv.c (__fegetenv): Save the control
+	registers individually on Coldfire targets.
+	* sysdeps/m68k/fpu/feholdexcpt.c (feholdexcept): Likewise.
+	Add missing libm_hidden_def.
+	* sysdeps/m68k/fpu/fesetenv.c (__fesetenv): Save and restore the
+	control registers individually on Coldfire targets.
+	* sysdeps/m68k/fpu/fesetround.c (fesetround): Add missing
+	libm_hidden_def.
+	* sysdeps/m68k/fpu_control.h: Add the Coldfire bit assignments to
+	the main comment.
+	(_FPU_DOUBLE): Define to 0 for Coldfire.
+	(_FPU_EXTENDED): Don't define for Coldfire.
+	(_FPU_RESERVED): Include bit 15 for Coldfire.
+	* sysdeps/m68k/Implies: Remove ieee754/ldbl-96.
+	* sysdeps/m68k/m680x0/Implies: Add it to this new file instead.
+	* sysdeps/m68k/ldsodefs.h: New file.
+	* sysdeps/m68k/__longjmp.c (__longjmp): Restore the floating-point
+	registers when using a Coldfire FPU.
+	* sysdeps/m68k/Makefile (long-double-fcts): Delete.
+	* sysdeps/m68k/m680x0/Makefile: Add it to this new file instead.
+	* sysdeps/m68k/memchr.S (__memchr): Add Coldfire code.  Avoid
+	unnecessary moves.
+	* sysdeps/m68k/preconfigure (m680?0): Add "m680x0" to $machine.
+	(m68k): Use the compiler to decide whether $machine should be
+	set to m68k/coldfire or m68k/m680x0/m68020.
+	* sysdeps/m68k/rawmemchr.S (__rawmemchr): Add Coldfire code.  Avoid
+	unnecessary moves.
+	* sysdeps/m68k/setjmp.c (__sigsetjmp): Save the floating-point
+	registers when using a Coldfire FPU.  Use libc_hidden_def rather
+	than hidden_def.
+	* sysdeps/m68k/strchrnul.S (__strchrnul): Add Coldfire code.  Avoid
+	unnecessary moves.
+	* sysdeps/m68k/strchr.S (strchr): Likewise.
+	* sysdeps/m68k/sysdep.h (PCREL_OP): Define.
+	* sysdeps/m68k/tst-audit.h: New file.
+	* sysdeps/m68k/wcpcpy.c: Likewise.
+	* sysdeps/m68k/wcpcpy_chk.c: Likewise.
+	* sysdeps/unix/sysv/linux/m68k/configure.in: New file.
+	* sysdeps/unix/sysv/linux/m68k/configure: Likewise.
+	* sysdeps/unix/sysv/linux/m68k/clone.S (__clone): Add Coldfire code.
+	* sysdeps/unix/sysv/linux/m68k/register-dump.h (real_catch_segfault):
+	Do not define on Coldfire.
+	(catch_segfault): Likewise.
+	(register_dump): Use the Coldfire-specific sigcontext fields to
+	display call-saved data and address registers (rather than the
+	data stored in sc_fpstate by real_catch_segfault).  Display 8-byte 
+	floating-point registers on Coldfire.
+	* sysdeps/unix/sysv/linux/m68k/socket.S (__socket): Pass a temporary
+	register to SINGLE_THREAD_P.
+	* sysdeps/unix/sysv/linux/m68k/sys/reg.h (PT_FP0): Redefine for
+	Coldfire.
+	(PT_FP1, PT_FP2, PT_FP3, PT_FP4, PT_FP5, PT_FP6, PT_FP7): Likewise.
+	* sysdeps/unix/sysv/linux/m68k/sys/ucontext.h (fpregset): Sync field
+	order with linux.  Make f_fpregs an 8*2 array on Coldfire.
+	(ucontext): Sync field order with linux.
+	* sysdeps/unix/sysv/linux/m68k/sysdep.h: Guard against multiple
+	inclusion.
+	(SYSCALL_ERROR_HANDLER): Use PCREL_OP.
+	* sysdeps/unix/sysv/linux/m68k/syscalls.list (oldgetrlimit): Delete.
+	(oldsetrlimit): Likewise.
+	* sysdeps/unix/sysv/linux/m68k/m680x0/syscalls.list: New file.
+	List oldgetrlimit and oldsetrlimit here instead.
+	* sysdeps/unix/sysv/linux/m68k/bits/sigcontext.h: New file.
+	* sysdeps/unix/sysv/linux/m68k/bits/siginfo.h: Likewise.
+	* sysdeps/m68k/coldfire/bits/atomic.h: Likewise.
+	* sysdeps/m68k/coldfire/fpu/e_sqrt.c: Likewise.
+	* sysdeps/m68k/coldfire/fpu/e_sqrtf.c: Likewise.
+	* sysdeps/m68k/coldfire/fpu/fraiseexcpt.c: Likewise.
+	* sysdeps/m68k/coldfire/fpu/libm-test-ulps: Likewise.
+	* sysdeps/m68k/coldfire/fpu/s_fabs.c: Likewise.
+	* sysdeps/m68k/coldfire/fpu/s_fabsf.c: Likewise.
+	* sysdeps/m68k/coldfire/fpu/s_lrint.c: Likewise.
+	* sysdeps/m68k/coldfire/fpu/s_lrintf.c: Likewise.
+	* sysdeps/m68k/coldfire/fpu/s_rint.c: Likewise.
+	* sysdeps/m68k/coldfire/fpu/s_rintf.c: Likewise.
+	* sysdeps/m68k/coldfire/shlib-versions: Likewise.
+
 2006-02-28  Roland McGrath  <roland@redhat.com>
 
 	* sysdeps/m68k/preconfigure: New file.
diff -Naur glibc-ports-2.5/sysdeps/arm/fpu/bits/mathdef.h glibc-ports-2.5-cs/sysdeps/arm/fpu/bits/mathdef.h
--- glibc-ports-2.5/sysdeps/arm/fpu/bits/mathdef.h	2004-03-15 22:44:08.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/arm/fpu/bits/mathdef.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,44 +0,0 @@
-/* Copyright (C) 1999, 2000, 2004 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#if !defined _MATH_H && !defined _COMPLEX_H
-# error "Never use <bits/mathdef.h> directly; include <math.h> instead"
-#endif
-
-#if defined  __USE_ISOC99 && defined _MATH_H && !defined _MATH_H_MATHDEF
-# define _MATH_H_MATHDEF	1
-
-/* GCC does not promote `float' values to `double'.  */
-typedef float float_t;		/* `float' expressions are evaluated as
-				   `float'.  */
-typedef double double_t;	/* `double' expressions are evaluated as
-				   `double'.  */
-
-/* The values returned by `ilogb' for 0 and NaN respectively.  */
-# define FP_ILOGB0	(-2147483647)
-# define FP_ILOGBNAN	(2147483647)
-
-#endif	/* ISO C99 */
-
-#ifndef __NO_LONG_DOUBLE_MATH
-/* Signal that we do not really have a `long double'.  This disables the
-   declaration of all the `long double' function variants.  */
-/* XXX The FPA does support this but the patterns in GCC are currently
-   turned off.  */
-# define __NO_LONG_DOUBLE_MATH	1
-#endif
diff -Naur glibc-ports-2.5/sysdeps/m68k/add_n.S glibc-ports-2.5-cs/sysdeps/m68k/add_n.S
--- glibc-ports-2.5/sysdeps/m68k/add_n.S	2001-07-07 12:13:13.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/add_n.S	1970-01-01 01:00:00.000000000 +0100
@@ -1,76 +0,0 @@
-/* mc68020 __mpn_add_n -- Add two limb vectors of the same length > 0 and store
-   sum in a third limb vector.
-
-Copyright (C) 1992, 1994, 1996, 1998 Free Software Foundation, Inc.
-
-This file is part of the GNU MP Library.
-
-The GNU MP Library is free software; you can redistribute it and/or modify
-it under the terms of the GNU Lesser General Public License as published by
-the Free Software Foundation; either version 2.1 of the License, or (at your
-option) any later version.
-
-The GNU MP Library is distributed in the hope that it will be useful, but
-WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
-or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
-License for more details.
-
-You should have received a copy of the GNU Lesser General Public License
-along with the GNU MP Library; see the file COPYING.LIB.  If not, write to
-the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
-MA 02111-1307, USA. */
-
-/*
-  INPUT PARAMETERS
-  res_ptr	(sp + 4)
-  s1_ptr	(sp + 8)
-  s2_ptr	(sp + 16)
-  size		(sp + 12)
-*/
-
-#include "sysdep.h"
-#include "asm-syntax.h"
-
-	TEXT
-ENTRY(__mpn_add_n)
-/* Save used registers on the stack.  */
-	movel	R(d2),MEM_PREDEC(sp)
-	movel	R(a2),MEM_PREDEC(sp)
-
-/* Copy the arguments to registers.  Better use movem?  */
-	movel	MEM_DISP(sp,12),R(a2)
-	movel	MEM_DISP(sp,16),R(a0)
-	movel	MEM_DISP(sp,20),R(a1)
-	movel	MEM_DISP(sp,24),R(d2)
-
-	eorw	#1,R(d2)
-	lsrl	#1,R(d2)
-	bcc	L(L1)
-	subql	#1,R(d2)	/* clears cy as side effect */
-
-L(Loop:)
-	movel	MEM_POSTINC(a0),R(d0)
-	movel	MEM_POSTINC(a1),R(d1)
-	addxl	R(d1),R(d0)
-	movel	R(d0),MEM_POSTINC(a2)
-L(L1:)	movel	MEM_POSTINC(a0),R(d0)
-	movel	MEM_POSTINC(a1),R(d1)
-	addxl	R(d1),R(d0)
-	movel	R(d0),MEM_POSTINC(a2)
-
-	dbf	R(d2),L(Loop)		/* loop until 16 lsb of %4 == -1 */
-	subxl	R(d0),R(d0)	/* d0 <= -cy; save cy as 0 or -1 in d0 */
-	subl	#0x10000,R(d2)
-	bcs	L(L2)
-	addl	R(d0),R(d0)	/* restore cy */
-	bra	L(Loop)
-
-L(L2:)
-	negl	R(d0)
-
-/* Restore used registers from stack frame.  */
-	movel	MEM_POSTINC(sp),R(a2)
-	movel	MEM_POSTINC(sp),R(d2)
-
-	rts
-END(__mpn_add_n)
diff -Naur glibc-ports-2.5/sysdeps/m68k/asm-syntax.h glibc-ports-2.5-cs/sysdeps/m68k/asm-syntax.h
--- glibc-ports-2.5/sysdeps/m68k/asm-syntax.h	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/asm-syntax.h	2007-03-27 15:01:23.000000000 +0200
@@ -93,7 +93,9 @@
 #define cmpl cmp.l
 #define orl or.l
 #define clrl clr.l
+#define andw and.w
 #define eorw eor.w
+#define andl and.l
 #define lsrl lsr.l
 #define lsll lsl.l
 #define roxrl roxr.l
@@ -103,7 +105,10 @@
 #define addql addq.l
 #define subl sub.l
 #define subxl subx.l
+#define subqw subq.w
 #define subql subq.l
 #define negl neg.l
 #define mulul mulu.l
+#define tstw tst.w
+#define tstl tst.l
 #endif
diff -Naur glibc-ports-2.5/sysdeps/m68k/bits/byteswap.h glibc-ports-2.5-cs/sysdeps/m68k/bits/byteswap.h
--- glibc-ports-2.5/sysdeps/m68k/bits/byteswap.h	2002-01-08 11:19:33.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/bits/byteswap.h	2007-03-27 15:01:21.000000000 +0200
@@ -35,7 +35,7 @@
   ((((x) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >>  8) | \
    (((x) & 0x0000ff00) <<  8) | (((x) & 0x000000ff) << 24))
 
-#if defined __GNUC__ && __GNUC__ >= 2
+#if defined __GNUC__ && __GNUC__ >= 2 && !defined(__mcoldfire__)
 # define __bswap_32(x) \
   __extension__							\
   ({ unsigned int __bswap_32_v;					\
diff -Naur glibc-ports-2.5/sysdeps/m68k/bits/huge_vall.h glibc-ports-2.5-cs/sysdeps/m68k/bits/huge_vall.h
--- glibc-ports-2.5/sysdeps/m68k/bits/huge_vall.h	2004-03-15 22:44:10.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/bits/huge_vall.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,43 +0,0 @@
-/* `HUGE_VALL' constant for m68k (where it is infinity).
-   Used by <stdlib.h> and <math.h> functions for overflow.
-   Copyright (C) 1992, 1995, 1996, 1997, 1999, 2000, 2004
-   Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#ifndef _MATH_H
-# error "Never use <bits/huge_val.h> directly; include <math.h> instead."
-#endif
-
-#if __GNUC_PREREQ(3,3)
-# define HUGE_VALL	(__builtin_huge_vall ())
-#elif __GNUC_PREREQ(2,96)
-# define HUGE_VALL	(__extension__ 0x1.0p32767L)
-#elif defined__GNUC__
-
-# define HUGE_VALL					\
-  (__extension__					\
-   ((union { unsigned long __l[3]; long double __ld; })	\
-    { __l: { 0x7fff0000UL, 0x80000000UL, 0UL } }).__ld)
-
-#else /* not GCC */
-
-static union { unsigned char __c[12]; long double __ld; } __huge_vall =
-  { { 0x7f, 0xff, 0, 0, 0x80, 0, 0, 0, 0, 0, 0, 0 } };
-# define HUGE_VALL	(__huge_vall.__ld)
-
-#endif /* GCC 2.95.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/bits/mathdef.h glibc-ports-2.5-cs/sysdeps/m68k/bits/mathdef.h
--- glibc-ports-2.5/sysdeps/m68k/bits/mathdef.h	2006-02-01 03:59:59.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/bits/mathdef.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,38 +0,0 @@
-/* Copyright (C) 1997, 1998, 1999, 2000, 2004 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#if !defined _MATH_H && !defined _COMPLEX_H
-# error "Never use <bits/mathdef.h> directly; include <math.h> instead"
-#endif
-
-#if defined __USE_ISOC99 && defined _MATH_H && !defined _MATH_H_MATHDEF
-# define _MATH_H_MATHDEF	1
-
-/* The m68k FPUs evaluate all values in the 96 bit floating-point format
-   which is also available for the user as `long double'.  Therefore we
-   define: */
-typedef long double float_t;	/* `float' expressions are evaluated as
-				   `long double'.  */
-typedef long double double_t;	/* `double' expressions are evaluated as
-				   `long double'.  */
-
-/* The values returned by `ilogb' for 0 and NaN respectively.  */
-# define FP_ILOGB0	(-2147483647 - 1)
-# define FP_ILOGBNAN	(2147483647)
-
-#endif	/* ISO C99 */
diff -Naur glibc-ports-2.5/sysdeps/m68k/bits/setjmp.h glibc-ports-2.5-cs/sysdeps/m68k/bits/setjmp.h
--- glibc-ports-2.5/sysdeps/m68k/bits/setjmp.h	2006-01-10 09:49:29.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/bits/setjmp.h	2007-03-27 15:01:21.000000000 +0200
@@ -38,6 +38,8 @@
     /* There are eight floating point registers which
        are saved in IEEE 96-bit extended format.  */
     char __fpregs[8 * (96 / 8)];
+#elif defined __mcffpu__
+    char __fpregs[8 * (64 / 8)];
 #endif
 
   } __jmp_buf[1];
diff -Naur glibc-ports-2.5/sysdeps/m68k/coldfire/bits/atomic.h glibc-ports-2.5-cs/sysdeps/m68k/coldfire/bits/atomic.h
--- glibc-ports-2.5/sysdeps/m68k/coldfire/bits/atomic.h	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/coldfire/bits/atomic.h	2007-03-27 15:01:18.000000000 +0200
@@ -0,0 +1,69 @@
+/* Copyright (C) 2003, 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#ifndef _BITS_ATOMIC_H
+#define _BITS_ATOMIC_H	1
+
+#include <stdint.h>
+
+/* Coldfire has no atomic compare-and-exchange operation, and the
+   kernel provides no userspace atomicity operations.  Here we just
+   use generic non-atomic implementations instead.  */
+
+typedef int8_t atomic8_t;
+typedef uint8_t uatomic8_t;
+typedef int_fast8_t atomic_fast8_t;
+typedef uint_fast8_t uatomic_fast8_t;
+
+typedef int16_t atomic16_t;
+typedef uint16_t uatomic16_t;
+typedef int_fast16_t atomic_fast16_t;
+typedef uint_fast16_t uatomic_fast16_t;
+
+typedef int32_t atomic32_t;
+typedef uint32_t uatomic32_t;
+typedef int_fast32_t atomic_fast32_t;
+typedef uint_fast32_t uatomic_fast32_t;
+
+typedef int64_t atomic64_t;
+typedef uint64_t uatomic64_t;
+typedef int_fast64_t atomic_fast64_t;
+typedef uint_fast64_t uatomic_fast64_t;
+
+typedef intptr_t atomicptr_t;
+typedef uintptr_t uatomicptr_t;
+typedef intmax_t atomic_max_t;
+typedef uintmax_t uatomic_max_t;
+
+/* The only basic operation needed is compare and exchange.  */
+#define atomic_compare_and_exchange_val_acq(mem, newval, oldval) \
+  ({ __typeof (mem) __gmemp = (mem);				      \
+     __typeof (*mem) __gret = *__gmemp;				      \
+     __typeof (*mem) __gnewval = (newval);			      \
+								      \
+     if (__gret == (oldval))					      \
+       *__gmemp = __gnewval;					      \
+     __gret; })
+
+#define atomic_compare_and_exchange_bool_acq(mem, newval, oldval) \
+  ({ __typeof (mem) __gmemp = (mem);				      \
+     __typeof (*mem) __gnewval = (newval);			      \
+								      \
+     *__gmemp == (oldval) ? (*__gmemp = __gnewval, 0) : 1; })
+
+#endif
diff -Naur glibc-ports-2.5/sysdeps/m68k/coldfire/fpu/e_sqrt.c glibc-ports-2.5-cs/sysdeps/m68k/coldfire/fpu/e_sqrt.c
--- glibc-ports-2.5/sysdeps/m68k/coldfire/fpu/e_sqrt.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/coldfire/fpu/e_sqrt.c	2007-03-27 15:01:19.000000000 +0200
@@ -0,0 +1,24 @@
+/* Copyright (C) 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+double
+__ieee754_sqrt (double x)
+{
+  asm ("fdsqrt.d %1,%0" : "=f" (x) : "fm" (x));
+  return x;
+}
diff -Naur glibc-ports-2.5/sysdeps/m68k/coldfire/fpu/e_sqrtf.c glibc-ports-2.5-cs/sysdeps/m68k/coldfire/fpu/e_sqrtf.c
--- glibc-ports-2.5/sysdeps/m68k/coldfire/fpu/e_sqrtf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/coldfire/fpu/e_sqrtf.c	2007-03-27 15:01:19.000000000 +0200
@@ -0,0 +1,25 @@
+/* Copyright (C) 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+float
+__ieee754_sqrtf (float x)
+{
+  double result;
+  asm ("fssqrt.s %1,%0" : "=f" (result) : "dm" (x));
+  return result;
+}
diff -Naur glibc-ports-2.5/sysdeps/m68k/coldfire/fpu/fraiseexcpt.c glibc-ports-2.5-cs/sysdeps/m68k/coldfire/fpu/fraiseexcpt.c
--- glibc-ports-2.5/sysdeps/m68k/coldfire/fpu/fraiseexcpt.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/coldfire/fpu/fraiseexcpt.c	2007-03-27 15:01:19.000000000 +0200
@@ -0,0 +1,67 @@
+/* Raise given exceptions.
+   Copyright (C) 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <fenv.h>
+#include <float.h>
+#include <math.h>
+
+int
+feraiseexcept (int excepts)
+{
+  /* Raise exceptions represented by EXCEPTS.  But we must raise only one
+     signal at a time.  It is important that if the overflow/underflow
+     exception and the divide by zero exception are given at the same
+     time, the overflow/underflow exception follows the divide by zero
+     exception.
+
+     The Coldfire FPU allows an exception to be raised by asserting
+     the associated EXC bit and then executing an arbitrary arithmetic
+     instruction.  fmove.l is classified as an arithmetic instruction
+     and suffices for this purpose.
+
+     We therefore raise an exception by setting both the EXC and AEXC
+     bit associated with the exception (the former being 6 bits to the
+     left of the latter) and then loading the longword at (%sp) into an
+     FP register.  */
+
+  inline void
+  raise_one_exception (int mask)
+  {
+    if (excepts & mask)
+      {
+	int fpsr;
+	double unused;
+
+	asm volatile ("fmove%.l %/fpsr,%0" : "=d" (fpsr));
+	fpsr |= (mask << 6) | mask;
+	asm volatile ("fmove%.l %0,%/fpsr" :: "d" (fpsr));
+	asm volatile ("fmove%.l (%%sp),%0" : "=f" (unused));
+      }
+  }
+
+  raise_one_exception (FE_INVALID);
+  raise_one_exception (FE_DIVBYZERO);
+  raise_one_exception (FE_OVERFLOW);
+  raise_one_exception (FE_UNDERFLOW);
+  raise_one_exception (FE_INEXACT);
+
+  /* Success.  */
+  return 0;
+}
+libm_hidden_def (feraiseexcept)
diff -Naur glibc-ports-2.5/sysdeps/m68k/coldfire/fpu/libm-test-ulps glibc-ports-2.5-cs/sysdeps/m68k/coldfire/fpu/libm-test-ulps
--- glibc-ports-2.5/sysdeps/m68k/coldfire/fpu/libm-test-ulps	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/coldfire/fpu/libm-test-ulps	2007-03-27 15:01:19.000000000 +0200
@@ -0,0 +1,820 @@
+# Begin of automatic generation
+
+# atan2
+Test "atan2 (-0.75, -1.0) == -2.49809154479650885165983415456218025":
+float: 1
+ifloat: 1
+Test "atan2 (0.75, -1.0) == 2.49809154479650885165983415456218025":
+float: 1
+ifloat: 1
+Test "atan2 (1.390625, 0.9296875) == 0.981498387184244311516296577615519772":
+float: 1
+ifloat: 1
+
+# atanh
+Test "atanh (0.75) == 0.972955074527656652552676371721589865":
+float: 1
+ifloat: 1
+
+# cacosh
+Test "Imaginary part of: cacosh (-2 - 3 i) == 1.9833870299165354323470769028940395 - 2.1414491111159960199416055713254211 i":
+float: 1
+ifloat: 1
+
+# casin
+Test "Real part of: casin (0.75 + 1.25 i) == 0.453276177638793913448921196101971749 + 1.13239363160530819522266333696834467 i":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+
+# casinh
+Test "Real part of: casinh (-2 - 3 i) == -1.9686379257930962917886650952454982 - 0.96465850440760279204541105949953237 i":
+double: 5
+float: 1
+idouble: 5
+ifloat: 1
+Test "Imaginary part of: casinh (-2 - 3 i) == -1.9686379257930962917886650952454982 - 0.96465850440760279204541105949953237 i":
+double: 3
+float: 6
+idouble: 3
+ifloat: 6
+Test "Real part of: casinh (0.75 + 1.25 i) == 1.03171853444778027336364058631006594 + 0.911738290968487636358489564316731207 i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: casinh (0.75 + 1.25 i) == 1.03171853444778027336364058631006594 + 0.911738290968487636358489564316731207 i":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+
+# catan
+Test "Imaginary part of: catan (-2 - 3 i) == -1.4099210495965755225306193844604208 - 0.22907268296853876629588180294200276 i":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+
+# catanh
+Test "Real part of: catanh (-2 - 3 i) == -0.14694666622552975204743278515471595 - 1.3389725222944935611241935759091443 i":
+double: 4
+idouble: 4
+Test "Real part of: catanh (0.75 + 1.25 i) == 0.261492138795671927078652057366532140 + 0.996825126463918666098902241310446708 i":
+double: 1
+idouble: 1
+
+# cbrt
+Test "cbrt (-27.0) == -3.0":
+double: 1
+idouble: 1
+Test "cbrt (0.75) == 0.908560296416069829445605878163630251":
+double: 1
+idouble: 1
+Test "cbrt (0.9921875) == 0.997389022060725270579075195353955217":
+double: 1
+idouble: 1
+
+# ccos
+Test "Imaginary part of: ccos (-2 - 3 i) == -4.18962569096880723013255501961597373 - 9.10922789375533659797919726277886212 i":
+float: 1
+ifloat: 1
+Test "Real part of: ccos (0.75 + 1.25 i) == 1.38173873063425888530729933139078645 - 1.09193013555397466170919531722024128 i":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+Test "Imaginary part of: ccos (0.75 + 1.25 i) == 1.38173873063425888530729933139078645 - 1.09193013555397466170919531722024128 i":
+float: 1
+ifloat: 1
+
+# ccosh
+Test "Real part of: ccosh (-2 - 3 i) == -3.72454550491532256547397070325597253 + 0.511822569987384608834463849801875634 i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: ccosh (-2 - 3 i) == -3.72454550491532256547397070325597253 + 0.511822569987384608834463849801875634 i":
+float: 1
+ifloat: 1
+Test "Real part of: ccosh (0.75 + 1.25 i) == 0.408242591877968807788852146397499084 + 0.780365930845853240391326216300863152 i":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+Test "Imaginary part of: ccosh (0.75 + 1.25 i) == 0.408242591877968807788852146397499084 + 0.780365930845853240391326216300863152 i":
+float: 1
+ifloat: 1
+
+# cexp
+Test "Imaginary part of: cexp (-2.0 - 3.0 i) == -0.13398091492954261346140525546115575 - 0.019098516261135196432576240858800925 i":
+float: 1
+ifloat: 1
+Test "Real part of: cexp (0.75 + 1.25 i) == 0.667537446429131586942201977015932112 + 2.00900045494094876258347228145863909 i":
+float: 1
+ifloat: 1
+
+# clog
+Test "Real part of: clog (0.75 + 1.25 i) == 0.376885901188190075998919126749298416 + 1.03037682652431246378774332703115153 i":
+float: 1
+ifloat: 1
+
+# clog10
+Test "Imaginary part of: clog10 (-0 + inf i) == inf + pi/2*log10(e) i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: clog10 (-0 - inf i) == inf - pi/2*log10(e) i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: clog10 (-2 - 3 i) == 0.556971676153418384603252578971164214 - 0.937554462986374708541507952140189646 i":
+double: 1
+idouble: 1
+Test "Imaginary part of: clog10 (-3 + inf i) == inf + pi/2*log10(e) i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: clog10 (-3 - inf i) == inf - pi/2*log10(e) i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: clog10 (-inf + 0 i) == inf + pi*log10(e) i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: clog10 (-inf + 1 i) == inf + pi*log10(e) i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: clog10 (-inf - 0 i) == inf - pi*log10(e) i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: clog10 (-inf - 1 i) == inf - pi*log10(e) i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: clog10 (0 + inf i) == inf + pi/2*log10(e) i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: clog10 (0 - inf i) == inf - pi/2*log10(e) i":
+float: 1
+ifloat: 1
+Test "Real part of: clog10 (0.75 + 1.25 i) == 0.163679467193165171449476605077428975 + 0.447486970040493067069984724340855636 i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: clog10 (3 + inf i) == inf + pi/2*log10(e) i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: clog10 (3 - inf i) == inf - pi/2*log10(e) i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: clog10 (inf + inf i) == inf + pi/4*log10(e) i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: clog10 (inf - inf i) == inf - pi/4*log10(e) i":
+float: 1
+ifloat: 1
+
+# cos
+Test "cos (M_PI_6l * 2.0) == 0.5":
+double: 1
+idouble: 1
+Test "cos (M_PI_6l * 4.0) == -0.5":
+double: 2
+float: 1
+idouble: 2
+ifloat: 1
+
+# cpow
+Test "Real part of: cpow (0.75 + 1.25 i, 0.0 + 1.0 i) == 0.331825439177608832276067945276730566 + 0.131338600281188544930936345230903032 i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: cpow (0.75 + 1.25 i, 0.0 + 1.0 i) == 0.331825439177608832276067945276730566 + 0.131338600281188544930936345230903032 i":
+float: 1
+ifloat: 1
+Test "Real part of: cpow (0.75 + 1.25 i, 0.75 + 1.25 i) == 0.117506293914473555420279832210420483 + 0.346552747708338676483025352060418001 i":
+double: 1
+float: 4
+idouble: 1
+ifloat: 4
+Test "Real part of: cpow (0.75 + 1.25 i, 1.0 + 1.0 i) == 0.0846958290317209430433805274189191353 + 0.513285749182902449043287190519090481 i":
+double: 2
+float: 3
+idouble: 2
+ifloat: 3
+Test "Real part of: cpow (2 + 3 i, 4 + 0 i) == -119.0 - 120.0 i":
+double: 1
+float: 4
+idouble: 1
+ifloat: 4
+Test "Imaginary part of: cpow (2 + 3 i, 4 + 0 i) == -119.0 - 120.0 i":
+float: 2
+ifloat: 2
+Test "Imaginary part of: cpow (e + 0 i, 0 + 2 * M_PIl i) == 1.0 + 0.0 i":
+double: 2
+float: 2
+idouble: 2
+ifloat: 2
+
+# csinh
+Test "Imaginary part of: csinh (-2 - 3 i) == 3.59056458998577995201256544779481679 - 0.530921086248519805267040090660676560 i":
+double: 1
+idouble: 1
+Test "Real part of: csinh (0.75 + 1.25 i) == 0.259294854551162779153349830618433028 + 1.22863452409509552219214606515777594 i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: csinh (0.75 + 1.25 i) == 0.259294854551162779153349830618433028 + 1.22863452409509552219214606515777594 i":
+float: 1
+ifloat: 1
+
+# csqrt
+Test "Real part of: csqrt (-2 + 3 i) == 0.89597747612983812471573375529004348 + 1.6741492280355400404480393008490519 i":
+float: 1
+ifloat: 1
+Test "Real part of: csqrt (-2 - 3 i) == 0.89597747612983812471573375529004348 - 1.6741492280355400404480393008490519 i":
+float: 1
+ifloat: 1
+
+# ctan
+Test "Imaginary part of: ctan (0.75 + 1.25 i) == 0.160807785916206426725166058173438663 + 0.975363285031235646193581759755216379 i":
+double: 1
+idouble: 1
+
+# ctanh
+Test "Real part of: ctanh (-2 - 3 i) == -0.965385879022133124278480269394560686 + 0.988437503832249372031403430350121098e-2 i":
+double: 1
+float: 2
+idouble: 1
+ifloat: 2
+Test "Imaginary part of: ctanh (0 + pi/4 i) == 0.0 + 1.0 i":
+float: 1
+ifloat: 1
+Test "Real part of: ctanh (0.75 + 1.25 i) == 1.37260757053378320258048606571226857 + 0.385795952609750664177596760720790220 i":
+double: 1
+idouble: 1
+
+# erf
+Test "erf (1.25) == 0.922900128256458230136523481197281140":
+double: 1
+idouble: 1
+
+# erfc
+Test "erfc (2.0) == 0.00467773498104726583793074363274707139":
+double: 1
+idouble: 1
+Test "erfc (4.125) == 0.542340079956506600531223408575531062e-8":
+double: 1
+idouble: 1
+
+# exp10
+Test "exp10 (-1) == 0.1":
+double: 2
+float: 1
+idouble: 2
+ifloat: 1
+Test "exp10 (0.75) == 5.62341325190349080394951039776481231":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+Test "exp10 (3) == 1000":
+double: 6
+float: 2
+idouble: 6
+ifloat: 2
+
+# expm1
+Test "expm1 (0.75) == 1.11700001661267466854536981983709561":
+double: 1
+idouble: 1
+Test "expm1 (1) == M_El - 1.0":
+float: 1
+ifloat: 1
+
+# hypot
+Test "hypot (-0.7, -12.4) == 12.419742348374220601176836866763271":
+float: 1
+ifloat: 1
+Test "hypot (-0.7, 12.4) == 12.419742348374220601176836866763271":
+float: 1
+ifloat: 1
+Test "hypot (-12.4, -0.7) == 12.419742348374220601176836866763271":
+float: 1
+ifloat: 1
+Test "hypot (-12.4, 0.7) == 12.419742348374220601176836866763271":
+float: 1
+ifloat: 1
+Test "hypot (0.7, -12.4) == 12.419742348374220601176836866763271":
+float: 1
+ifloat: 1
+Test "hypot (0.7, 12.4) == 12.419742348374220601176836866763271":
+float: 1
+ifloat: 1
+Test "hypot (12.4, -0.7) == 12.419742348374220601176836866763271":
+float: 1
+ifloat: 1
+Test "hypot (12.4, 0.7) == 12.419742348374220601176836866763271":
+float: 1
+ifloat: 1
+
+# j0
+Test "j0 (-4.0) == -3.9714980986384737228659076845169804197562E-1":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+Test "j0 (0.75) == 0.864242275166648623555731103820923211":
+float: 1
+ifloat: 1
+Test "j0 (10.0) == -0.245935764451348335197760862485328754":
+double: 2
+float: 1
+idouble: 2
+ifloat: 1
+Test "j0 (2.0) == 0.223890779141235668051827454649948626":
+float: 2
+ifloat: 2
+Test "j0 (4.0) == -3.9714980986384737228659076845169804197562E-1":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+Test "j0 (8.0) == 0.171650807137553906090869407851972001":
+float: 1
+ifloat: 1
+
+# j1
+Test "j1 (10.0) == 0.0434727461688614366697487680258592883":
+float: 2
+ifloat: 2
+Test "j1 (2.0) == 0.576724807756873387202448242269137087":
+double: 1
+idouble: 1
+Test "j1 (8.0) == 0.234636346853914624381276651590454612":
+double: 1
+idouble: 1
+
+# jn
+Test "jn (0, -4.0) == -3.9714980986384737228659076845169804197562E-1":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+Test "jn (0, 0.75) == 0.864242275166648623555731103820923211":
+float: 1
+ifloat: 1
+Test "jn (0, 10.0) == -0.245935764451348335197760862485328754":
+double: 2
+float: 1
+idouble: 2
+ifloat: 1
+Test "jn (0, 2.0) == 0.223890779141235668051827454649948626":
+float: 2
+ifloat: 2
+Test "jn (0, 4.0) == -3.9714980986384737228659076845169804197562E-1":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+Test "jn (0, 8.0) == 0.171650807137553906090869407851972001":
+float: 1
+ifloat: 1
+Test "jn (1, 10.0) == 0.0434727461688614366697487680258592883":
+float: 2
+ifloat: 2
+Test "jn (1, 2.0) == 0.576724807756873387202448242269137087":
+double: 1
+idouble: 1
+Test "jn (1, 8.0) == 0.234636346853914624381276651590454612":
+double: 1
+idouble: 1
+Test "jn (10, 0.125) == 0.250543369809369890173993791865771547e-18":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+Test "jn (10, 0.75) == 0.149621713117596814698712483621682835e-10":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+Test "jn (10, 10.0) == 0.207486106633358857697278723518753428":
+double: 4
+float: 3
+idouble: 4
+ifloat: 3
+Test "jn (10, 2.0) == 0.251538628271673670963516093751820639e-6":
+float: 4
+ifloat: 4
+Test "jn (3, 0.125) == 0.406503832554912875023029337653442868e-4":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+Test "jn (3, 0.75) == 0.848438342327410884392755236884386804e-2":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+Test "jn (3, 10.0) == 0.0583793793051868123429354784103409563":
+double: 3
+float: 1
+idouble: 3
+ifloat: 1
+Test "jn (3, 2.0) == 0.128943249474402051098793332969239835":
+double: 1
+float: 2
+idouble: 1
+ifloat: 2
+
+# lgamma
+Test "lgamma (0.7) == 0.260867246531666514385732417016759578":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+Test "lgamma (1.2) == -0.853740900033158497197028392998854470e-1":
+double: 1
+float: 2
+idouble: 1
+ifloat: 2
+
+# log10
+Test "log10 (0.75) == -0.124938736608299953132449886193870744":
+double: 1
+float: 2
+idouble: 1
+ifloat: 2
+Test "log10 (e) == log10(e)":
+float: 1
+ifloat: 1
+
+# log1p
+Test "log1p (-0.25) == -0.287682072451780927439219005993827432":
+float: 1
+ifloat: 1
+
+# sincos
+Test "sincos (M_PI_6l*2.0, &sin_res, &cos_res) puts 0.5 in cos_res":
+double: 1
+idouble: 1
+Test "sincos (M_PI_6l*2.0, &sin_res, &cos_res) puts 0.86602540378443864676372317075293616 in sin_res":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+Test "sincos (pi/6, &sin_res, &cos_res) puts 0.86602540378443864676372317075293616 in cos_res":
+float: 1
+ifloat: 1
+
+# tgamma
+Test "tgamma (-0.5) == -2 sqrt (pi)":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+Test "tgamma (0.5) == sqrt (pi)":
+float: 1
+ifloat: 1
+Test "tgamma (0.7) == 1.29805533264755778568117117915281162":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+
+# y0
+Test "y0 (1.0) == 0.0882569642156769579829267660235151628":
+double: 2
+float: 1
+idouble: 2
+ifloat: 1
+Test "y0 (1.5) == 0.382448923797758843955068554978089862":
+double: 2
+float: 1
+idouble: 2
+ifloat: 1
+Test "y0 (10.0) == 0.0556711672835993914244598774101900481":
+float: 1
+ifloat: 1
+Test "y0 (8.0) == 0.223521489387566220527323400498620359":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+
+# y1
+Test "y1 (0.125) == -5.19993611253477499595928744876579921":
+double: 1
+idouble: 1
+Test "y1 (1.5) == -0.412308626973911295952829820633445323":
+float: 1
+ifloat: 1
+Test "y1 (10.0) == 0.249015424206953883923283474663222803":
+double: 3
+float: 1
+idouble: 3
+ifloat: 1
+Test "y1 (2.0) == -0.107032431540937546888370772277476637":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+Test "y1 (8.0) == -0.158060461731247494255555266187483550":
+double: 1
+float: 2
+idouble: 1
+ifloat: 2
+
+# yn
+Test "yn (0, 1.0) == 0.0882569642156769579829267660235151628":
+double: 2
+float: 1
+idouble: 2
+ifloat: 1
+Test "yn (0, 1.5) == 0.382448923797758843955068554978089862":
+double: 2
+float: 1
+idouble: 2
+ifloat: 1
+Test "yn (0, 10.0) == 0.0556711672835993914244598774101900481":
+float: 1
+ifloat: 1
+Test "yn (0, 8.0) == 0.223521489387566220527323400498620359":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+Test "yn (1, 0.125) == -5.19993611253477499595928744876579921":
+double: 1
+idouble: 1
+Test "yn (1, 1.5) == -0.412308626973911295952829820633445323":
+float: 1
+ifloat: 1
+Test "yn (1, 10.0) == 0.249015424206953883923283474663222803":
+double: 3
+float: 1
+idouble: 3
+ifloat: 1
+Test "yn (1, 2.0) == -0.107032431540937546888370772277476637":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+Test "yn (1, 8.0) == -0.158060461731247494255555266187483550":
+double: 1
+float: 2
+idouble: 1
+ifloat: 2
+Test "yn (10, 0.125) == -127057845771019398.252538486899753195":
+double: 1
+idouble: 1
+Test "yn (10, 0.75) == -2133501638.90573424452445412893839236":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+Test "yn (10, 1.0) == -121618014.278689189288130426667971145":
+double: 1
+idouble: 1
+Test "yn (10, 10.0) == -0.359814152183402722051986577343560609":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+Test "yn (10, 2.0) == -129184.542208039282635913145923304214":
+double: 2
+idouble: 2
+Test "yn (3, 0.125) == -2612.69757350066712600220955744091741":
+double: 1
+idouble: 1
+Test "yn (3, 0.75) == -12.9877176234475433186319774484809207":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+Test "yn (3, 10.0) == -0.251362657183837329779204747654240998":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+Test "yn (3, 2.0) == -1.12778377684042778608158395773179238":
+double: 1
+idouble: 1
+
+# Maximal error of functions:
+Function: "atan2":
+float: 1
+ifloat: 1
+
+Function: "atanh":
+float: 1
+ifloat: 1
+
+Function: Imaginary part of "cacosh":
+float: 1
+ifloat: 1
+
+Function: Real part of "casin":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+
+Function: Real part of "casinh":
+double: 5
+float: 1
+idouble: 5
+ifloat: 1
+
+Function: Imaginary part of "casinh":
+double: 3
+float: 6
+idouble: 3
+ifloat: 6
+
+Function: Imaginary part of "catan":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+
+Function: Real part of "catanh":
+double: 4
+idouble: 4
+
+Function: "cbrt":
+double: 1
+idouble: 1
+
+Function: Real part of "ccos":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+
+Function: Imaginary part of "ccos":
+float: 1
+ifloat: 1
+
+Function: Real part of "ccosh":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+
+Function: Imaginary part of "ccosh":
+float: 1
+ifloat: 1
+
+Function: Real part of "cexp":
+float: 1
+ifloat: 1
+
+Function: Imaginary part of "cexp":
+float: 1
+ifloat: 1
+
+Function: Real part of "clog":
+float: 1
+ifloat: 1
+
+Function: Real part of "clog10":
+float: 1
+ifloat: 1
+
+Function: Imaginary part of "clog10":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+
+Function: "cos":
+double: 2
+float: 1
+idouble: 2
+ifloat: 1
+
+Function: Real part of "cpow":
+double: 2
+float: 4
+idouble: 2
+ifloat: 4
+
+Function: Imaginary part of "cpow":
+double: 2
+float: 2
+idouble: 2
+ifloat: 2
+
+Function: Real part of "csinh":
+float: 1
+ifloat: 1
+
+Function: Imaginary part of "csinh":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+
+Function: Real part of "csqrt":
+float: 1
+ifloat: 1
+
+Function: Imaginary part of "ctan":
+double: 1
+idouble: 1
+
+Function: Real part of "ctanh":
+double: 1
+float: 2
+idouble: 1
+ifloat: 2
+
+Function: Imaginary part of "ctanh":
+float: 1
+ifloat: 1
+
+Function: "erf":
+double: 1
+idouble: 1
+
+Function: "erfc":
+double: 1
+idouble: 1
+
+Function: "exp10":
+double: 6
+float: 2
+idouble: 6
+ifloat: 2
+
+Function: "expm1":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+
+Function: "hypot":
+float: 1
+ifloat: 1
+
+Function: "j0":
+double: 2
+float: 2
+idouble: 2
+ifloat: 2
+
+Function: "j1":
+double: 1
+float: 2
+idouble: 1
+ifloat: 2
+
+Function: "jn":
+double: 4
+float: 4
+idouble: 4
+ifloat: 4
+
+Function: "lgamma":
+double: 1
+float: 2
+idouble: 1
+ifloat: 2
+
+Function: "log10":
+double: 1
+float: 2
+idouble: 1
+ifloat: 2
+
+Function: "log1p":
+float: 1
+ifloat: 1
+
+Function: "sincos":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+
+Function: "tan":
+double: 1
+idouble: 1
+
+Function: "tgamma":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+
+Function: "y0":
+double: 2
+float: 1
+idouble: 2
+ifloat: 1
+
+Function: "y1":
+double: 3
+float: 2
+idouble: 3
+ifloat: 2
+
+Function: "yn":
+double: 3
+float: 2
+idouble: 3
+ifloat: 2
+
+# end of automatic generation
diff -Naur glibc-ports-2.5/sysdeps/m68k/coldfire/fpu/s_fabs.c glibc-ports-2.5-cs/sysdeps/m68k/coldfire/fpu/s_fabs.c
--- glibc-ports-2.5/sysdeps/m68k/coldfire/fpu/s_fabs.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/coldfire/fpu/s_fabs.c	2007-03-27 15:01:19.000000000 +0200
@@ -0,0 +1,29 @@
+/* Copyright (C) 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+double
+__fabs (double x)
+{
+  asm ("fdabs.d %1,%0" : "=f" (x) : "fm" (x));
+  return x;
+}
+weak_alias (__fabs, fabs)
+#ifdef NO_LONG_DOUBLE
+strong_alias (__fabs, __fabsl)
+weak_alias (__fabs, fabsl)
+#endif
diff -Naur glibc-ports-2.5/sysdeps/m68k/coldfire/fpu/s_fabsf.c glibc-ports-2.5-cs/sysdeps/m68k/coldfire/fpu/s_fabsf.c
--- glibc-ports-2.5/sysdeps/m68k/coldfire/fpu/s_fabsf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/coldfire/fpu/s_fabsf.c	2007-03-27 15:01:19.000000000 +0200
@@ -0,0 +1,25 @@
+/* Copyright (C) 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+float
+__fabsf (float x)
+{
+  asm ("fsabs.s %1,%0" : "=f" (x) : "dm" (x));
+  return x;
+}
+weak_alias (__fabsf, fabsf)
diff -Naur glibc-ports-2.5/sysdeps/m68k/coldfire/fpu/s_lrint.c glibc-ports-2.5-cs/sysdeps/m68k/coldfire/fpu/s_lrint.c
--- glibc-ports-2.5/sysdeps/m68k/coldfire/fpu/s_lrint.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/coldfire/fpu/s_lrint.c	2007-03-27 15:01:19.000000000 +0200
@@ -0,0 +1,30 @@
+/* Copyright (C) 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+long int
+__lrint (double x)
+{
+  long int result;
+  asm ("fmove.l %1,%0" : "=dm" (result) : "f" (x));
+  return result;
+}
+weak_alias (__lrint, lrint)
+#ifdef NO_LONG_DOUBLE
+strong_alias (__lrint, __lrintl)
+weak_alias (__lrint, lrintl)
+#endif
diff -Naur glibc-ports-2.5/sysdeps/m68k/coldfire/fpu/s_lrintf.c glibc-ports-2.5-cs/sysdeps/m68k/coldfire/fpu/s_lrintf.c
--- glibc-ports-2.5/sysdeps/m68k/coldfire/fpu/s_lrintf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/coldfire/fpu/s_lrintf.c	2007-03-27 15:01:19.000000000 +0200
@@ -0,0 +1,26 @@
+/* Copyright (C) 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+long int
+__lrintf (float x)
+{
+  long int result;
+  asm ("fmove.l %1,%0" : "=dm" (result) : "f" (x));
+  return result;
+}
+weak_alias (__lrintf, lrintf)
diff -Naur glibc-ports-2.5/sysdeps/m68k/coldfire/fpu/s_rint.c glibc-ports-2.5-cs/sysdeps/m68k/coldfire/fpu/s_rint.c
--- glibc-ports-2.5/sysdeps/m68k/coldfire/fpu/s_rint.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/coldfire/fpu/s_rint.c	2007-03-27 15:01:19.000000000 +0200
@@ -0,0 +1,29 @@
+/* Copyright (C) 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+double
+__rint (double x)
+{
+  asm ("fint.d %1,%0" : "=f" (x) : "fm" (x));
+  return x;
+}
+weak_alias (__rint, rint)
+#ifdef NO_LONG_DOUBLE
+strong_alias (__rint, __rintl)
+weak_alias (__rint, rintl)
+#endif
diff -Naur glibc-ports-2.5/sysdeps/m68k/coldfire/fpu/s_rintf.c glibc-ports-2.5-cs/sysdeps/m68k/coldfire/fpu/s_rintf.c
--- glibc-ports-2.5/sysdeps/m68k/coldfire/fpu/s_rintf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/coldfire/fpu/s_rintf.c	2007-03-27 15:01:19.000000000 +0200
@@ -0,0 +1,26 @@
+/* Copyright (C) 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+float
+__rintf (float x)
+{
+  double result;
+  asm ("fint.s %1,%0" : "=f" (result) : "dm" (x));
+  return (float) result;
+}
+weak_alias (__rintf, rintf)
diff -Naur glibc-ports-2.5/sysdeps/m68k/coldfire/shlib-versions glibc-ports-2.5-cs/sysdeps/m68k/coldfire/shlib-versions
--- glibc-ports-2.5/sysdeps/m68k/coldfire/shlib-versions	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/coldfire/shlib-versions	2007-03-27 15:01:20.000000000 +0200
@@ -0,0 +1 @@
+m68k-.*-linux.*         DEFAULT                 GLIBC_2.4
diff -Naur glibc-ports-2.5/sysdeps/m68k/dl-machine.h glibc-ports-2.5-cs/sysdeps/m68k/dl-machine.h
--- glibc-ports-2.5/sysdeps/m68k/dl-machine.h	2005-02-08 21:02:24.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/dl-machine.h	2007-03-27 15:01:23.000000000 +0200
@@ -23,6 +23,7 @@
 #define ELF_MACHINE_NAME "m68k"
 
 #include <sys/param.h>
+#include <sysdep.h>
 
 /* Return nonzero iff ELF header is compatible with the running host.  */
 static inline int
@@ -48,7 +49,7 @@
 elf_machine_load_address (void)
 {
   Elf32_Addr addr;
-  asm ("lea _dl_start(%%pc), %0\n\t"
+  asm (PCREL_OP ("lea", "_dl_start", "%0", "%0", "%%pc") "\n\t"
        "sub.l _dl_start@GOT.w(%%a5), %0"
        : "=a" (addr));
   return addr;
@@ -130,7 +131,7 @@
 	move.l %d0, %a4\n\
 	| See if we were run as a command with the executable file\n\
 	| name as an extra leading argument.\n\
-	move.l _dl_skip_args(%pc), %d0\n\
+	" PCREL_OP ("move.l", "_dl_skip_args", "%d0", "%d0", "%pc") "\n\
 	| Pop the original argument count\n\
 	move.l (%sp)+, %d1\n\
 	| Subtract _dl_skip_args from it.\n\
@@ -143,12 +144,12 @@
 	pea 8(%sp, %d1*4)\n\
 	pea 8(%sp)\n\
 	move.l %d1, -(%sp)\n\
-	move.l _rtld_local(%pc), -(%sp)\n\
+	" PCREL_OP ("move.l", "_rtld_local", "-(%sp)", "%d0", "%pc") "\n\
 	jbsr _dl_init_internal@PLTPC\n\
 	addq.l #8, %sp\n\
 	addq.l #8, %sp\n\
 	| Pass our finalizer function to the user in %a1.\n\
-	lea _dl_fini(%pc), %a1\n\
+	" PCREL_OP ("lea", "_dl_fini", "%a1", "%a1", "%pc") "\n\
 	| Initialize %fp with the stack pointer.\n\
 	move.l %sp, %fp\n\
 	| Jump to the user's entry point.\n\
diff -Naur glibc-ports-2.5/sysdeps/m68k/dl-trampoline.S glibc-ports-2.5-cs/sysdeps/m68k/dl-trampoline.S
--- glibc-ports-2.5/sysdeps/m68k/dl-trampoline.S	2005-01-16 03:07:28.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/dl-trampoline.S	2007-03-27 15:01:23.000000000 +0200
@@ -34,7 +34,12 @@
 	| Pop parameters
 	addq.l #8, %sp
 	| Call real function.
+#ifdef __mcoldfire__
+	move.l %d0,-(%sp)
+	rts
+#else
 	jmp (%d0)
+#endif
 	.size _dl_runtime_resolve, . - _dl_runtime_resolve
 
 	.text
@@ -64,7 +69,12 @@
 	move.l (%sp)+, %a1
 	lea 12(%sp), %sp
 	| Call real function.
+#ifdef __mcoldfire__
+	move.l %d0,-(%sp)
+	rts
+#else
 	jmp (%d0)
+#endif
 
 	/*
 	    +24     return address
@@ -79,15 +89,24 @@
 	move.l %sp, %a2
 	move.l %sp, %a0
 	lea 28(%sp), %a1
-	| Round framesize up to even
-	addq.l #1, %d1
-	lsr #1, %d1
-	sub.l %d1, %a0
+	| Round framesize up to longword alignment
+	addq.l #3, %d1
+	and.l #-3, %d1
 	sub.l %d1, %a0
 	move.l %a0, %sp
+#ifdef __mcoldfire__
+	tst.l %d1
+	beq 2f
+1:	move.l (%a0)+, (%a1)+
+	subq.l #4,%d1
+	bne 1b
+2:
+#else
+	lsr.l #2,%d1
 	jra 2f
-1:	move.w (%a1)+, (%a0)+
+1:	move.l (%a1)+, (%a0)+
 2:	dbra %d1,1b
+#endif
 	/*
 	   %a2+24  return address
 	   %a2+20  PLT1
@@ -101,7 +120,14 @@
 
 	move.l 4(%a2), %a0
 	move.l 8(%a2), %a1
+#ifdef __mcoldfire__
+	pea 2f(%pc)
+	move.l %d0,-(%sp)
+	rts
+2:
+#else
 	jsr (%d0)
+#endif
 	move.l %a2, %sp
 	move.l (%sp)+, %a2
 	/*
@@ -112,18 +138,40 @@
 	    +4      %a1
 	   %sp      %a0
 	*/
+#if !defined (__mcoldfire__)
 	fmove.x %fp0, -(%sp)
+#elif defined (__mcffpu__)
+	fmove.l %fp0, -(%sp)
+#else
+	clr.l -(%sp)
+	clr.l -(%sp)
+#endif
+	move.l %a0, -(%sp)
 	move.l %d1, -(%sp)
 	move.l %d0, -(%sp)
 	pea (%sp)
-	pea 20(%sp)
+#ifdef __mcoldfire__
+	pea 24(%sp)
 	move.l 40(%sp), -(%sp)
 	move.l 40(%sp), -(%sp)
+#else
+	pea 28(%sp)
+	move.l 44(%sp), -(%sp)
+	move.l 44(%sp), -(%sp)
+#endif
 	jbsr _dl_call_pltexit
 	lea 16(%sp), %sp
 	move.l (%sp)+, %d0
 	move.l (%sp)+, %d1
+	move.l (%sp)+, %a0
+#if !defined (__mcoldfire__)
 	fmove.x (%sp)+, %fp0
 	lea 20(%sp), %sp
+#elif defined (__mcffpu__)
+	fmove.l (%sp)+, %fp0
+	lea 20(%sp), %sp
+#else
+	lea 28(%sp), %sp
+#endif
 	rts
 	.size _dl_runtime_profile, . - _dl_runtime_profile
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/bits/mathinline.h glibc-ports-2.5-cs/sysdeps/m68k/fpu/bits/mathinline.h
--- glibc-ports-2.5/sysdeps/m68k/fpu/bits/mathinline.h	2004-10-09 23:18:03.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/bits/mathinline.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,445 +0,0 @@
-/* Definitions of inline math functions implemented by the m68881/2.
-   Copyright (C) 1991,92,93,94,96,97,98,99,2000,2002, 2003, 2004
-     Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#ifdef	__GNUC__
-
-#ifdef __USE_ISOC99
-/* GCC 3.1 and up have builtins that actually can be used.  */
-# if !__GNUC_PREREQ (3,1)
-/* ISO C99 defines some macros to perform unordered comparisons.  The
-   m68k FPU supports this with special opcodes and we should use them.
-   These must not be inline functions since we have to be able to handle
-   all floating-point types.  */
-#  undef isgreater
-#  undef isgreaterequal
-#  undef isless
-#  undef islessequal
-#  undef islessgreater
-#  undef isunordered
-#  define isgreater(x, y)					\
-   __extension__					\
-   ({ char __result;					\
-      __asm__ ("fcmp%.x %2,%1; fsogt %0"		\
-	       : "=dm" (__result) : "f" (x), "f" (y));	\
-      __result != 0; })
-
-#  define isgreaterequal(x, y)				\
-   __extension__					\
-   ({ char __result;					\
-      __asm__ ("fcmp%.x %2,%1; fsoge %0"		\
-	       : "=dm" (__result) : "f" (x), "f" (y));	\
-      __result != 0; })
-
-#  define isless(x, y)					\
-   __extension__					\
-   ({ char __result;					\
-      __asm__ ("fcmp%.x %2,%1; fsolt %0"		\
-	       : "=dm" (__result) : "f" (x), "f" (y));	\
-      __result != 0; })
-
-#  define islessequal(x, y)				\
-   __extension__					\
-   ({ char __result;					\
-      __asm__ ("fcmp%.x %2,%1; fsole %0"		\
-	       : "=dm" (__result) : "f" (x), "f" (y));	\
-      __result != 0; })
-
-#  define islessgreater(x, y)				\
-   __extension__					\
-   ({ char __result;					\
-      __asm__ ("fcmp%.x %2,%1; fsogl %0"		\
-	       : "=dm" (__result) : "f" (x), "f" (y));	\
-      __result != 0; })
-
-#  define isunordered(x, y)				\
-   __extension__					\
-   ({ char __result;					\
-      __asm__ ("fcmp%.x %2,%1; fsun %0"			\
-	       : "=dm" (__result) : "f" (x), "f" (y));	\
-      __result != 0; })
-# endif /* GCC 3.1 */
-#endif
-
-
-#if (!defined __NO_MATH_INLINES && defined __OPTIMIZE__) \
-    || defined __LIBC_INTERNAL_MATH_INLINES
-
-#ifdef	__LIBC_INTERNAL_MATH_INLINES
-/* This is used when defining the functions themselves.  Define them with
-   __ names, and with `static inline' instead of `extern inline' so the
-   bodies will always be used, never an external function call.  */
-# define __m81_u(x)		__CONCAT(__,x)
-# define __m81_inline		static __inline
-#else
-# define __m81_u(x)		x
-# ifdef __cplusplus
-#  define __m81_inline		__inline
-# else
-#  define __m81_inline		extern __inline
-# endif
-# define __M81_MATH_INLINES	1
-#endif
-
-/* Define a const math function.  */
-#define __m81_defun(rettype, func, args)				      \
-  __m81_inline rettype __attribute__((__const__))			      \
-  __m81_u(func) args
-
-/* Define the three variants of a math function that has a direct
-   implementation in the m68k fpu.  FUNC is the name for C (which will be
-   suffixed with f and l for the float and long double version, resp).  OP
-   is the name of the fpu operation (without leading f).  */
-
-#if defined __USE_MISC || defined __USE_ISOC99
-# define __inline_mathop(func, op)			\
-  __inline_mathop1(double, func, op)			\
-  __inline_mathop1(float, __CONCAT(func,f), op)	\
-  __inline_mathop1(long double, __CONCAT(func,l), op)
-#else
-# define __inline_mathop(func, op)			\
-  __inline_mathop1(double, func, op)
-#endif
-
-#define __inline_mathop1(float_type,func, op)				      \
-  __m81_defun (float_type, func, (float_type __mathop_x))		      \
-  {									      \
-    float_type __result;						      \
-    __asm("f" __STRING(op) "%.x %1, %0" : "=f" (__result) : "f" (__mathop_x));\
-    return __result;							      \
-  }
-
-__inline_mathop(__atan, atan)
-__inline_mathop(__cos, cos)
-__inline_mathop(__sin, sin)
-__inline_mathop(__tan, tan)
-__inline_mathop(__tanh, tanh)
-__inline_mathop(__fabs, abs)
-
-#if defined __USE_MISC || defined __USE_XOPEN_EXTENDED || defined __USE_ISOC99
-__inline_mathop(__rint, int)
-__inline_mathop(__expm1, etoxm1)
-__inline_mathop(__log1p, lognp1)
-#endif
-
-#ifdef __USE_MISC
-__inline_mathop(__significand, getman)
-#endif
-
-#ifdef __USE_ISOC99
-__inline_mathop(__trunc, intrz)
-#endif
-
-#if !defined __NO_MATH_INLINES && defined __OPTIMIZE__
-
-__inline_mathop(atan, atan)
-__inline_mathop(cos, cos)
-__inline_mathop(sin, sin)
-__inline_mathop(tan, tan)
-__inline_mathop(tanh, tanh)
-
-# if defined __USE_MISC || defined __USE_XOPEN_EXTENDED || defined __USE_ISOC99
-__inline_mathop(rint, int)
-__inline_mathop(expm1, etoxm1)
-__inline_mathop(log1p, lognp1)
-# endif
-
-# ifdef __USE_MISC
-__inline_mathop(significand, getman)
-# endif
-
-# ifdef __USE_ISOC99
-__inline_mathop(trunc, intrz)
-# endif
-
-#endif /* !__NO_MATH_INLINES && __OPTIMIZE__ */
-
-/* This macro contains the definition for the rest of the inline
-   functions, using FLOAT_TYPE as the domain type and S as the suffix
-   for the function names.  */
-
-#define __inline_functions(float_type, s)				  \
-__m81_defun (float_type, __CONCAT(__floor,s), (float_type __x))	  \
-{									  \
-  float_type __result;							  \
-  unsigned long int __ctrl_reg;						  \
-  __asm __volatile__ ("fmove%.l %!, %0" : "=dm" (__ctrl_reg));		  \
-  /* Set rounding towards negative infinity.  */			  \
-  __asm __volatile__ ("fmove%.l %0, %!" : /* No outputs.  */		  \
-		      : "dmi" ((__ctrl_reg & ~0x10) | 0x20));		  \
-  /* Convert X to an integer, using -Inf rounding.  */			  \
-  __asm __volatile__ ("fint%.x %1, %0" : "=f" (__result) : "f" (__x));	  \
-  /* Restore the previous rounding mode.  */				  \
-  __asm __volatile__ ("fmove%.l %0, %!" : /* No outputs.  */		  \
-		      : "dmi" (__ctrl_reg));				  \
-  return __result;							  \
-}									  \
-									  \
-__m81_defun (float_type, __CONCAT(__ceil,s), (float_type __x))	  	  \
-{									  \
-  float_type __result;							  \
-  unsigned long int __ctrl_reg;						  \
-  __asm __volatile__ ("fmove%.l %!, %0" : "=dm" (__ctrl_reg));		  \
-  /* Set rounding towards positive infinity.  */			  \
-  __asm __volatile__ ("fmove%.l %0, %!" : /* No outputs.  */		  \
-		      : "dmi" (__ctrl_reg | 0x30));			  \
-  /* Convert X to an integer, using +Inf rounding.  */			  \
-  __asm __volatile__ ("fint%.x %1, %0" : "=f" (__result) : "f" (__x));	  \
-  /* Restore the previous rounding mode.  */				  \
-  __asm __volatile__ ("fmove%.l %0, %!" : /* No outputs.  */		  \
-		      : "dmi" (__ctrl_reg));				  \
-  return __result;							  \
-}
-
-__inline_functions(double,)
-#if defined __USE_MISC || defined __USE_ISOC99
-__inline_functions(float,f)
-__inline_functions(long double,l)
-#endif
-#undef __inline_functions
-
-#ifdef __USE_MISC
-
-# define __inline_functions(float_type, s)				  \
-__m81_defun (int, __CONCAT(__isinf,s), (float_type __value))	  	  \
-{									  \
-  /* There is no branch-condition for infinity,				  \
-     so we must extract and examine the condition codes manually.  */	  \
-  unsigned long int __fpsr;						  \
-  __asm("ftst%.x %1\n"							  \
-	"fmove%.l %/fpsr, %0" : "=dm" (__fpsr) : "f" (__value));	  \
-  return (__fpsr & (2 << 24)) ? (__fpsr & (8 << 24) ? -1 : 1) : 0;	  \
-}									  \
-									  \
-__m81_defun (int, __CONCAT(__finite,s), (float_type __value))	  	  \
-{									  \
-  /* There is no branch-condition for infinity, so we must extract and	  \
-     examine the condition codes manually.  */				  \
-  unsigned long int __fpsr;						  \
-  __asm ("ftst%.x %1\n"							  \
-	 "fmove%.l %/fpsr, %0" : "=dm" (__fpsr) : "f" (__value));	  \
-  return (__fpsr & (3 << 24)) == 0;					  \
-}									  \
-									  \
-__m81_defun (float_type, __CONCAT(__scalbn,s),				  \
-	     (float_type __x, int __n))					  \
-{									  \
-  float_type __result;							  \
-  __asm ("fscale%.l %1, %0" : "=f" (__result) : "dmi" (__n), "0" (__x));  \
-  return __result;							  \
-}
-
-__inline_functions(double,)
-__inline_functions(float,f)
-__inline_functions(long double,l)
-# undef __inline_functions
-
-#endif /* Use misc.  */
-
-#if defined __USE_MISC || defined __USE_XOPEN
-
-# define __inline_functions(float_type, s)				  \
-__m81_defun (int, __CONCAT(__isnan,s), (float_type __value))	  	  \
-{									  \
-  char __result;							  \
-  __asm("ftst%.x %1\n"							  \
-	"fsun %0" : "=dm" (__result) : "f" (__value));			  \
-  return __result;							  \
-}
-
-__inline_functions(double,)
-# ifdef __USE_MISC
-__inline_functions(float,f)
-__inline_functions(long double,l)
-# endif
-# undef __inline_functions
-
-#endif
-
-#ifdef __USE_ISOC99
-
-# define __inline_functions(float_type, s)				  \
-__m81_defun (int, __CONCAT(__signbit,s), (float_type __value))	  	  \
-{									  \
-  /* There is no branch-condition for the sign bit, so we must extract	  \
-     and examine the condition codes manually.  */			  \
-  unsigned long int __fpsr;						  \
-  __asm ("ftst%.x %1\n"							  \
-	 "fmove%.l %/fpsr, %0" : "=dm" (__fpsr) : "f" (__value));	  \
-  return (__fpsr >> 27) & 1;						  \
-}									  \
-									  \
-  __m81_defun (float_type, __CONCAT(__scalbln,s),			  \
-	     (float_type __x, long int __n))				  \
-{									  \
-  return __CONCAT(__scalbn,s) (__x, __n);				  \
-}									  \
-									  \
-__m81_defun (float_type, __CONCAT(__nearbyint,s), (float_type __x))	  \
-{									  \
-  float_type __result;							  \
-  unsigned long int __ctrl_reg;						  \
-  __asm __volatile__ ("fmove%.l %!, %0" : "=dm" (__ctrl_reg));		  \
-  /* Temporarily disable the inexact exception.  */			  \
-  __asm __volatile__ ("fmove%.l %0, %!" : /* No outputs.  */		  \
-		      : "dmi" (__ctrl_reg & ~0x200));			  \
-  __asm __volatile__ ("fint%.x %1, %0" : "=f" (__result) : "f" (__x));	  \
-  __asm __volatile__ ("fmove%.l %0, %!" : /* No outputs.  */		  \
-		      : "dmi" (__ctrl_reg));				  \
-  return __result;							  \
-}									  \
-									  \
-__m81_defun (long int, __CONCAT(__lrint,s), (float_type __x))		  \
-{									  \
-  long int __result;							  \
-  __asm ("fmove%.l %1, %0" : "=dm" (__result) : "f" (__x));		  \
-  return __result;							  \
-}									  \
-									  \
-__m81_inline float_type							  \
-__m81_u(__CONCAT(__fma,s))(float_type __x, float_type __y,		  \
-			   float_type __z)				  \
-{									  \
-  return (__x * __y) + __z;						  \
-}
-
-__inline_functions (double,)
-__inline_functions (float,f)
-__inline_functions (long double,l)
-# undef __inline_functions
-
-#endif /* Use ISO C9x */
-
-#ifdef __USE_GNU
-
-# define __inline_functions(float_type, s)				\
-__m81_inline void							\
-__m81_u(__CONCAT(__sincos,s))(float_type __x, float_type *__sinx,	\
-			      float_type *__cosx)			\
-{									\
-  __asm ("fsincos%.x %2,%1:%0"						\
-	 : "=f" (*__sinx), "=f" (*__cosx) : "f" (__x));			\
-}
-
-__inline_functions (double,)
-__inline_functions (float,f)
-__inline_functions (long double,l)
-# undef __inline_functions
-
-#endif
-
-#if !defined __NO_MATH_INLINES && defined __OPTIMIZE__
-
-/* Define inline versions of the user visible functions.  */
-
-/* Note that there must be no whitespace before the argument passed for
-   NAME, to make token pasting work correctly with -traditional.  */
-# define __inline_forward_c(rettype, name, args1, args2)	\
-extern __inline rettype __attribute__((__const__))		\
-  name args1							\
-{								\
-  return __CONCAT(__,name) args2;				\
-}
-
-# define __inline_forward(rettype, name, args1, args2)	\
-extern __inline rettype name args1			\
-{							\
-  return __CONCAT(__,name) args2;			\
-}
-
-__inline_forward_c(double,floor, (double __x), (__x))
-__inline_forward_c(double,ceil, (double __x), (__x))
-# ifdef __USE_MISC
-#  ifndef __USE_ISOC99 /* Conflict with macro of same name.  */
-__inline_forward_c(int,isinf, (double __value), (__value))
-#  endif
-__inline_forward_c(int,finite, (double __value), (__value))
-__inline_forward_c(double,scalbn, (double __x, int __n), (__x, __n))
-# endif
-# if defined __USE_MISC || defined __USE_XOPEN
-#  ifndef __USE_ISOC99 /* Conflict with macro of same name.  */
-__inline_forward_c(int,isnan, (double __value), (__value))
-#  endif
-# endif
-# ifdef __USE_ISOC99
-__inline_forward_c(double,scalbln, (double __x, long int __n), (__x, __n))
-__inline_forward_c(double,nearbyint, (double __value), (__value))
-__inline_forward_c(long int,lrint, (double __value), (__value))
-__inline_forward_c(double,fma, (double __x, double __y, double __z),
-		   (__x, __y, __z))
-# endif
-# ifdef __USE_GNU
-__inline_forward(void,sincos, (double __x, double *__sinx, double *__cosx),
-		 (__x, __sinx, __cosx))
-# endif
-
-# if defined __USE_MISC || defined __USE_ISOC99
-
-__inline_forward_c(float,floorf, (float __x), (__x))
-__inline_forward_c(float,ceilf, (float __x), (__x))
-#  ifdef __USE_MISC
-__inline_forward_c(int,isinff, (float __value), (__value))
-__inline_forward_c(int,finitef, (float __value), (__value))
-__inline_forward_c(float,scalbnf, (float __x, int __n), (__x, __n))
-__inline_forward_c(int,isnanf, (float __value), (__value))
-#  endif
-# ifdef __USE_ISOC99
-__inline_forward_c(float,scalblnf, (float __x, long int __n), (__x, __n))
-__inline_forward_c(float,nearbyintf, (float __value), (__value))
-__inline_forward_c(long int,lrintf, (float __value), (__value))
-__inline_forward_c(float,fmaf, (float __x, float __y, float __z),
-		   (__x, __y, __z))
-# endif
-# ifdef __USE_GNU
-__inline_forward(void,sincosf, (float __x, float *__sinx, float *__cosx),
-		 (__x, __sinx, __cosx))
-# endif
-
-__inline_forward_c(long double,floorl, (long double __x), (__x))
-__inline_forward_c(long double,ceill, (long double __x), (__x))
-# ifdef __USE_MISC
-__inline_forward_c(int,isinfl, (long double __value), (__value))
-__inline_forward_c(int,finitel, (long double __value), (__value))
-__inline_forward_c(long double,scalbnl, (long double __x, int __n), (__x, __n))
-__inline_forward_c(int,isnanl, (long double __value), (__value))
-# endif
-# ifdef __USE_ISOC99
-__inline_forward_c(long double,scalblnl, (long double __x, long int __n),
-		   (__x, __n))
-__inline_forward_c(long double,nearbyintl, (long double __value), (__value))
-__inline_forward_c(long int,lrintl, (long double __value), (__value))
-__inline_forward_c(long double,fmal,
-		   (long double __x, long double __y, long double __z),
-		   (__x, __y, __z))
-# endif
-# ifdef __USE_GNU
-__inline_forward(void,sincosl,
-		 (long double __x, long double *__sinx, long double *__cosx),
-		 (__x, __sinx, __cosx))
-# endif
-
-#endif /* Use misc or ISO C99 */
-
-#undef __inline_forward
-#undef __inline_forward_c
-
-#endif /* !__NO_MATH_INLINES && __OPTIMIZE__ */
-
-#endif
-#endif	/* GCC.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/branred.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/branred.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/branred.c	2001-03-12 00:25:54.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/branred.c	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/doasin.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/doasin.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/doasin.c	2001-03-12 00:25:54.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/doasin.c	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/dosincos.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/dosincos.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/dosincos.c	2001-03-12 00:25:54.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/dosincos.c	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_acos.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_acos.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_acos.c	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_acos.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,35 +0,0 @@
-/* Copyright (C) 1996, 1997, 1999 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <math.h>
-#include "math_private.h"
-#include "mathimpl.h"
-
-#ifndef	FUNC
-#define	FUNC	__ieee754_acos
-#endif
-#ifndef float_type
-#define float_type double
-#endif
-
-float_type
-FUNC (x)
-     float_type x;
-{
-  return __m81_u(FUNC)(x);
-}
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_acosf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_acosf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_acosf.c	1996-06-06 07:20:47.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_acosf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,5 +0,0 @@
-#ifndef	FUNC
-#define	FUNC	__ieee754_acosf
-#endif
-#define float_type float
-#include <e_acos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_acosl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_acosl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_acosl.c	1996-06-10 11:23:00.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_acosl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,5 +0,0 @@
-#ifndef FUNC
-#define FUNC __ieee754_acosl
-#endif
-#define float_type long double
-#include <e_acos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_asin.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_asin.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_asin.c	1996-03-16 22:32:24.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_asin.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	__ieee754_asin
-#include <e_acos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_asinf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_asinf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_asinf.c	1996-03-16 22:32:01.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_asinf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	__ieee754_asinf
-#include <e_acosf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_asinl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_asinl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_asinl.c	1996-06-06 07:22:26.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_asinl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC __ieee754_asinl
-#include <e_acosl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_atan2.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_atan2.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_atan2.c	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_atan2.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,104 +0,0 @@
-/* Copyright (C) 1997, 1999 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <math.h>
-#include "math_private.h"
-#include "mathimpl.h"
-
-#ifndef SUFF
-#define SUFF
-#endif
-#ifndef float_type
-#define float_type double
-#endif
-
-#define CONCATX(a,b) __CONCAT(a,b)
-#define s(name) CONCATX(name,SUFF)
-#define m81(func) __m81_u(s(func))
-
-float_type
-s(__ieee754_atan2) (float_type y, float_type x)
-{
-  float_type pi, pi_2, z;
-  unsigned long y_cond, x_cond;
-
-  __asm ("fmovecr%.x %#0, %0" : "=f" (pi));
-  __asm ("fscale%.w %#-1, %0" : "=f" (pi_2) : "0" (pi));
-  y_cond = __m81_test (y);
-  x_cond = __m81_test (x);
-
-  if ((x_cond | y_cond) & __M81_COND_NAN)
-    z = x + y;
-  else if (y_cond & __M81_COND_ZERO)
-    {
-      if (x_cond & __M81_COND_NEG)
-	z = y_cond & __M81_COND_NEG ? -pi : pi;
-      else
-	z = y;
-    }
-  else if (x_cond & __M81_COND_INF)
-    {
-      if (y_cond & __M81_COND_INF)
-	{
-	  float_type pi_4;
-	  __asm ("fscale%.w %#-2, %0" : "=f" (pi_4) : "0" (pi));
-	  z = x_cond & __M81_COND_NEG ? 3 * pi_4 : pi_4;
-	}
-      else
-	z = x_cond & __M81_COND_NEG ? pi : 0;
-      if (y_cond & __M81_COND_NEG)
-	z = -z;
-    }
-  else if (y_cond & __M81_COND_INF)
-    z = y_cond & __M81_COND_NEG ? -pi_2 : pi_2;
-  else if (x_cond & __M81_COND_NEG)
-    {
-      if (y_cond & __M81_COND_NEG)
-	{
-	  if (-x > -y)
-	    z = -pi + m81(__atan) (y / x);
-	  else
-	    z = -pi_2 - m81(__atan) (x / y);
-	}
-      else
-	{
-	  if (-x > y)
-	    z = pi + m81(__atan) (y / x);
-	  else
-	    z = pi_2 - m81(__atan) (x / y);
-	}
-    }
-  else
-    {
-      if (y_cond & __M81_COND_NEG)
-	{
-	  if (x > -y)
-	    z = m81(__atan) (y / x);
-	  else
-	    z = -pi_2 - m81(__atan) (x / y);
-	}
-      else
-	{
-	  if (x > y)
-	    z = m81(__atan) (y / x);
-	  else
-	    z = pi_2 - m81(__atan) (x / y);
-	}
-    }
-  return z;
-}
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_atan2f.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_atan2f.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_atan2f.c	1997-03-25 02:30:54.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_atan2f.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define SUFF f
-#define float_type float
-#include <e_atan2.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_atan2l.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_atan2l.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_atan2l.c	1997-03-25 02:30:58.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_atan2l.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define SUFF l
-#define float_type long double
-#include <e_atan2.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_atanh.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_atanh.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_atanh.c	1996-03-16 22:32:36.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_atanh.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	__ieee754_atanh
-#include <e_acos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_atanhf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_atanhf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_atanhf.c	1996-03-16 22:32:35.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_atanhf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	__ieee754_atanhf
-#include <e_acosf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_atanhl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_atanhl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_atanhl.c	1996-06-07 23:00:19.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_atanhl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC __ieee754_atanhl
-#include <e_acosl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_cosh.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_cosh.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_cosh.c	1996-03-16 22:32:29.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_cosh.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	__ieee754_cosh
-#include <e_acos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_coshf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_coshf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_coshf.c	1996-03-16 22:31:57.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_coshf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	__ieee754_coshf
-#include <e_acosf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_coshl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_coshl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_coshl.c	1996-06-07 23:00:20.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_coshl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC __ieee754_coshl
-#include <e_acosl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_exp10.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_exp10.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_exp10.c	1998-06-10 07:27:40.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_exp10.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC __ieee754_exp10
-#include <e_acos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_exp10f.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_exp10f.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_exp10f.c	1998-06-10 07:27:40.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_exp10f.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC __ieee754_exp10f
-#include <e_acosf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_exp10l.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_exp10l.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_exp10l.c	1998-06-10 07:27:41.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_exp10l.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC __ieee754_exp10l
-#include <e_acosl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_exp2.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_exp2.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_exp2.c	2001-02-17 17:49:17.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_exp2.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC __ieee754_exp2
-#include <e_acos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_exp2f.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_exp2f.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_exp2f.c	2001-02-17 17:49:28.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_exp2f.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC __ieee754_exp2f
-#include <e_acosf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_exp2l.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_exp2l.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_exp2l.c	2001-02-17 17:49:41.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_exp2l.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC __ieee754_exp2l
-#include <e_acosl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_exp.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_exp.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_exp.c	1996-03-16 22:31:47.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_exp.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	__ieee754_exp
-#include <e_acos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_expf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_expf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_expf.c	1996-03-16 22:31:06.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_expf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	__ieee754_expf
-#include <e_acosf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_expl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_expl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_expl.c	1996-06-06 07:22:06.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_expl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC __ieee754_expl
-#include <e_acosl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_fmod.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_fmod.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_fmod.c	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_fmod.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,36 +0,0 @@
-/* Copyright (C) 1996, 1997, 1999 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <math.h>
-#include "math_private.h"
-#include "mathimpl.h"
-
-#ifndef FUNC
-#define FUNC __ieee754_fmod
-#endif
-#ifndef float_type
-#define float_type double
-#endif
-
-float_type
-FUNC (x, y)
-     float_type x;
-     float_type y;
-{
-  return __m81_u(FUNC)(x, y);
-}
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_fmodf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_fmodf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_fmodf.c	1996-06-06 07:20:45.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_fmodf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,5 +0,0 @@
-#ifndef FUNC
-#define FUNC __ieee754_fmodf
-#endif
-#define float_type float
-#include <e_fmod.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_fmodl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_fmodl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_fmodl.c	1996-06-06 07:22:00.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_fmodl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,5 +0,0 @@
-#ifndef FUNC
-#define FUNC __ieee754_fmodl
-#endif
-#define float_type long double
-#include <e_fmod.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_log10.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_log10.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_log10.c	1996-03-16 22:31:56.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_log10.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	__ieee754_log10
-#include <e_acos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_log10f.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_log10f.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_log10f.c	1996-03-16 22:31:55.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_log10f.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	__ieee754_log10f
-#include <e_acosf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_log10l.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_log10l.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_log10l.c	1996-06-06 07:22:22.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_log10l.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC __ieee754_log10l
-#include <e_acosl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_log2.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_log2.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_log2.c	2001-06-06 14:54:31.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_log2.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC    __ieee754_log2
-#include <e_acos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_log2f.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_log2f.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_log2f.c	2001-06-14 16:17:39.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_log2f.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC    __ieee754_log2f
-#include <e_acosf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_log2l.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_log2l.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_log2l.c	2001-06-14 16:17:49.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_log2l.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC    __ieee754_log2l
-#include <e_acosl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_log.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_log.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_log.c	1996-03-16 22:32:28.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_log.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	__ieee754_log
-#include <e_acos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_logf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_logf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_logf.c	1996-03-16 22:31:54.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_logf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	__ieee754_logf
-#include <e_acosf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_logl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_logl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_logl.c	1996-06-06 07:22:21.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_logl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC __ieee754_logl
-#include <e_acosl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_pow.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_pow.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_pow.c	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_pow.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,126 +0,0 @@
-/* Copyright (C) 1997, 1999 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <math.h>
-#include "math_private.h"
-#include "mathimpl.h"
-
-#ifndef SUFF
-#define SUFF
-#endif
-#ifndef float_type
-#define float_type double
-#endif
-
-#define CONCATX(a,b) __CONCAT(a,b)
-#define s(name) CONCATX(name,SUFF)
-#define m81(func) __m81_u(s(func))
-
-float_type
-s(__ieee754_pow) (float_type x, float_type y)
-{
-  float_type z;
-  float_type ax;
-  unsigned long x_cond, y_cond;
-
-  y_cond = __m81_test (y);
-  if (y_cond & __M81_COND_ZERO)
-    return 1.0;
-  if (y_cond & __M81_COND_NAN)
-    return x == 1.0 ? x : x + y;
-
-  x_cond = __m81_test (x);
-  if (x_cond & __M81_COND_NAN)
-    return x + y;
-
-  if (y_cond & __M81_COND_INF)
-    {
-      ax = s(fabs) (x);
-      if (ax == 1.0)
-	return ax;
-      if (ax > 1.0)
-	return y_cond & __M81_COND_NEG ? 0 : y;
-      else
-	return y_cond & __M81_COND_NEG ? -y : 0;
-    }
-
-  if (s(fabs) (y) == 1.0)
-    return y_cond & __M81_COND_NEG ? 1 / x : x;
-
-  if (y == 2)
-    return x * x;
-  if (y == 0.5 && !(x_cond & __M81_COND_NEG))
-    return m81(__ieee754_sqrt) (x);
-
-  if (x == 10.0)
-    {
-      __asm ("ftentox%.x %1, %0" : "=f" (z) : "f" (y));
-      return z;
-    }
-  if (x == 2.0)
-    {
-      __asm ("ftwotox%.x %1, %0" : "=f" (z) : "f" (y));
-      return z;
-    }
-
-  ax = s(fabs) (x);
-  if (x_cond & (__M81_COND_INF | __M81_COND_ZERO) || ax == 1.0)
-    {
-      z = ax;
-      if (y_cond & __M81_COND_NEG)
-	z = 1 / z;
-      if (x_cond & __M81_COND_NEG)
-	{
-	  if (y != m81(__rint) (y))
-	    {
-	      if (x == -1)
-		z = (z - z) / (z - z);
-	    }
-	  else
-	    goto maybe_negate;
-	}
-      return z;
-    }
-
-  if (x_cond & __M81_COND_NEG)
-    {
-      if (y == m81(__rint) (y))
-	{
-	  z = m81(__ieee754_exp) (y * m81(__ieee754_log) (-x));
-	maybe_negate:
-	  /* We always use the long double format, since y is already in
-	     this format and rounding won't change the result.  */
-	  {
-	    int32_t exponent;
-	    u_int32_t i0, i1;
-	    GET_LDOUBLE_WORDS (exponent, i0, i1, y);
-	    exponent = (exponent & 0x7fff) - 0x3fff;
-	    if (exponent <= 31
-		? i0 & (1 << (31 - exponent))
-		: (exponent <= 63
-		   && i1 & (1 << (63 - exponent))))
-	      z = -z;
-	  }
-	}
-      else
-	z = (y - y) / (y - y);
-    }
-  else
-    z = m81(__ieee754_exp) (y * m81(__ieee754_log) (x));
-  return z;
-}
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_powf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_powf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_powf.c	1997-03-25 02:31:04.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_powf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define SUFF f
-#define float_type float
-#include <e_pow.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_powl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_powl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_powl.c	1997-03-25 02:31:06.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_powl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define SUFF l
-#define float_type long double
-#include <e_pow.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_remainder.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_remainder.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_remainder.c	1996-03-16 22:31:27.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_remainder.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC __ieee754_remainder
-#include <e_fmod.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_remainderf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_remainderf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_remainderf.c	1996-03-16 22:32:32.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_remainderf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC __ieee754_remainderf
-#include <e_fmodf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_remainderl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_remainderl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_remainderl.c	1996-06-06 07:21:59.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_remainderl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC __ieee754_remainderl
-#include <e_fmodl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_rem_pio2.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_rem_pio2.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_rem_pio2.c	1997-08-10 19:34:45.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_rem_pio2.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-/* Empty.  This file is only meant to avoid compiling the file with the
-   same name in the libm-ieee754 directory.  The code is not used since
-   there is an assembler version for all users of this file.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_rem_pio2f.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_rem_pio2f.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_rem_pio2f.c	1997-08-10 19:34:45.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_rem_pio2f.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-/* Empty.  This file is only meant to avoid compiling the file with the
-   same name in the libm-ieee754 directory.  The code is not used since
-   there is an assembler version for all users of this file.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_rem_pio2l.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_rem_pio2l.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_rem_pio2l.c	1997-08-10 19:34:46.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_rem_pio2l.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-/* Empty.  This file is only meant to avoid compiling the file with the
-   same name in the libm-ieee754 directory.  The code is not used since
-   there is an assembler version for all users of this file.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_scalb.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_scalb.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_scalb.c	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_scalb.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,60 +0,0 @@
-/* Copyright (C) 1997, 1999 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Andreas Schwab <schwab@issan.informatik.uni-dortmund.de>.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <math.h>
-#include "math_private.h"
-#include "mathimpl.h"
-
-#ifndef SUFF
-#define SUFF
-#endif
-#ifndef float_type
-#define float_type double
-#endif
-
-#define CONCATX(a,b) __CONCAT(a,b)
-#define s(name) CONCATX(name,SUFF)
-#define m81(func) __m81_u(s(func))
-
-float_type
-s(__ieee754_scalb) (float_type x, float_type fn)
-{
-  float_type retval;
-  unsigned long x_cond = __m81_test (x);
-  unsigned long fn_cond = __m81_test (fn);
-
-  if ((x_cond | fn_cond) & __M81_COND_NAN)
-    return x * fn;
-
-  if (fn_cond & __M81_COND_INF)
-    {
-      if (!(fn_cond & __M81_COND_NEG))
-	return x * fn;
-      else if (x_cond & __M81_COND_ZERO)
-	return x;
-      else
-	return x / -fn;
-    }
-
-  if (m81(__rint) (fn) != fn)
-    return (x - x) / (x - x);
-
-  __asm ("fscale%.x %1, %0" : "=f" (retval) : "f" (fn), "0" (x));
-  return retval;
-}
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_scalbf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_scalbf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_scalbf.c	1997-06-23 23:44:21.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_scalbf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define SUFF f
-#define float_type float
-#include <e_scalb.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_scalbl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_scalbl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_scalbl.c	1997-06-23 23:44:21.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_scalbl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define SUFF l
-#define float_type long double
-#include <e_scalb.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_sinh.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_sinh.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_sinh.c	1996-03-16 22:31:53.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_sinh.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	__ieee754_sinh
-#include <e_acos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_sinhf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_sinhf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_sinhf.c	1996-03-16 22:31:05.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_sinhf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	__ieee754_sinhf
-#include <e_acosf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_sinhl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_sinhl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_sinhl.c	1996-06-06 07:22:05.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_sinhl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC __ieee754_sinhl
-#include <e_acosl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_sqrt.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_sqrt.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_sqrt.c	1996-03-16 22:31:40.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_sqrt.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	__ieee754_sqrt
-#include <e_acos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_sqrtf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_sqrtf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_sqrtf.c	1996-03-16 22:32:21.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_sqrtf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	__ieee754_sqrtf
-#include <e_acosf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/e_sqrtl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_sqrtl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/e_sqrtl.c	1996-06-06 07:21:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/e_sqrtl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC __ieee754_sqrtl
-#include <e_acosl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/fegetenv.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/fegetenv.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/fegetenv.c	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/fegetenv.c	2007-03-27 15:00:58.000000000 +0200
@@ -23,7 +23,13 @@
 int
 __fegetenv (fenv_t *envp)
 {
+#ifdef __mcoldfire__
+  __asm__ ("fmove%.l %/fpcr,%0" : "=dm" (envp->__control_register));
+  __asm__ ("fmove%.l %/fpsr,%0" : "=dm" (envp->__status_register));
+  __asm__ ("fmove%.l %/fpiar,%0" : "=dm" (envp->__instruction_address));
+#else
   __asm__ ("fmovem%.l %/fpcr/%/fpsr/%/fpiar,%0" : "=m" (*envp));
+#endif
 
   /* Success.  */
   return 0;
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/feholdexcpt.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/feholdexcpt.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/feholdexcpt.c	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/feholdexcpt.c	2007-03-27 15:00:58.000000000 +0200
@@ -26,7 +26,13 @@
   fexcept_t fpcr, fpsr;
 
   /* Store the environment.  */
+#ifdef __mcoldfire__
+  __asm__ ("fmove%.l %/fpcr,%0" : "=dm" (envp->__control_register));
+  __asm__ ("fmove%.l %/fpsr,%0" : "=dm" (envp->__status_register));
+  __asm__ ("fmove%.l %/fpiar,%0" : "=dm" (envp->__instruction_address));
+#else
   __asm__ ("fmovem%.l %/fpcr/%/fpsr/%/fpiar,%0" : "=m" (*envp));
+#endif
 
   /* Now clear all exceptions.  */
   fpsr = envp->__status_register & ~FE_ALL_EXCEPT;
@@ -37,3 +43,4 @@
 
   return 0;
 }
+libm_hidden_def (feholdexcept);
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/fesetenv.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/fesetenv.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/fesetenv.c	2002-09-10 03:26:36.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/fesetenv.c	2007-03-27 15:00:57.000000000 +0200
@@ -29,7 +29,13 @@
      values which we do not want to come from the saved environment.
      Therefore, we get the current environment and replace the values
      we want to use from the environment specified by the parameter.  */
+#ifdef __mcoldfire__
+  __asm__ ("fmove%.l %/fpcr,%0" : "=dm" (temp.__control_register));
+  __asm__ ("fmove%.l %/fpsr,%0" : "=dm" (temp.__status_register));
+  __asm__ ("fmove%.l %/fpiar,%0" : "=dm" (temp.__instruction_address));
+#else
   __asm__ ("fmovem%.l %/fpcr/%/fpsr/%/fpiar,%0" : "=m" (*&temp));
+#endif
 
   temp.__status_register &= ~FE_ALL_EXCEPT;
   temp.__control_register &= ~((FE_ALL_EXCEPT << 6) | FE_UPWARD);
@@ -44,7 +50,16 @@
       temp.__status_register |= envp->__status_register & FE_ALL_EXCEPT;
     }
 
+#ifdef __mcoldfire__
+  __asm__ __volatile__ ("fmove%.l %0,%/fpiar"
+			:: "dm" (temp.__instruction_address));
+  __asm__ __volatile__ ("fmove%.l %0,%/fpcr"
+			:: "dm" (temp.__control_register));
+  __asm__ __volatile__ ("fmove%.l %0,%/fpsr"
+			:: "dm" (temp.__status_register));
+#else
   __asm__ __volatile__ ("fmovem%.l %0,%/fpcr/%/fpsr/%/fpiar" : : "m" (*&temp));
+#endif
 
   /* Success.  */
   return 0;
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/fesetround.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/fesetround.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/fesetround.c	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/fesetround.c	2007-03-27 15:00:57.000000000 +0200
@@ -36,3 +36,4 @@
 
   return 0;
 }
+libm_hidden_def (fesetround);
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/fraiseexcpt.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/fraiseexcpt.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/fraiseexcpt.c	2002-09-10 03:26:36.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/fraiseexcpt.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,83 +0,0 @@
-/* Raise given exceptions.
-   Copyright (C) 1997,99,2000,01,02 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Andreas Schwab <schwab@issan.informatik.uni-dortmund.de>
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <fenv.h>
-#include <float.h>
-#include <math.h>
-
-int
-__feraiseexcept (int excepts)
-{
-  /* Raise exceptions represented by EXCEPTS.  But we must raise only one
-     signal at a time.  It is important that if the overflow/underflow
-     exception and the divide by zero exception are given at the same
-     time, the overflow/underflow exception follows the divide by zero
-     exception.  */
-
-  /* First: invalid exception.  */
-  if (excepts & FE_INVALID)
-    {
-      /* One example of a invalid operation is 0 * Infinity.  */
-      double d = HUGE_VAL;
-      __asm__ __volatile__ ("fmul%.s %#0r0,%0; fnop" : "=f" (d) : "0" (d));
-    }
-
-  /* Next: division by zero.  */
-  if (excepts & FE_DIVBYZERO)
-    {
-      double d = 1.0;
-      __asm__ __volatile__ ("fdiv%.s %#0r0,%0; fnop" : "=f" (d) : "0" (d));
-    }
-
-  /* Next: overflow.  */
-  if (excepts & FE_OVERFLOW)
-    {
-      long double d = LDBL_MAX;
-
-      __asm__ __volatile__ ("fmul%.x %0,%0; fnop" : "=f" (d) : "0" (d));
-    }
-
-  /* Next: underflow.  */
-  if (excepts & FE_UNDERFLOW)
-    {
-      long double d = -LDBL_MAX;
-
-      __asm__ __volatile__ ("fetox%.x %0; fnop" : "=f" (d) : "0" (d));
-    }
-
-  /* Last: inexact.  */
-  if (excepts & FE_INEXACT)
-    {
-      long double d = 1.0;
-      __asm__ __volatile__ ("fdiv%.s %#0r3,%0; fnop" : "=f" (d) : "0" (d));
-    }
-
-  /* Success.  */
-  return 0;
-}
-
-#include <shlib-compat.h>
-#if SHLIB_COMPAT (libm, GLIBC_2_1, GLIBC_2_2)
-strong_alias (__feraiseexcept, __old_feraiseexcept)
-compat_symbol (libm, __old_feraiseexcept, feraiseexcept, GLIBC_2_1);
-#endif
-
-libm_hidden_ver (__feraiseexcept, feraiseexcept)
-versioned_symbol (libm, __feraiseexcept, feraiseexcept, GLIBC_2_2);
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/halfulp.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/halfulp.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/halfulp.c	2001-03-12 00:25:54.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/halfulp.c	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/k_cos.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/k_cos.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/k_cos.c	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/k_cos.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,42 +0,0 @@
-/* Copyright (C) 1996, 1997 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <math.h>
-#include "math_private.h"
-
-#ifndef FUNC
-#define FUNC cos
-#endif
-#ifndef float_type
-#define float_type double
-#endif
-
-#define __CONCATX(a,b) __CONCAT(a,b)
-
-float_type
-__CONCATX(__kernel_,FUNC) (x, y)
-     float_type x;
-     float_type y;
-{
-  float_type sin_x, cos_x, sin_y, cos_y;
-  __asm__ __volatile__ ("fsincosx %2,%0:%1" : "=f" (cos_x), "=f" (sin_x)
-			: "f" (x));
-  __asm__ __volatile__ ("fsincosx %2,%0:%1" : "=f" (cos_y), "=f" (sin_y)
-			: "f" (y));
-  return cos_x * cos_y - sin_x * sin_y;
-}
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/k_cosf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/k_cosf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/k_cosf.c	1996-06-06 07:20:23.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/k_cosf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define FUNC cosf
-#define float_type float
-#include <k_cos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/k_cosl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/k_cosl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/k_cosl.c	1996-06-06 07:22:20.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/k_cosl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define FUNC cosl
-#define float_type long double
-#include <k_cos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/k_rem_pio2.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/k_rem_pio2.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/k_rem_pio2.c	1997-08-10 19:34:46.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/k_rem_pio2.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-/* Empty.  This file is only meant to avoid compiling the file with the
-   same name in the libm-ieee754 directory.  The code is not used since
-   there is an assembler version for all users of this file.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/k_rem_pio2f.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/k_rem_pio2f.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/k_rem_pio2f.c	1997-08-10 19:34:46.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/k_rem_pio2f.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-/* Empty.  This file is only meant to avoid compiling the file with the
-   same name in the libm-ieee754 directory.  The code is not used since
-   there is an assembler version for all users of this file.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/k_rem_pio2l.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/k_rem_pio2l.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/k_rem_pio2l.c	1997-08-10 19:34:46.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/k_rem_pio2l.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-/* Empty.  This file is only meant to avoid compiling the file with the
-   same name in the libm-ieee754 directory.  The code is not used since
-   there is an assembler version for all users of this file.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/k_sin.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/k_sin.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/k_sin.c	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/k_sin.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,45 +0,0 @@
-/* Copyright (C) 1996, 1997 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <math.h>
-#include "math_private.h"
-
-#ifndef FUNC
-#define FUNC sin
-#endif
-#ifndef float_type
-#define float_type double
-#endif
-
-#define __CONCATX(a,b) __CONCAT(a,b)
-
-float_type
-__CONCATX(__kernel_,FUNC) (x, y, iy)
-     float_type x;
-     float_type y;
-     int iy;
-{
-  float_type sin_x, cos_x, sin_y, cos_y;
-  if (iy == 0)
-    return __m81_u(__CONCATX(__,FUNC)) (x);
-  __asm__ __volatile__ ("fsincosx %2,%0:%1" : "=f" (cos_x), "=f" (sin_x)
-			: "f" (x));
-  __asm__ __volatile__ ("fsincosx %2,%0:%1" : "=f" (cos_y), "=f" (sin_y)
-			: "f" (y));
-  return sin_x * cos_y + cos_x * sin_y;
-}
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/k_sinf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/k_sinf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/k_sinf.c	1996-06-06 07:20:20.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/k_sinf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define FUNC sinf
-#define float_type float
-#include <k_sin.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/k_sinl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/k_sinl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/k_sinl.c	1996-06-06 07:22:10.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/k_sinl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define FUNC sinl
-#define float_type long double
-#include <k_sin.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/k_tan.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/k_tan.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/k_tan.c	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/k_tan.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,44 +0,0 @@
-/* Copyright (C) 1996, 1997 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <math.h>
-#include "math_private.h"
-
-#ifndef FUNC
-#define FUNC tan
-#endif
-#ifndef float_type
-#define float_type double
-#endif
-
-#define __CONCATX(a,b) __CONCAT(a,b)
-
-float_type
-__CONCATX(__kernel_,FUNC) (x, y, iy)
-     float_type x;
-     float_type y;
-     int iy;
-{
-  float_type tan_x, tan_y;
-  tan_x = __m81_u(__CONCATX(__,FUNC)) (x);
-  tan_y = __m81_u(__CONCATX(__,FUNC)) (y);
-  if (iy > 0)
-    return (tan_x + tan_y) / (1 - tan_x * tan_y);
-  else
-    return (tan_x * tan_y - 1) / (tan_x + tan_y);
-}
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/k_tanf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/k_tanf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/k_tanf.c	1996-06-06 07:20:29.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/k_tanf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define FUNC tanf
-#define float_type float
-#include <k_tan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/k_tanl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/k_tanl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/k_tanl.c	1996-06-06 07:22:27.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/k_tanl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define FUNC tanl
-#define float_type long double
-#include <k_tan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/libm-test-ulps glibc-ports-2.5-cs/sysdeps/m68k/fpu/libm-test-ulps
--- glibc-ports-2.5/sysdeps/m68k/fpu/libm-test-ulps	2006-01-15 18:59:37.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/libm-test-ulps	1970-01-01 01:00:00.000000000 +0100
@@ -1,1165 +0,0 @@
-# Begin of automatic generation
-
-# acosh
-Test "acosh (7) == 2.63391579384963341725009269461593689":
-ildouble: 1
-ldouble: 1
-
-# asinh
-Test "asinh (0.75) == 0.693147180559945309417232121458176568":
-ildouble: 1
-ldouble: 1
-
-# atan2
-Test "atan2 (0.390625, .00029) == 1.57005392693128974780151246612928941":
-ildouble: 1
-ldouble: 1
-Test "atan2 (1.390625, 0.9296875) == 0.981498387184244311516296577615519772":
-ildouble: 1
-ldouble: 1
-
-# atanh
-Test "atanh (0.75) == 0.972955074527656652552676371721589865":
-ildouble: 1
-ldouble: 1
-
-# cacos
-Test "Real part of: cacos (0.75 + 1.25 i) == 1.11752014915610270578240049553777969 - 1.13239363160530819522266333696834467 i":
-float: 2
-ifloat: 2
-ildouble: 1
-ldouble: 1
-Test "Imaginary part of: cacos (0.75 + 1.25 i) == 1.11752014915610270578240049553777969 - 1.13239363160530819522266333696834467 i":
-float: 1
-ifloat: 1
-ildouble: 2
-ldouble: 2
-
-# cacosh
-Test "Real part of: cacosh (-2 - 3 i) == 1.9833870299165354323470769028940395 - 2.1414491111159960199416055713254211 i":
-double: 1
-float: 7
-idouble: 1
-ifloat: 7
-ildouble: 6
-ldouble: 6
-Test "Imaginary part of: cacosh (-2 - 3 i) == 1.9833870299165354323470769028940395 - 2.1414491111159960199416055713254211 i":
-double: 1
-idouble: 1
-ildouble: 2
-ldouble: 2
-Test "Real part of: cacosh (0.75 + 1.25 i) == 1.13239363160530819522266333696834467 + 1.11752014915610270578240049553777969 i":
-ildouble: 1
-ldouble: 1
-Test "Imaginary part of: cacosh (0.75 + 1.25 i) == 1.13239363160530819522266333696834467 + 1.11752014915610270578240049553777969 i":
-float: 1
-ifloat: 1
-
-# casin
-Test "Real part of: casin (0.75 + 1.25 i) == 0.453276177638793913448921196101971749 + 1.13239363160530819522266333696834467 i":
-double: 1
-float: 5
-idouble: 1
-ifloat: 5
-ildouble: 3
-ldouble: 3
-Test "Imaginary part of: casin (0.75 + 1.25 i) == 0.453276177638793913448921196101971749 + 1.13239363160530819522266333696834467 i":
-float: 1
-ifloat: 1
-ildouble: 2
-ldouble: 2
-
-# casinh
-Test "Real part of: casinh (-2 - 3 i) == -1.9686379257930962917886650952454982 - 0.96465850440760279204541105949953237 i":
-double: 6
-float: 19
-idouble: 6
-ifloat: 19
-ildouble: 5
-ldouble: 5
-Test "Imaginary part of: casinh (-2 - 3 i) == -1.9686379257930962917886650952454982 - 0.96465850440760279204541105949953237 i":
-double: 13
-float: 1
-idouble: 13
-ifloat: 1
-ildouble: 6
-ldouble: 6
-Test "Real part of: casinh (0.75 + 1.25 i) == 1.03171853444778027336364058631006594 + 0.911738290968487636358489564316731207 i":
-float: 1
-ifloat: 1
-Test "Imaginary part of: casinh (0.75 + 1.25 i) == 1.03171853444778027336364058631006594 + 0.911738290968487636358489564316731207 i":
-double: 1
-float: 1
-idouble: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-
-# catan
-Test "Imaginary part of: catan (-2 - 3 i) == -1.4099210495965755225306193844604208 - 0.22907268296853876629588180294200276 i":
-double: 1
-float: 1
-idouble: 1
-ifloat: 1
-Test "Real part of: catan (0.75 + 1.25 i) == 1.10714871779409050301706546017853704 + 0.549306144334054845697622618461262852 i":
-ildouble: 1
-ldouble: 1
-
-# catanh
-Test "Real part of: catanh (-2 - 3 i) == -0.14694666622552975204743278515471595 - 1.3389725222944935611241935759091443 i":
-ildouble: 1
-ldouble: 1
-
-# cbrt
-Test "cbrt (-0.001) == -0.1":
-ildouble: 1
-ldouble: 1
-Test "cbrt (0.9921875) == 0.997389022060725270579075195353955217":
-ildouble: 1
-ldouble: 1
-
-# ccos
-Test "Real part of: ccos (-2 - 3 i) == -4.18962569096880723013255501961597373 - 9.10922789375533659797919726277886212 i":
-float: 1
-ifloat: 1
-Test "Imaginary part of: ccos (-2 - 3 i) == -4.18962569096880723013255501961597373 - 9.10922789375533659797919726277886212 i":
-float: 1
-ifloat: 1
-Test "Real part of: ccos (0.75 + 1.25 i) == 1.38173873063425888530729933139078645 - 1.09193013555397466170919531722024128 i":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-Test "Imaginary part of: ccos (0.75 + 1.25 i) == 1.38173873063425888530729933139078645 - 1.09193013555397466170919531722024128 i":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-
-# ccosh
-Test "Real part of: ccosh (-2 - 3 i) == -3.72454550491532256547397070325597253 + 0.511822569987384608834463849801875634 i":
-float: 1
-ifloat: 1
-Test "Imaginary part of: ccosh (-2 - 3 i) == -3.72454550491532256547397070325597253 + 0.511822569987384608834463849801875634 i":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-Test "Real part of: ccosh (0.75 + 1.25 i) == 0.408242591877968807788852146397499084 + 0.780365930845853240391326216300863152 i":
-float: 1
-ifloat: 1
-Test "Imaginary part of: ccosh (0.75 + 1.25 i) == 0.408242591877968807788852146397499084 + 0.780365930845853240391326216300863152 i":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-
-# cexp
-Test "Real part of: cexp (-2.0 - 3.0 i) == -0.13398091492954261346140525546115575 - 0.019098516261135196432576240858800925 i":
-float: 1
-ifloat: 1
-Test "Imaginary part of: cexp (-2.0 - 3.0 i) == -0.13398091492954261346140525546115575 - 0.019098516261135196432576240858800925 i":
-float: 1
-ifloat: 1
-Test "Real part of: cexp (0.75 + 1.25 i) == 0.667537446429131586942201977015932112 + 2.00900045494094876258347228145863909 i":
-float: 2
-ifloat: 2
-Test "Imaginary part of: cexp (0.75 + 1.25 i) == 0.667537446429131586942201977015932112 + 2.00900045494094876258347228145863909 i":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-
-# clog
-Test "Real part of: clog (0.75 + 1.25 i) == 0.376885901188190075998919126749298416 + 1.03037682652431246378774332703115153 i":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-Test "Imaginary part of: clog (0.75 + 1.25 i) == 0.376885901188190075998919126749298416 + 1.03037682652431246378774332703115153 i":
-ildouble: 1
-ldouble: 1
-
-# clog10
-Test "Imaginary part of: clog10 (-0 + inf i) == inf + pi/2*log10(e) i":
-float: 1
-ifloat: 1
-Test "Imaginary part of: clog10 (-0 - inf i) == inf - pi/2*log10(e) i":
-float: 1
-ifloat: 1
-Test "Real part of: clog10 (-2 - 3 i) == 0.556971676153418384603252578971164214 - 0.937554462986374708541507952140189646 i":
-ildouble: 1
-ldouble: 1
-Test "Imaginary part of: clog10 (-3 + inf i) == inf + pi/2*log10(e) i":
-float: 1
-ifloat: 1
-Test "Imaginary part of: clog10 (-3 - inf i) == inf - pi/2*log10(e) i":
-float: 1
-ifloat: 1
-Test "Imaginary part of: clog10 (-inf + 0 i) == inf + pi*log10(e) i":
-float: 1
-ifloat: 1
-Test "Imaginary part of: clog10 (-inf + 1 i) == inf + pi*log10(e) i":
-float: 1
-ifloat: 1
-Test "Imaginary part of: clog10 (-inf + inf i) == inf + 3/4 pi*log10(e) i":
-double: 1
-idouble: 1
-Test "Imaginary part of: clog10 (-inf - 0 i) == inf - pi*log10(e) i":
-float: 1
-ifloat: 1
-Test "Imaginary part of: clog10 (-inf - 1 i) == inf - pi*log10(e) i":
-float: 1
-ifloat: 1
-Test "Imaginary part of: clog10 (0 + inf i) == inf + pi/2*log10(e) i":
-float: 1
-ifloat: 1
-Test "Imaginary part of: clog10 (0 - inf i) == inf - pi/2*log10(e) i":
-float: 1
-ifloat: 1
-Test "Real part of: clog10 (0.75 + 1.25 i) == 0.163679467193165171449476605077428975 + 0.447486970040493067069984724340855636 i":
-double: 1
-float: 1
-idouble: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-Test "Imaginary part of: clog10 (0.75 + 1.25 i) == 0.163679467193165171449476605077428975 + 0.447486970040493067069984724340855636 i":
-double: 1
-idouble: 1
-ildouble: 2
-ldouble: 2
-Test "Imaginary part of: clog10 (3 + inf i) == inf + pi/2*log10(e) i":
-float: 1
-ifloat: 1
-Test "Imaginary part of: clog10 (3 - inf i) == inf - pi/2*log10(e) i":
-float: 1
-ifloat: 1
-Test "Imaginary part of: clog10 (inf + inf i) == inf + pi/4*log10(e) i":
-float: 1
-ifloat: 1
-Test "Imaginary part of: clog10 (inf - inf i) == inf - pi/4*log10(e) i":
-float: 1
-ifloat: 1
-
-# cos
-Test "cos (M_PI_6l * 2.0) == 0.5":
-double: 1
-float: 1
-idouble: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-Test "cos (M_PI_6l * 4.0) == -0.5":
-double: 2
-float: 1
-idouble: 2
-ifloat: 1
-ildouble: 1
-ldouble: 1
-Test "cos (pi/2) == 0":
-double: 1
-float: 1
-idouble: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-
-# cpow
-Test "Real part of: cpow (0.75 + 1.25 i, 0.0 + 1.0 i) == 0.331825439177608832276067945276730566 + 0.131338600281188544930936345230903032 i":
-float: 1
-ifloat: 1
-Test "Imaginary part of: cpow (0.75 + 1.25 i, 0.0 + 1.0 i) == 0.331825439177608832276067945276730566 + 0.131338600281188544930936345230903032 i":
-float: 1
-ifloat: 1
-Test "Real part of: cpow (0.75 + 1.25 i, 0.75 + 1.25 i) == 0.117506293914473555420279832210420483 + 0.346552747708338676483025352060418001 i":
-float: 1
-ifloat: 1
-ildouble: 9
-ldouble: 9
-Test "Imaginary part of: cpow (0.75 + 1.25 i, 0.75 + 1.25 i) == 0.117506293914473555420279832210420483 + 0.346552747708338676483025352060418001 i":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-Test "Real part of: cpow (0.75 + 1.25 i, 1.0 + 0.0 i) == 0.75 + 1.25 i":
-float: 2
-ifloat: 2
-ildouble: 2
-ldouble: 2
-Test "Imaginary part of: cpow (0.75 + 1.25 i, 1.0 + 0.0 i) == 0.75 + 1.25 i":
-float: 2
-ifloat: 2
-ildouble: 1
-ldouble: 1
-Test "Real part of: cpow (0.75 + 1.25 i, 1.0 + 1.0 i) == 0.0846958290317209430433805274189191353 + 0.513285749182902449043287190519090481 i":
-double: 1
-float: 2
-idouble: 1
-ifloat: 2
-ildouble: 15
-ldouble: 15
-Test "Imaginary part of: cpow (0.75 + 1.25 i, 1.0 + 1.0 i) == 0.0846958290317209430433805274189191353 + 0.513285749182902449043287190519090481 i":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-Test "Real part of: cpow (2 + 0 i, 10 + 0 i) == 1024.0 + 0.0 i":
-ildouble: 5
-ldouble: 5
-Test "Real part of: cpow (2 + 3 i, 4 + 0 i) == -119.0 - 120.0 i":
-double: 1
-float: 1
-idouble: 1
-ifloat: 1
-ildouble: 4
-ldouble: 4
-Test "Imaginary part of: cpow (2 + 3 i, 4 + 0 i) == -119.0 - 120.0 i":
-float: 6
-ifloat: 6
-ildouble: 2
-ldouble: 2
-Test "Real part of: cpow (e + 0 i, 0 + 2 * M_PIl i) == 1.0 + 0.0 i":
-float: 1
-ifloat: 1
-Test "Imaginary part of: cpow (e + 0 i, 0 + 2 * M_PIl i) == 1.0 + 0.0 i":
-double: 2
-float: 3
-idouble: 2
-ifloat: 3
-ildouble: 1
-ldouble: 1
-
-# csin
-Test "Real part of: csin (-2 - 3 i) == -9.15449914691142957346729954460983256 + 4.16890695996656435075481305885375484 i":
-float: 1
-ifloat: 1
-Test "Imaginary part of: csin (-2 - 3 i) == -9.15449914691142957346729954460983256 + 4.16890695996656435075481305885375484 i":
-float: 1
-ifloat: 1
-Test "Real part of: csin (0.75 + 1.25 i) == 1.28722291002649188575873510790565441 + 1.17210635989270256101081285116138863 i":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-Test "Imaginary part of: csin (0.75 + 1.25 i) == 1.28722291002649188575873510790565441 + 1.17210635989270256101081285116138863 i":
-float: 1
-ifloat: 1
-
-# csinh
-Test "Real part of: csinh (-2 - 3 i) == 3.59056458998577995201256544779481679 - 0.530921086248519805267040090660676560 i":
-float: 1
-ifloat: 1
-Test "Imaginary part of: csinh (-2 - 3 i) == 3.59056458998577995201256544779481679 - 0.530921086248519805267040090660676560 i":
-float: 1
-ifloat: 1
-Test "Real part of: csinh (0.75 + 1.25 i) == 0.259294854551162779153349830618433028 + 1.22863452409509552219214606515777594 i":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-Test "Imaginary part of: csinh (0.75 + 1.25 i) == 0.259294854551162779153349830618433028 + 1.22863452409509552219214606515777594 i":
-float: 1
-ifloat: 1
-
-# ctan
-Test "Real part of: ctan (-2 - 3 i) == 0.376402564150424829275122113032269084e-2 - 1.00323862735360980144635859782192726 i":
-double: 1
-idouble: 1
-ildouble: 1
-ldouble: 1
-Test "Real part of: ctan (0.75 + 1.25 i) == 0.160807785916206426725166058173438663 + 0.975363285031235646193581759755216379 i":
-ildouble: 1
-ldouble: 1
-Test "Imaginary part of: ctan (0.75 + 1.25 i) == 0.160807785916206426725166058173438663 + 0.975363285031235646193581759755216379 i":
-ildouble: 2
-ldouble: 2
-
-# ctanh
-Test "Imaginary part of: ctanh (-2 - 3 i) == -0.965385879022133124278480269394560686 + 0.988437503832249372031403430350121098e-2 i":
-ildouble: 1
-ldouble: 1
-Test "Imaginary part of: ctanh (0 + pi/4 i) == 0.0 + 1.0 i":
-double: 1
-idouble: 1
-Test "Imaginary part of: ctanh (0.75 + 1.25 i) == 1.37260757053378320258048606571226857 + 0.385795952609750664177596760720790220 i":
-double: 1
-float: 1
-idouble: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-
-# erfc
-Test "erfc (0.75) == 0.288844366346484868401062165408589223":
-float: 1
-ifloat: 1
-Test "erfc (1.25) == 0.0770998717435417698634765188027188596":
-ildouble: 1
-ldouble: 1
-Test "erfc (4.125) == 0.542340079956506600531223408575531062e-8":
-float: 1
-ifloat: 1
-
-# expm1
-Test "expm1 (1) == M_El - 1.0":
-ildouble: 1
-ldouble: 1
-
-# gamma
-Test "gamma (-0.5) == log(2*sqrt(pi))":
-ildouble: 1
-ldouble: 1
-Test "gamma (0.5) == log(sqrt(pi))":
-ildouble: 1
-ldouble: 1
-Test "gamma (3) == M_LN2l":
-ildouble: 1
-ldouble: 1
-
-# hypot
-Test "hypot (-0.7, -12.4) == 12.419742348374220601176836866763271":
-float: 1
-ifloat: 1
-Test "hypot (-0.7, 12.4) == 12.419742348374220601176836866763271":
-float: 1
-ifloat: 1
-Test "hypot (-12.4, -0.7) == 12.419742348374220601176836866763271":
-float: 1
-ifloat: 1
-Test "hypot (-12.4, 0.7) == 12.419742348374220601176836866763271":
-float: 1
-ifloat: 1
-Test "hypot (0.7, -12.4) == 12.419742348374220601176836866763271":
-float: 1
-ifloat: 1
-Test "hypot (0.7, 12.4) == 12.419742348374220601176836866763271":
-float: 1
-ifloat: 1
-Test "hypot (12.4, -0.7) == 12.419742348374220601176836866763271":
-float: 1
-ifloat: 1
-Test "hypot (12.4, 0.7) == 12.419742348374220601176836866763271":
-float: 1
-ifloat: 1
-
-# j0
-Test "j0 (-4.0) == -3.9714980986384737228659076845169804197562E-1":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-Test "j0 (0.75) == 0.864242275166648623555731103820923211":
-float: 1
-ifloat: 1
-Test "j0 (1.5) == 0.511827671735918128749051744283411720":
-float: 1
-ifloat: 1
-Test "j0 (10.0) == -0.245935764451348335197760862485328754":
-double: 1
-idouble: 1
-Test "j0 (4.0) == -3.9714980986384737228659076845169804197562E-1":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-
-# j1
-Test "j1 (-1.0) == -0.440050585744933515959682203718914913":
-float: 1
-ifloat: 1
-Test "j1 (1.0) == 0.440050585744933515959682203718914913":
-float: 1
-ifloat: 1
-Test "j1 (1.5) == 0.557936507910099641990121213156089400":
-float: 1
-ifloat: 1
-Test "j1 (10.0) == 0.0434727461688614366697487680258592883":
-float: 2
-ifloat: 2
-ildouble: 1
-ldouble: 1
-Test "j1 (2.0) == 0.576724807756873387202448242269137087":
-float: 1
-ifloat: 1
-Test "j1 (8.0) == 0.234636346853914624381276651590454612":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-
-# jn
-Test "jn (0, -4.0) == -3.9714980986384737228659076845169804197562E-1":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-Test "jn (0, 0.75) == 0.864242275166648623555731103820923211":
-float: 1
-ifloat: 1
-Test "jn (0, 1.5) == 0.511827671735918128749051744283411720":
-float: 1
-ifloat: 1
-Test "jn (0, 10.0) == -0.245935764451348335197760862485328754":
-double: 1
-idouble: 1
-Test "jn (0, 4.0) == -3.9714980986384737228659076845169804197562E-1":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-Test "jn (1, -1.0) == -0.440050585744933515959682203718914913":
-float: 1
-ifloat: 1
-Test "jn (1, 1.0) == 0.440050585744933515959682203718914913":
-float: 1
-ifloat: 1
-Test "jn (1, 1.5) == 0.557936507910099641990121213156089400":
-float: 1
-ifloat: 1
-Test "jn (1, 10.0) == 0.0434727461688614366697487680258592883":
-float: 2
-ifloat: 2
-ildouble: 1
-ldouble: 1
-Test "jn (1, 2.0) == 0.576724807756873387202448242269137087":
-float: 1
-ifloat: 1
-Test "jn (1, 8.0) == 0.234636346853914624381276651590454612":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-Test "jn (10, -1.0) == 0.263061512368745320699785368779050294e-9":
-float: 2
-ifloat: 2
-ildouble: 1
-ldouble: 1
-Test "jn (10, 0.125) == 0.250543369809369890173993791865771547e-18":
-float: 1
-ifloat: 1
-Test "jn (10, 0.75) == 0.149621713117596814698712483621682835e-10":
-float: 2
-ifloat: 2
-ildouble: 2
-ldouble: 2
-Test "jn (10, 1.0) == 0.263061512368745320699785368779050294e-9":
-float: 2
-ifloat: 2
-ildouble: 1
-ldouble: 1
-Test "jn (10, 10.0) == 0.207486106633358857697278723518753428":
-double: 1
-float: 5
-idouble: 1
-ifloat: 5
-ildouble: 2
-ldouble: 2
-Test "jn (10, 2.0) == 0.251538628271673670963516093751820639e-6":
-float: 2
-ifloat: 2
-ildouble: 1
-ldouble: 1
-Test "jn (3, -1.0) == -0.0195633539826684059189053216217515083":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-Test "jn (3, 1.0) == 0.0195633539826684059189053216217515083":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-Test "jn (3, 10.0) == 0.0583793793051868123429354784103409563":
-double: 1
-float: 1
-idouble: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-Test "jn (3, 2.0) == 0.128943249474402051098793332969239835":
-ildouble: 1
-ldouble: 1
-
-# lgamma
-Test "lgamma (-0.5) == log(2*sqrt(pi))":
-ildouble: 1
-ldouble: 1
-Test "lgamma (0.5) == log(sqrt(pi))":
-ildouble: 1
-ldouble: 1
-Test "lgamma (0.7) == 0.260867246531666514385732417016759578":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-Test "lgamma (1.2) == -0.853740900033158497197028392998854470e-1":
-double: 1
-float: 2
-idouble: 1
-ifloat: 2
-ildouble: 1
-ldouble: 1
-Test "lgamma (3) == M_LN2l":
-ildouble: 1
-ldouble: 1
-
-# log
-Test "log (0.75) == -0.287682072451780927439219005993827432":
-ildouble: 1
-ldouble: 1
-Test "log (2) == M_LN2l":
-ildouble: 1
-ldouble: 1
-Test "log (e) == 1":
-float: 1
-ifloat: 1
-
-# log10
-Test "log10 (0.75) == -0.124938736608299953132449886193870744":
-ildouble: 2
-ldouble: 2
-Test "log10 (e) == log10(e)":
-float: 1
-ifloat: 1
-
-# log1p
-Test "log1p (-0.25) == -0.287682072451780927439219005993827432":
-ildouble: 1
-ldouble: 1
-
-# log2
-Test "log2 (0.75) == -.415037499278843818546261056052183492":
-ildouble: 1
-ldouble: 1
-
-# pow
-Test "pow (0.75, 1.25) == 0.697953644326574699205914060237425566":
-ildouble: 1
-ldouble: 1
-
-# sincos
-Test "sincos (M_PI_6l*2.0, &sin_res, &cos_res) puts 0.5 in cos_res":
-double: 1
-float: 1
-idouble: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-Test "sincos (M_PI_6l*2.0, &sin_res, &cos_res) puts 0.86602540378443864676372317075293616 in sin_res":
-double: 1
-float: 1
-idouble: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-Test "sincos (pi/2, &sin_res, &cos_res) puts 0 in cos_res":
-double: 1
-float: 1
-idouble: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-
-# sinh
-Test "sinh (0.75) == 0.822316731935829980703661634446913849":
-ildouble: 1
-ldouble: 1
-
-# tan
-Test "tan (0.75) == 0.931596459944072461165202756573936428":
-ildouble: 1
-ldouble: 1
-Test "tan (pi/4) == 1":
-double: 1
-idouble: 1
-
-# tgamma
-Test "tgamma (-0.5) == -2 sqrt (pi)":
-double: 1
-float: 1
-idouble: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-Test "tgamma (0.5) == sqrt (pi)":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-Test "tgamma (0.7) == 1.29805533264755778568117117915281162":
-double: 1
-float: 1
-idouble: 1
-ifloat: 1
-Test "tgamma (4) == 6":
-ildouble: 1
-ldouble: 1
-
-# y0
-Test "y0 (0.125) == -1.38968062514384052915582277745018693":
-double: 1
-float: 1
-idouble: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-Test "y0 (0.75) == -0.137172769385772397522814379396581855":
-double: 1
-idouble: 1
-ildouble: 2
-ldouble: 2
-Test "y0 (1.0) == 0.0882569642156769579829267660235151628":
-ildouble: 1
-ldouble: 1
-Test "y0 (1.5) == 0.382448923797758843955068554978089862":
-ildouble: 1
-ldouble: 1
-Test "y0 (10.0) == 0.0556711672835993914244598774101900481":
-ildouble: 1
-ldouble: 1
-Test "y0 (2.0) == 0.510375672649745119596606592727157873":
-float: 1
-ifloat: 1
-Test "y0 (8.0) == 0.223521489387566220527323400498620359":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-
-# y1
-Test "y1 (0.125) == -5.19993611253477499595928744876579921":
-ildouble: 1
-ldouble: 1
-Test "y1 (1.0) == -0.781212821300288716547150000047964821":
-double: 1
-idouble: 1
-Test "y1 (10.0) == 0.249015424206953883923283474663222803":
-float: 1
-ifloat: 1
-Test "y1 (2.0) == -0.107032431540937546888370772277476637":
-float: 2
-ifloat: 2
-ildouble: 1
-ldouble: 1
-Test "y1 (8.0) == -0.158060461731247494255555266187483550":
-ildouble: 1
-ldouble: 1
-
-# yn
-Test "yn (0, 0.125) == -1.38968062514384052915582277745018693":
-double: 1
-float: 1
-idouble: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-Test "yn (0, 0.75) == -0.137172769385772397522814379396581855":
-double: 1
-idouble: 1
-ildouble: 2
-ldouble: 2
-Test "yn (0, 1.0) == 0.0882569642156769579829267660235151628":
-ildouble: 1
-ldouble: 1
-Test "yn (0, 1.5) == 0.382448923797758843955068554978089862":
-ildouble: 1
-ldouble: 1
-Test "yn (0, 10.0) == 0.0556711672835993914244598774101900481":
-ildouble: 1
-ldouble: 1
-Test "yn (0, 2.0) == 0.510375672649745119596606592727157873":
-float: 1
-ifloat: 1
-Test "yn (0, 8.0) == 0.223521489387566220527323400498620359":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-Test "yn (1, 0.125) == -5.19993611253477499595928744876579921":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-Test "yn (1, 0.75) == -1.03759455076928541973767132140642198":
-float: 1
-ifloat: 1
-Test "yn (1, 1.0) == -0.781212821300288716547150000047964821":
-double: 1
-idouble: 1
-Test "yn (1, 10.0) == 0.249015424206953883923283474663222803":
-float: 1
-ifloat: 1
-Test "yn (1, 2.0) == -0.107032431540937546888370772277476637":
-float: 2
-ifloat: 2
-ildouble: 1
-ldouble: 1
-Test "yn (1, 8.0) == -0.158060461731247494255555266187483550":
-ildouble: 1
-ldouble: 1
-Test "yn (10, 0.125) == -127057845771019398.252538486899753195":
-double: 1
-idouble: 1
-ildouble: 2
-ldouble: 2
-Test "yn (10, 0.75) == -2133501638.90573424452445412893839236":
-float: 1
-ifloat: 1
-ildouble: 4
-ldouble: 4
-Test "yn (10, 10.0) == -0.359814152183402722051986577343560609":
-double: 1
-float: 1
-idouble: 1
-ifloat: 1
-Test "yn (3, 0.125) == -2612.69757350066712600220955744091741":
-ildouble: 1
-ldouble: 1
-Test "yn (3, 0.75) == -12.9877176234475433186319774484809207":
-double: 1
-float: 1
-idouble: 1
-ifloat: 1
-ildouble: 2
-ldouble: 2
-Test "yn (3, 2.0) == -1.12778377684042778608158395773179238":
-float: 1
-ifloat: 1
-
-# Maximal error of functions:
-Function: "acosh":
-ildouble: 1
-ldouble: 1
-
-Function: "asinh":
-ildouble: 1
-ldouble: 1
-
-Function: "atan2":
-ildouble: 1
-ldouble: 1
-
-Function: "atanh":
-ildouble: 1
-ldouble: 1
-
-Function: Real part of "cacos":
-float: 2
-ifloat: 2
-ildouble: 1
-ldouble: 1
-
-Function: Imaginary part of "cacos":
-float: 1
-ifloat: 1
-ildouble: 2
-ldouble: 2
-
-Function: Real part of "cacosh":
-double: 1
-float: 7
-idouble: 1
-ifloat: 7
-ildouble: 6
-ldouble: 6
-
-Function: Imaginary part of "cacosh":
-double: 1
-float: 1
-idouble: 1
-ifloat: 1
-ildouble: 2
-ldouble: 2
-
-Function: Real part of "casin":
-double: 1
-float: 5
-idouble: 1
-ifloat: 5
-ildouble: 3
-ldouble: 3
-
-Function: Imaginary part of "casin":
-float: 1
-ifloat: 1
-ildouble: 2
-ldouble: 2
-
-Function: Real part of "casinh":
-double: 6
-float: 19
-idouble: 6
-ifloat: 19
-ildouble: 5
-ldouble: 5
-
-Function: Imaginary part of "casinh":
-double: 13
-float: 1
-idouble: 13
-ifloat: 1
-ildouble: 6
-ldouble: 6
-
-Function: Real part of "catan":
-ildouble: 1
-ldouble: 1
-
-Function: Imaginary part of "catan":
-double: 1
-float: 1
-idouble: 1
-ifloat: 1
-
-Function: Real part of "catanh":
-ildouble: 1
-ldouble: 1
-
-Function: "cbrt":
-ildouble: 1
-ldouble: 1
-
-Function: Real part of "ccos":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-
-Function: Imaginary part of "ccos":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-
-Function: Real part of "ccosh":
-float: 1
-ifloat: 1
-
-Function: Imaginary part of "ccosh":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-
-Function: Real part of "cexp":
-float: 2
-ifloat: 2
-
-Function: Imaginary part of "cexp":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-
-Function: Real part of "clog":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-
-Function: Imaginary part of "clog":
-ildouble: 1
-ldouble: 1
-
-Function: Real part of "clog10":
-double: 1
-float: 1
-idouble: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-
-Function: Imaginary part of "clog10":
-double: 1
-float: 1
-idouble: 1
-ifloat: 1
-ildouble: 2
-ldouble: 2
-
-Function: "cos":
-double: 2
-float: 1
-idouble: 2
-ifloat: 1
-ildouble: 1
-ldouble: 1
-
-Function: Real part of "cpow":
-double: 1
-float: 2
-idouble: 1
-ifloat: 2
-ildouble: 15
-ldouble: 15
-
-Function: Imaginary part of "cpow":
-double: 2
-float: 6
-idouble: 2
-ifloat: 6
-ildouble: 2
-ldouble: 2
-
-Function: Real part of "csin":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-
-Function: Imaginary part of "csin":
-float: 1
-ifloat: 1
-
-Function: Real part of "csinh":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-
-Function: Imaginary part of "csinh":
-float: 1
-ifloat: 1
-
-Function: Real part of "ctan":
-double: 1
-idouble: 1
-ildouble: 1
-ldouble: 1
-
-Function: Imaginary part of "ctan":
-ildouble: 2
-ldouble: 2
-
-Function: Imaginary part of "ctanh":
-double: 1
-float: 1
-idouble: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-
-Function: "erfc":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-
-Function: "expm1":
-ildouble: 1
-ldouble: 1
-
-Function: "gamma":
-ildouble: 1
-ldouble: 1
-
-Function: "hypot":
-float: 1
-ifloat: 1
-
-Function: "j0":
-double: 1
-float: 1
-idouble: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-
-Function: "j1":
-float: 2
-ifloat: 2
-ildouble: 1
-ldouble: 1
-
-Function: "jn":
-double: 1
-float: 5
-idouble: 1
-ifloat: 5
-ildouble: 2
-ldouble: 2
-
-Function: "lgamma":
-double: 1
-float: 2
-idouble: 1
-ifloat: 2
-ildouble: 1
-ldouble: 1
-
-Function: "log":
-float: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-
-Function: "log10":
-float: 1
-ifloat: 1
-ildouble: 2
-ldouble: 2
-
-Function: "log1p":
-ildouble: 1
-ldouble: 1
-
-Function: "log2":
-ildouble: 1
-ldouble: 1
-
-Function: "pow":
-ildouble: 1
-ldouble: 1
-
-Function: "sincos":
-double: 1
-float: 1
-idouble: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-
-Function: "sinh":
-ildouble: 1
-ldouble: 1
-
-Function: "tan":
-double: 1
-idouble: 1
-ildouble: 1
-ldouble: 1
-
-Function: "tgamma":
-double: 1
-float: 1
-idouble: 1
-ifloat: 1
-ildouble: 1
-ldouble: 1
-
-Function: "y0":
-double: 1
-float: 1
-idouble: 1
-ifloat: 1
-ildouble: 2
-ldouble: 2
-
-Function: "y1":
-double: 1
-float: 2
-idouble: 1
-ifloat: 2
-ildouble: 1
-ldouble: 1
-
-Function: "yn":
-double: 1
-float: 2
-idouble: 1
-ifloat: 2
-ildouble: 4
-ldouble: 4
-
-# end of automatic generation
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/Makefile glibc-ports-2.5-cs/sysdeps/m68k/fpu/Makefile
--- glibc-ports-2.5/sysdeps/m68k/fpu/Makefile	1991-08-02 00:07:42.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/Makefile	1970-01-01 01:00:00.000000000 +0100
@@ -1,11 +0,0 @@
-ifeq	($(subdir),math)
-ifndef	math-twiddled
-
-# Avoid twiddling in generic/Makefile.
-math-twiddled := t
-
-endif
-
-bsdmath_dirs := $(bsdmath_dirs) mc68881
-
-endif
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/mathimpl.h glibc-ports-2.5-cs/sysdeps/m68k/fpu/mathimpl.h
--- glibc-ports-2.5/sysdeps/m68k/fpu/mathimpl.h	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/mathimpl.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,94 +0,0 @@
-/* Definitions of libc internal inline math functions implemented
-   by the m68881/2.
-   Copyright (C) 1991,92,93,94,96,97,98,99 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-/* This file contains the definitions of the inline math functions that
-   are only used internally inside libm, not visible to the user.  */
-
-__inline_mathop	(__ieee754_acos, acos)
-__inline_mathop	(__ieee754_asin, asin)
-__inline_mathop	(__ieee754_cosh, cosh)
-__inline_mathop	(__ieee754_sinh, sinh)
-__inline_mathop	(__ieee754_exp, etox)
-__inline_mathop	(__ieee754_exp2, twotox)
-__inline_mathop	(__ieee754_exp10, tentox)
-__inline_mathop	(__ieee754_log10, log10)
-__inline_mathop	(__ieee754_log2, log2)
-__inline_mathop	(__ieee754_log, logn)
-__inline_mathop	(__ieee754_sqrt, sqrt)
-__inline_mathop	(__ieee754_atanh, atanh)
-
-__m81_defun (double, __ieee754_remainder, (double __x, double __y))
-{
-  double __result;
-  __asm ("frem%.x %1, %0" : "=f" (__result) : "f" (__y), "0" (__x));
-  return __result;
-}
-
-__m81_defun (float, __ieee754_remainderf, (float __x, float __y))
-{
-  float __result;
-  __asm ("frem%.x %1, %0" : "=f" (__result) : "f" (__y), "0" (__x));
-  return __result;
-}
-
-__m81_defun (long double,
-	     __ieee754_remainderl, (long double __x, long double __y))
-{
-  long double __result;
-  __asm ("frem%.x %1, %0" : "=f" (__result) : "f" (__y), "0" (__x));
-  return __result;
-}
-
-__m81_defun (double, __ieee754_fmod, (double __x, double __y))
-{
-  double __result;
-  __asm ("fmod%.x %1, %0" : "=f" (__result) : "f" (__y), "0" (__x));
-  return __result;
-}
-
-__m81_defun (float, __ieee754_fmodf, (float __x, float __y))
-{
-  float __result;
-  __asm ("fmod%.x %1, %0" : "=f" (__result) : "f" (__y), "0" (__x));
-  return __result;
-}
-
-__m81_defun (long double,
-	     __ieee754_fmodl, (long double __x, long double __y))
-{
-  long double __result;
-  __asm ("fmod%.x %1, %0" : "=f" (__result) : "f" (__y), "0" (__x));
-  return __result;
-}
-
-/* Get the m68881 condition codes, to quickly check multiple conditions.  */
-static __inline__ unsigned long
-__m81_test (long double __val)
-{
-  unsigned long __fpsr;
-  __asm ("ftst%.x %1; fmove%.l %/fpsr,%0" : "=dm" (__fpsr) : "f" (__val));
-  return __fpsr;
-}
-
-/* Bit values returned by __m81_test.  */
-#define __M81_COND_NAN  (1 << 24)
-#define __M81_COND_INF  (2 << 24)
-#define __M81_COND_ZERO (4 << 24)
-#define __M81_COND_NEG  (8 << 24)
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/mpa.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/mpa.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/mpa.c	2001-03-12 00:25:54.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/mpa.c	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/mpatan2.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/mpatan2.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/mpatan2.c	2001-03-12 00:25:54.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/mpatan2.c	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/mpatan.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/mpatan.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/mpatan.c	2001-03-12 00:25:54.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/mpatan.c	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/mpexp.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/mpexp.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/mpexp.c	2001-03-12 00:25:54.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/mpexp.c	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/mplog.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/mplog.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/mplog.c	2001-03-12 00:25:54.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/mplog.c	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/mpsqrt.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/mpsqrt.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/mpsqrt.c	2001-03-12 00:25:54.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/mpsqrt.c	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/mptan.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/mptan.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/mptan.c	2001-03-12 00:25:54.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/mptan.c	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_atan.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_atan.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_atan.c	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_atan.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,38 +0,0 @@
-/* Copyright (C) 1996, 1997 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <math.h>
-
-#ifndef FUNC
-#define FUNC atan
-#endif
-#ifndef float_type
-#define float_type double
-#endif
-
-#define __CONCATX(a,b) __CONCAT(a,b)
-
-float_type
-__CONCATX(__,FUNC) (x)
-     float_type x;
-{
-  return __m81_u(__CONCATX(__,FUNC))(x);
-}
-
-#define weak_aliasx(a,b) weak_alias(a,b)
-weak_aliasx (__CONCATX(__,FUNC), FUNC)
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_atanf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_atanf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_atanf.c	1996-06-06 07:20:19.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_atanf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,5 +0,0 @@
-#ifndef FUNC
-#define FUNC atanf
-#endif
-#define float_type float
-#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_atanl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_atanl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_atanl.c	1996-06-06 07:22:09.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_atanl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,5 +0,0 @@
-#ifndef FUNC
-#define FUNC atanl
-#endif
-#define float_type long double
-#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_ccos.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_ccos.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_ccos.c	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_ccos.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,73 +0,0 @@
-/* Complex cosine function.  m68k fpu version
-   Copyright (C) 1997, 1999 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Andreas Schwab <schwab@issan.informatik.uni-dortmund.de>.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <complex.h>
-#include <math.h>
-#include "mathimpl.h"
-
-#ifndef SUFF
-#define SUFF
-#endif
-#ifndef float_type
-#define float_type double
-#endif
-
-#define CONCATX(a,b) __CONCAT(a,b)
-#define s(name) CONCATX(name,SUFF)
-#define m81(func) __m81_u(s(func))
-
-__complex__ float_type
-s(__ccos) (__complex__ float_type x)
-{
-  __complex__ float_type retval;
-  unsigned long rx_cond = __m81_test (__real__ x);
-
-  if ((rx_cond & (__M81_COND_INF|__M81_COND_NAN)) == 0)
-    {
-      /* Real part is finite.  */
-      float_type sin_rx, cos_rx;
-
-      __asm ("fsincos%.x %2,%1:%0" : "=f" (sin_rx), "=f" (cos_rx)
-	     : "f" (__real__ x));
-      __real__ retval = cos_rx * m81(__ieee754_cosh) (__imag__ x);
-      if (rx_cond & __M81_COND_ZERO)
-	__imag__ retval = (m81(__signbit) (__imag__ x)
-			   ? __real__ x : -__real__ x);
-      else
-	__imag__ retval = -sin_rx * m81(__ieee754_sinh) (__imag__ x);
-    }
-  else
-    {
-      unsigned long ix_cond = __m81_test (__imag__ x);
-
-      if (ix_cond & __M81_COND_INF)
-	__real__ retval = s(fabs) (__imag__ x);
-      else
-	__real__ retval = __real__ x - __real__ x;
-      if (ix_cond & __M81_COND_ZERO)
-	__imag__ retval = __imag__ x;
-      else
-	__imag__ retval = __real__ x - __real__ x;
-    }
-
-  return retval;
-}
-#define weak_aliasx(a,b) weak_alias(a,b)
-weak_aliasx (s(__ccos), s(ccos))
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_ccosf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_ccosf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_ccosf.c	1997-05-07 17:27:16.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_ccosf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define SUFF f
-#define float_type float
-#include <s_ccos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_ccosh.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_ccosh.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_ccosh.c	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_ccosh.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,78 +0,0 @@
-/* Complex cosine hyperbole function.  m68k fpu version
-   Copyright (C) 1997, 1999 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Andreas Schwab <schwab@issan.informatik.uni-dortmund.de>.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <complex.h>
-#include <math.h>
-#include "mathimpl.h"
-
-#ifndef SUFF
-#define SUFF
-#endif
-#ifndef float_type
-#define float_type double
-#endif
-
-#define CONCATX(a,b) __CONCAT(a,b)
-#define s(name) CONCATX(name,SUFF)
-#define m81(func) __m81_u(s(func))
-
-__complex__ float_type
-s(__ccosh) (__complex__ float_type x)
-{
-  __complex__ float_type retval;
-  unsigned long ix_cond = __m81_test (__imag__ x);
-
-  if ((ix_cond & (__M81_COND_INF|__M81_COND_NAN)) == 0)
-    {
-      /* Imaginary part is finite.  */
-      float_type sin_ix, cos_ix;
-
-      __asm ("fsincos%.x %2,%1:%0" : "=f" (sin_ix), "=f" (cos_ix)
-	     : "f" (__imag__ x));
-      __real__ retval = cos_ix * m81(__ieee754_cosh) (__real__ x);
-      if (ix_cond & __M81_COND_ZERO)
-	__imag__ retval = (m81(__signbit) (__real__ x)
-			   ? -__imag__ x : __imag__ x);
-      else
-	__imag__ retval = sin_ix * m81(__ieee754_sinh) (__real__ x);
-    }
-  else
-    {
-      unsigned long rx_cond = __m81_test (__real__ x);
-
-      if (rx_cond & __M81_COND_ZERO)
-	{
-	  __real__ retval = __imag__ x - __imag__ x;
-	  __imag__ retval = __real__ x;
-	}
-      else
-	{
-	  if (rx_cond & __M81_COND_INF)
-	    __real__ retval = s(fabs) (__real__ x);
-	  else
-	    __real__ retval = 0.0/0.0;
-	  __imag__ retval = __imag__ x - __imag__ x;
-	}
-    }
-
-  return retval;
-}
-#define weak_aliasx(a,b) weak_alias(a,b)
-weak_aliasx (s(__ccosh), s(ccosh))
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_ccoshf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_ccoshf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_ccoshf.c	1997-05-07 17:28:46.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_ccoshf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define SUFF f
-#define float_type float
-#include <s_ccosh.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_ccoshl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_ccoshl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_ccoshl.c	1997-05-07 17:28:48.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_ccoshl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define SUFF l
-#define float_type long double
-#include <s_ccosh.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_ccosl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_ccosl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_ccosl.c	1997-05-07 17:27:27.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_ccosl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define SUFF l
-#define float_type long double
-#include <s_ccos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_ceil.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_ceil.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_ceil.c	1996-03-16 22:31:45.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_ceil.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	ceil
-#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_ceilf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_ceilf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_ceilf.c	1996-03-16 22:31:15.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_ceilf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	ceilf
-#include <s_atanf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_ceill.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_ceill.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_ceill.c	1996-06-06 07:22:08.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_ceill.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC ceill
-#include <s_atanl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_cexp.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_cexp.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_cexp.c	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_cexp.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,117 +0,0 @@
-/* Complex exponential function.  m68k fpu version
-   Copyright (C) 1997, 1999 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Andreas Schwab <schwab@issan.informatik.uni-dortmund.de>
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <complex.h>
-#include <math.h>
-#include "mathimpl.h"
-
-#ifndef SUFF
-#define SUFF
-#endif
-#ifndef float_type
-#define float_type double
-#endif
-
-#define CONCATX(a,b) __CONCAT(a,b)
-#define s(name) CONCATX(name,SUFF)
-#define m81(func) __m81_u(s(func))
-
-__complex__ float_type
-s(__cexp) (__complex__ float_type x)
-{
-  __complex__ float_type retval;
-  unsigned long ix_cond;
-
-  ix_cond = __m81_test (__imag__ x);
-
-  if ((ix_cond & (__M81_COND_NAN|__M81_COND_INF)) == 0)
-    {
-      /* Imaginary part is finite.  */
-      float_type exp_val = m81(__ieee754_exp) (__real__ x);
-
-      __real__ retval = __imag__ retval = exp_val;
-      if (m81(__finite) (exp_val))
-	{
-	  float_type sin_ix, cos_ix;
-	  __asm ("fsincos%.x %2,%1:%0" : "=f" (sin_ix), "=f" (cos_ix)
-		 : "f" (__imag__ x));
-	  __real__ retval *= cos_ix;
-	  if (ix_cond & __M81_COND_ZERO)
-	    __imag__ retval = __imag__ x;
-	  else
-	    __imag__ retval *= sin_ix;
-	}
-      else
-	{
-	  /* Compute the sign of the result.  */
-	  float_type remainder, pi_2;
-	  int quadrant;
-
-	  __asm ("fmovecr %#0,%0\n\tfscale%.w %#-1,%0" : "=f" (pi_2));
-	  __asm ("fmod%.x %2,%0\n\tfmove%.l %/fpsr,%1"
-		 : "=f" (remainder), "=dm" (quadrant)
-		 : "f" (pi_2), "0" (__imag__ x));
-	  quadrant = (quadrant >> 16) & 0x83;
-	  if (quadrant & 0x80)
-	    quadrant ^= 0x83;
-	  switch (quadrant)
-	    {
-	    default:
-	      break;
-	    case 1:
-	      __real__ retval = -__real__ retval;
-	      break;
-	    case 2:
-	      __real__ retval = -__real__ retval;
-	    case 3:
-	      __imag__ retval = -__imag__ retval;
-	      break;
-	    }
-	  if (ix_cond & __M81_COND_ZERO && !m81(__isnan) (exp_val))
-	    __imag__ retval = __imag__ x;
-	}
-    }
-  else
-    {
-      unsigned long rx_cond = __m81_test (__real__ x);
-
-      if (rx_cond & __M81_COND_INF)
-	{
-	  /* Real part is infinite.  */
-	  if (rx_cond & __M81_COND_NEG)
-	    {
-	      __real__ retval = __imag__ retval = 0.0;
-	      if (ix_cond & __M81_COND_NEG)
-		__imag__ retval = -__imag__ retval;
-	    }
-	  else
-	    {
-	      __real__ retval = __real__ x;
-	      __imag__ retval = __imag__ x - __imag__ x;
-	    }
-	}
-      else
-	__real__ retval = __imag__ retval = __imag__ x - __imag__ x;
-    }
-
-  return retval;
-}
-#define weak_aliasx(a,b) weak_alias(a,b)
-weak_aliasx (s(__cexp), s(cexp))
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_cexpf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_cexpf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_cexpf.c	1997-05-07 17:29:20.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_cexpf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define SUFF f
-#define float_type float
-#include <s_cexp.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_cexpl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_cexpl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_cexpl.c	1997-05-07 17:29:22.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_cexpl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define SUFF l
-#define float_type long double
-#include <s_cexp.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_cos.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_cos.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_cos.c	1996-03-16 22:32:31.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_cos.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	cos
-#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_cosf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_cosf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_cosf.c	1996-03-16 22:31:51.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_cosf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	cosf
-#include <s_atanf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_cosl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_cosl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_cosl.c	1996-06-06 07:22:21.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_cosl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC cosl
-#include <s_atanl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_csin.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_csin.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_csin.c	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_csin.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,69 +0,0 @@
-/* Complex sine function.  m68k fpu version
-   Copyright (C) 1997, 1999 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Andreas Schwab <schwab@issan.informatik.uni-dortmund.de>.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <complex.h>
-#include <math.h>
-#include "mathimpl.h"
-
-#ifndef SUFF
-#define SUFF
-#endif
-#ifndef float_type
-#define float_type double
-#endif
-
-#define CONCATX(a,b) __CONCAT(a,b)
-#define s(name) CONCATX(name,SUFF)
-#define m81(func) __m81_u(s(func))
-
-__complex__ float_type
-s(__csin) (__complex__ float_type x)
-{
-  __complex__ float_type retval;
-  unsigned long rx_cond = __m81_test (__real__ x);
-
-  if ((rx_cond & (__M81_COND_INF|__M81_COND_NAN)) == 0)
-    {
-      /* Real part is finite.  */
-      float_type sin_rx, cos_rx;
-
-      __asm ("fsincos%.x %2,%1:%0" : "=f" (sin_rx), "=f" (cos_rx)
-	     : "f" (__real__ x));
-      if (rx_cond & __M81_COND_ZERO)
-	__real__ retval = __real__ x;
-      else
-	__real__ retval = sin_rx * m81(__ieee754_cosh) (__imag__ x);
-      __imag__ retval = cos_rx * m81(__ieee754_sinh) (__imag__ x);
-    }
-  else
-    {
-      unsigned long ix_cond = __m81_test (__imag__ x);
-
-      __real__ retval = __real__ x - __real__ x;
-      if (ix_cond & (__M81_COND_ZERO|__M81_COND_INF|__M81_COND_NAN))
-	__imag__ retval = __imag__ x;
-      else
-	__imag__ retval = __real__ retval;
-    }
-
-  return retval;
-}
-#define weak_aliasx(a,b) weak_alias(a,b)
-weak_aliasx (s(__csin), s(csin))
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_csinf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_csinf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_csinf.c	1997-05-07 17:27:51.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_csinf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define SUFF f
-#define float_type float
-#include <s_csin.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_csinh.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_csinh.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_csinh.c	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_csinh.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,71 +0,0 @@
-/* Complex sine hyperbole function.  m68k fpu version
-   Copyright (C) 1997, 1999 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Andreas Schwab <schwab@issan.informatik.uni-dortmund.de>.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <complex.h>
-#include <math.h>
-#include "mathimpl.h"
-
-#ifndef SUFF
-#define SUFF
-#endif
-#ifndef float_type
-#define float_type double
-#endif
-
-#define CONCATX(a,b) __CONCAT(a,b)
-#define s(name) CONCATX(name,SUFF)
-#define m81(func) __m81_u(s(func))
-
-__complex__ float_type
-s(__csinh) (__complex__ float_type x)
-{
-  __complex__ float_type retval;
-  unsigned long ix_cond;
-
-  ix_cond = __m81_test (__imag__ x);
-
-  if ((ix_cond & (__M81_COND_INF|__M81_COND_NAN)) == 0)
-    {
-      /* Imaginary part is finite.  */
-      float_type sin_ix, cos_ix;
-
-      __asm ("fsincos%.x %2,%1:%0" : "=f" (sin_ix), "=f" (cos_ix)
-	     : "f" (__imag__ x));
-      __real__ retval = cos_ix * m81(__ieee754_sinh) (__real__ x);
-      if (ix_cond & __M81_COND_ZERO)
-	__imag__ retval = __imag__ x;
-      else
-	__imag__ retval = sin_ix * m81(__ieee754_cosh) (__real__ x);
-    }
-  else
-    {
-      unsigned long rx_cond = __m81_test (__real__ x);
-
-      __imag__ retval = __imag__ x - __imag__ x;
-      if (rx_cond & (__M81_COND_ZERO|__M81_COND_INF|__M81_COND_NAN))
-	__real__ retval = __real__ x;
-      else
-	__real__ retval = __imag__ retval;
-    }
-
-  return retval;
-}
-#define weak_aliasx(a,b) weak_alias(a,b)
-weak_aliasx (s(__csinh), s(csinh))
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_csinhf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_csinhf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_csinhf.c	1997-05-07 17:28:51.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_csinhf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define SUFF f
-#define float_type float
-#include <s_csinh.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_csinhl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_csinhl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_csinhl.c	1997-05-07 17:28:53.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_csinhl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define SUFF l
-#define float_type long double
-#include <s_csinh.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_csinl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_csinl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_csinl.c	1997-05-07 17:28:03.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_csinl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define SUFF l
-#define float_type long double
-#include <s_csin.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_expm1.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_expm1.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_expm1.c	1996-03-16 22:32:18.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_expm1.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	expm1
-#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_expm1f.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_expm1f.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_expm1f.c	1996-03-16 22:31:35.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_expm1f.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	expm1f
-#include <s_atanf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_expm1l.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_expm1l.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_expm1l.c	2002-09-10 03:12:49.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_expm1l.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define FUNC expm1l
-#include <s_atanl.c>
-libm_hidden_def (__expm1l)
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_fabs.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_fabs.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_fabs.c	1996-03-16 22:31:13.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_fabs.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	fabs
-#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_fabsf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_fabsf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_fabsf.c	1996-03-16 22:32:16.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_fabsf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	fabsf
-#include <s_atanf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_fabsl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_fabsl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_fabsl.c	1996-06-06 07:21:54.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_fabsl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC fabsl
-#include <s_atanl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_finite.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_finite.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_finite.c	2002-06-13 14:37:59.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_finite.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	finite
-#include <s_isinf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_finitef.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_finitef.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_finitef.c	2002-06-13 14:38:08.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_finitef.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	finitef
-#include <s_isinff.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_finitel.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_finitel.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_finitel.c	2002-06-13 14:38:20.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_finitel.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC finitel
-#include <s_isinfl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_floor.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_floor.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_floor.c	1996-03-16 22:31:34.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_floor.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	floor
-#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_floorf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_floorf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_floorf.c	1996-03-16 22:32:27.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_floorf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	floorf
-#include <s_atanf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_floorl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_floorl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_floorl.c	1996-06-06 07:21:57.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_floorl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC floorl
-#include <s_atanl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_fpclassifyl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_fpclassifyl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_fpclassifyl.c	2002-09-10 03:11:47.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_fpclassifyl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,44 +0,0 @@
-/* Return classification value corresponding to argument.  m68k version.
-   Copyright (C) 1997, 2001, 2002 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.
-   Fixed for m68k by Andreas Schwab <schwab@suse.de>.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <math.h>
-
-#include "math_private.h"
-
-
-int
-__fpclassifyl (long double x)
-{
-  u_int32_t ex, hx, lx;
-  int retval = FP_NORMAL;
-
-  GET_LDOUBLE_WORDS (ex, hx, lx, x);
-  ex &= 0x7fff;
-  if ((ex | hx | lx) == 0)
-    retval = FP_ZERO;
-  else if (ex == 0 && (hx & 0x80000000) == 0)
-    retval = FP_SUBNORMAL;
-  else if (ex == 0x7fff)
-    retval = ((hx & 0x7fffffff) | lx) != 0 ? FP_NAN : FP_INFINITE;
-
-  return retval;
-}
-libm_hidden_def (__fpclassifyl)
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_frexp.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_frexp.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_frexp.c	2003-06-26 18:18:13.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_frexp.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,56 +0,0 @@
-/* Copyright (C) 1996, 1997, 2003 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <math.h>
-
-#ifndef FUNC
-#define FUNC frexp
-#endif
-#ifndef float_type
-#define float_type double
-#endif
-
-#define __CONCATX(a,b) __CONCAT(a,b)
-
-float_type
-__CONCATX(__,FUNC) (float_type value, int *expptr)
-{
-  float_type mantissa, exponent;
-  int iexponent;
-  unsigned long fpsr;
-
-  __asm ("ftst%.x %1\n"
-	 "fmove%.l %/fpsr, %0"
-	 : "=dm" (fpsr) : "f" (value));
-  if (fpsr & (7 << 24))
-    {
-      /* Not finite or zero.  */
-      *expptr = 0;
-      return value;
-    }
-  __asm ("fgetexp%.x %1, %0" : "=f" (exponent) : "f" (value));
-  iexponent = (int) exponent + 1;
-  *expptr = iexponent;
-  __asm ("fscale%.l %2, %0"
-	 : "=f" (mantissa)
-	 : "0" (value), "dmi" (-iexponent));
-  return mantissa;
-}
-
-#define weak_aliasx(a,b) weak_alias(a,b)
-weak_aliasx (__CONCATX(__,FUNC), FUNC)
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_frexpf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_frexpf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_frexpf.c	1996-06-06 07:20:22.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_frexpf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define FUNC frexpf
-#define float_type float
-#include <s_frexp.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_frexpl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_frexpl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_frexpl.c	2003-06-26 18:18:13.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_frexpl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,59 +0,0 @@
-/* Copyright (C) 2003 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <math.h>
-
-long double
-__frexpl (long double value, int *expptr)
-{
-  long double mantissa, exponent;
-  int iexponent;
-  unsigned long fpsr;
-
-  __asm ("ftst%.x %1\n"
-	 "fmove%.l %/fpsr, %0"
-	 : "=dm" (fpsr) : "f" (value));
-  if (fpsr & (7 << 24))
-    {
-      /* Not finite or zero.  */
-      *expptr = 0;
-      return value;
-    }
-  __asm ("fgetexp%.x %1, %0" : "=f" (exponent) : "f" (value));
-  iexponent = (int) exponent + 1;
-  *expptr = iexponent;
-  /* Unnormalized numbers must be handled specially, otherwise fscale
-     results in overflow.  */
-  if (iexponent <= -16384)
-    {
-      value *= 0x1p16383L;
-      iexponent += 16383;
-    }
-  else if (iexponent >= 16384)
-    {
-      value *= 0x1p-16383L;
-      iexponent -= 16383;
-    }
-
-  __asm ("fscale%.l %2, %0"
-	 : "=f" (mantissa)
-	 : "0" (value), "dmi" (-iexponent));
-  return mantissa;
-}
-
-weak_alias (__frexpl, frexpl)
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_ilogb.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_ilogb.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_ilogb.c	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_ilogb.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,51 +0,0 @@
-/* Copyright (C) 1996, 1997, 1999 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <math.h>
-#include "mathimpl.h"
-
-#ifndef SUFF
-#define SUFF
-#endif
-#ifndef float_type
-#define float_type double
-#endif
-
-#define CONCATX(a,b) __CONCAT(a,b)
-#define s(name) CONCATX(name,SUFF)
-#define m81(func) __m81_u(s(func))
-
-int
-s(__ilogb) (float_type x)
-{
-  float_type result;
-  unsigned long x_cond;
-
-  x_cond = __m81_test (x);
-  /* We must return consistent values for zero and NaN.  */
-  if (x_cond & __M81_COND_ZERO)
-    return FP_ILOGB0;
-  if (x_cond & (__M81_COND_NAN | __M81_COND_INF))
-    return FP_ILOGBNAN;
-
-  __asm ("fgetexp%.x %1, %0" : "=f" (result) : "f" (x));
-  return (int) result;
-}
-
-#define weak_aliasx(a,b) weak_alias(a,b)
-weak_aliasx (s(__ilogb), s(ilogb))
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_ilogbf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_ilogbf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_ilogbf.c	1997-06-27 00:19:56.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_ilogbf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define SUFF f
-#define float_type float
-#include <s_ilogb.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_ilogbl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_ilogbl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_ilogbl.c	1997-06-27 00:19:58.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_ilogbl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define SUFF l
-#define float_type long double
-#include <s_ilogb.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/sincos32.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/sincos32.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/sincos32.c	2001-03-12 00:25:54.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/sincos32.c	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_isinf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_isinf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_isinf.c	2002-09-10 03:10:41.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_isinf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,40 +0,0 @@
-/* Copyright (C) 1996, 1997, 2002 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <math.h>
-
-#ifndef FUNC
-#define FUNC isinf
-#endif
-#ifndef float_type
-#define float_type double
-#endif
-
-#define __CONCATX(a,b) __CONCAT(a,b)
-
-int
-__CONCATX(__,FUNC) (x)
-     float_type x;
-{
-  return __m81_u(__CONCATX(__,FUNC))(x);
-}
-
-#define hidden_defx(a) hidden_def(a)
-hidden_defx(__CONCATX(__,FUNC))
-#define weak_aliasx(a,b) weak_alias(a,b)
-weak_aliasx (__CONCATX(__,FUNC), FUNC)
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_isinff.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_isinff.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_isinff.c	1996-06-06 07:20:49.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_isinff.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,5 +0,0 @@
-#ifndef FUNC
-#define FUNC isinff
-#endif
-#define float_type float
-#include <s_isinf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_isinfl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_isinfl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_isinfl.c	1996-06-06 07:22:03.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_isinfl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,5 +0,0 @@
-#ifndef FUNC
-#define FUNC isinfl
-#endif
-#define float_type long double
-#include <s_isinf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_isnan.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_isnan.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_isnan.c	1996-03-16 22:31:59.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_isnan.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	isnan
-#include <s_isinf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_isnanf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_isnanf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_isnanf.c	1996-03-16 22:31:10.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_isnanf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	isnanf
-#include <s_isinff.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_isnanl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_isnanl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_isnanl.c	1996-06-06 07:22:07.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_isnanl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC isnanl
-#include <s_isinfl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_llrint.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_llrint.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_llrint.c	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_llrint.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,76 +0,0 @@
-/* Round argument to nearest integral value according to current rounding
-   direction.
-   Copyright (C) 1997, 1999 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Andreas Schwab <schwab@issan.informatik.uni-dortmund.de>
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <math.h>
-#include "math_private.h"
-#include "mathimpl.h"
-
-long long int
-__llrint (double x)
-{
-  int32_t e;
-  u_int32_t h, l, s;
-  long long int result;
-
-  x = __m81_u(__rint) (x);
-
-  /* We could use __fixxfdi from libgcc, but here we can take advantage of
-     the known floating point format.  */
-  EXTRACT_WORDS (h, l, x);
-
-  e = ((h >> 20) & 0x7ff) - 0x3ff;
-  if (e < 0)
-    return 0;
-  s = h;
-  h &= 0xfffff;
-  h |= 0x100000;
-
-  if (e < 63)
-    {
-      if (e > 52)
-	{
-	  h <<= e - 52;
-	  h |= l >> (84 - e);
-	  l <<= e - 52;
-	  result = ((long long int) h << 32) | l;
-	}
-      else if (e > 20)
-	{
-	  l >>= 52 - e;
-	  l |= h << (e - 20);
-	  h >>= 52 - e;
-	  result = ((long long int) h << 32) | l;
-	}
-      else
-	result = h >> (20 - e);
-      if (s & 0x80000000)
-	result = -result;
-    }
-  else
-    /* The number is too large or not finite.  The standard leaves it
-       undefined what to return when the number is too large to fit in a
-       `long long int'.  */
-    result = -1LL;
-
-  return result;
-}
-
-weak_alias (__llrint, llrint)
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_llrintf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_llrintf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_llrintf.c	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_llrintf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,66 +0,0 @@
-/* Round argument to nearest integral value according to current rounding
-   direction.
-   Copyright (C) 1997, 1999 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Andreas Schwab <schwab@issan.informatik.uni-dortmund.de>
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <math.h>
-#include "math_private.h"
-#include "mathimpl.h"
-
-long long int
-__llrintf (float x)
-{
-  int32_t e;
-  u_int32_t i, s;
-  long long int result;
-
-  x = __m81_u(__rintf) (x);
-
-  GET_FLOAT_WORD (i, x);
-
-  e = ((i >> 23) & 0xff) - 0x7f;
-  if (e < 0)
-    return 0;
-  s = i;
-  i &= 0x7fffff;
-  i |= 0x800000;
-
-  if (e < 63)
-    {
-      if (e > 55)
-	result = (long long int) (i << (e - 55)) << 32;
-      else if (e > 31)
-	result = (((long long int) (i >> (55 - e)) << 32) | (i << (e - 23)));
-      else if (e > 23)
-	result = i << (e - 23);
-      else
-	result = i >> (23 - e);
-      if (s & 0x80000000)
-	result = -result;
-    }
-  else
-    /* The number is too large or not finite.  The standard leaves it
-       undefined what to return when the number is too large to fit in a
-       `long long int'.  */
-    result = -1LL;
-
-  return result;
-}
-
-weak_alias (__llrintf, llrintf)
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_llrintl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_llrintl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_llrintl.c	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_llrintl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,65 +0,0 @@
-/* Round argument to nearest integral value according to current rounding
-   direction.
-   Copyright (C) 1997, 1999 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Andreas Schwab <schwab@issan.informatik.uni-dortmund.de>
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <math.h>
-#include "math_private.h"
-#include "mathimpl.h"
-
-long long int
-__llrintl (long double x)
-{
-  int32_t e, s;
-  u_int32_t h, l;
-  long long int result;
-
-  x = __m81_u(__rintl) (x);
-
-  GET_LDOUBLE_WORDS (e, h, l, x);
-
-  s = e;
-  e = (e & 0x7fff) - 0x3fff;
-  if (e < 0)
-    return 0;
-
-  if (e < 63)
-    {
-      if (e > 31)
-	{
-	  l >>= 63 - e;
-	  l |= h << (e - 31);
-	  h >>= 63 - e;
-	  result = ((long long int) h << 32) | l;
-	}
-      else
-	result = h >> (31 - e);
-      if (s & 0x8000)
-	result = -result;
-    }
-  else
-    /* The number is too large or not finite.  The standard leaves it
-       undefined what to return when the number is too large to fit in a
-       `long long int'.  */
-    result = -1LL;
-
-  return result;
-}
-
-weak_alias (__llrintl, llrintl)
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_log1p.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_log1p.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_log1p.c	1996-03-16 22:31:09.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_log1p.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	log1p
-#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_log1pf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_log1pf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_log1pf.c	1996-03-16 22:31:43.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_log1pf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	log1pf
-#include <s_atanf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_log1pl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_log1pl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_log1pl.c	1996-06-06 07:22:17.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_log1pl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC log1pl
-#include <s_atanl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/slowexp.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/slowexp.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/slowexp.c	2001-03-12 00:25:54.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/slowexp.c	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/slowpow.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/slowpow.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/slowpow.c	2001-03-12 00:25:54.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/slowpow.c	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_lrint.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_lrint.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_lrint.c	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_lrint.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,40 +0,0 @@
-/* Round argument to nearest integral value according to current rounding
-   direction.
-   Copyright (C) 1997 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Andreas Schwab <schwab@issan.informatik.uni-dortmund.de>
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <math.h>
-
-#ifndef suffix
-#define suffix /*empty*/
-#endif
-#ifndef float_type
-#define float_type double
-#endif
-
-#define CONCATX(a,b) __CONCAT(a,b)
-
-long int
-CONCATX(__lrint,suffix) (float_type x)
-{
-  return __m81_u(CONCATX(__lrint,suffix)) (x);
-}
-
-#define weak_aliasx(a,b) weak_alias(a,b)
-weak_aliasx (CONCATX(__lrint,suffix), CONCATX(lrint,suffix))
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_lrintf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_lrintf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_lrintf.c	1997-10-26 20:58:37.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_lrintf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define suffix f
-#define float_type float
-#include <s_lrint.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_lrintl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_lrintl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_lrintl.c	1997-10-26 20:58:40.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_lrintl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define suffix l
-#define float_type long double
-#include <s_lrint.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_modf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_modf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_modf.c	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_modf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,56 +0,0 @@
-/* Copyright (C) 1996, 1997, 1999 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <math.h>
-#include "mathimpl.h"
-
-#ifndef SUFF
-#define SUFF
-#endif
-#ifndef float_type
-#define float_type double
-#endif
-
-#define CONCATX(a,b) __CONCAT(a,b)
-#define s(name) CONCATX(name,SUFF)
-#define m81(func) __m81_u(s(func))
-
-float_type
-s(__modf) (float_type x, float_type *iptr)
-{
-  float_type x_int, result;
-  unsigned long x_cond;
-
-  __asm ("fintrz%.x %1, %0" : "=f" (x_int) : "f" (x));
-  *iptr = x_int;
-  x_cond = __m81_test (x);
-  if (x_cond & __M81_COND_INF)
-    {
-      result = 0;
-      if (x_cond & __M81_COND_NEG)
-	result = -result;
-    }
-  else if (x_cond & __M81_COND_ZERO)
-    result = x;
-  else
-    result = x - x_int;
-  return result;
-}
-
-#define weak_aliasx(a,b) weak_alias(a,b)
-weak_aliasx(s(__modf), s(modf))
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_modff.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_modff.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_modff.c	1997-04-02 16:44:27.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_modff.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define SUFF f
-#define float_type float
-#include <s_modf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_modfl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_modfl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_modfl.c	1997-04-02 16:44:29.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_modfl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define SUFF l
-#define float_type long double
-#include <s_modf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_nearbyint.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_nearbyint.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_nearbyint.c	1997-04-02 16:45:59.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_nearbyint.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC nearbyint
-#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_nearbyintf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_nearbyintf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_nearbyintf.c	1997-04-02 16:46:07.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_nearbyintf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC nearbyintf
-#include <s_atanf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_nearbyintl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_nearbyintl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_nearbyintl.c	1997-04-02 16:46:18.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_nearbyintl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC nearbyintl
-#include <s_atanl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_nextafterl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_nextafterl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_nextafterl.c	2001-02-16 14:40:22.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_nextafterl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,109 +0,0 @@
-/* s_nextafterl.c -- long double version of s_nextafter.c.
- * Conversion to long double by Ulrich Drepper,
- * Cygnus Support, drepper@cygnus.com.
- * Fixed for m68k by Andreas Schwab <schwab@suse.de>.
- */
-
-/*
- * ====================================================
- * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
- *
- * Developed at SunPro, a Sun Microsystems, Inc. business.
- * Permission to use, copy, modify, and distribute this
- * software is freely granted, provided that this notice
- * is preserved.
- * ====================================================
- */
-
-#if defined(LIBM_SCCS) && !defined(lint)
-static char rcsid[] = "$NetBSD: $";
-#endif
-
-/* IEEE functions
- *	nextafterl(x,y)
- *	return the next machine floating-point number of x in the
- *	direction toward y.
- *   Special cases:
- */
-
-#include "math.h"
-#include "math_private.h"
-
-#ifdef __STDC__
-	long double __nextafterl(long double x, long double y)
-#else
-	long double __nextafterl(x,y)
-	long double x,y;
-#endif
-{
-	int32_t ix,iy,esx,esy;
-	u_int32_t hx,hy,lx,ly;
-
-	GET_LDOUBLE_WORDS(esx,hx,lx,x);
-	GET_LDOUBLE_WORDS(esy,hy,ly,y);
-	ix = esx&0x7fff;		/* |x| */
-	iy = esy&0x7fff;		/* |y| */
-
-	if(((ix==0x7fff)&&((hx&0x7fffffff)|lx)!=0) ||   /* x is nan */
-	   ((iy==0x7fff)&&((hy&0x7fffffff)|ly)!=0))     /* y is nan */
-	   return x+y;
-	if(x==y) return y;		/* x=y, return y */
-	if((ix|hx|lx)==0) {			/* x == 0 */
-	    SET_LDOUBLE_WORDS(x,esy&0x8000,0,1);/* return +-minsubnormal */
-	    y = x*x;
-	    if(y==x) return y; else return x;	/* raise underflow flag */
-	}
-	if(esx>=0) {			/* x > 0 */
-	    if(esx>esy||((esx==esy) && (hx>hy||((hx==hy)&&(lx>ly))))) {
-	      /* x > y, x -= ulp */
-		if(lx==0) {
-		    if (ix != 0 && hx == 0x80000000) hx = 0;
-		    if (hx==0) esx -= 1;
-		    hx -= 1;
-		}
-		lx -= 1;
-	    } else {				/* x < y, x += ulp */
-		lx += 1;
-		if(lx==0) {
-		    hx += 1;
-		    if (hx==0) {
-			hx = 0x80000000;
-			esx += 1;
-		    }
-		}
-	    }
-	} else {				/* x < 0 */
-	    if(esy>=0||esx>esy||((esx==esy) && (hx>hy||((hx==hy)&&(lx>ly))))){
-	      /* x < y, x -= ulp */
-		if(lx==0) {
-		    if (ix != 0 && hx == 0x80000000) hx = 0;
-		    if (hx==0) esx -= 1;
-		    hx -= 1;
-		}
-		lx -= 1;
-	    } else {				/* x > y, x += ulp */
-		lx += 1;
-		if(lx==0) {
-		    hx += 1;
-		    if (hx==0) {
-			hx = 0x80000000;
-			esx += 1;
-		    }
-		}
-	    }
-	}
-	esy = esx&0x7fff;
-	if(esy==0x7fff) return x+x;	/* overflow  */
-	if(esy==0 && (hx & 0x80000000) == 0) { /* underflow */
-	    y = x*x;
-	    if(y!=x) {		/* raise underflow flag */
-	        SET_LDOUBLE_WORDS(y,esx,hx,lx);
-		return y;
-	    }
-	}
-	SET_LDOUBLE_WORDS(x,esx,hx,lx);
-	return x;
-}
-weak_alias (__nextafterl, nextafterl)
-strong_alias (__nextafterl, __nexttowardl)
-weak_alias (__nextafterl, nexttowardl)
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_remquo.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_remquo.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_remquo.c	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_remquo.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,48 +0,0 @@
-/* Compute remainder and a congruent to the quotient.  m68k fpu version
-   Copyright (C) 1997 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Andreas Schwab <schwab@issan.informatik.uni-dortmund.de>
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <math.h>
-
-#ifndef SUFF
-#define SUFF
-#endif
-#ifndef float_type
-#define float_type double
-#endif
-
-#define CONCATX(a,b) __CONCAT(a,b)
-#define s(name) CONCATX(name,SUFF)
-
-float_type
-s(__remquo) (float_type x, float_type y, int *quo)
-{
-  float_type result;
-  int cquo, fpsr;
-
-  __asm ("frem%.x %2,%0\n\tfmove%.l %/fpsr,%1"
-	 : "=f" (result), "=dm" (fpsr) : "f" (y), "0" (x));
-  cquo = (fpsr >> 16) & 0x7f;
-  if (fpsr & (1 << 23))
-    cquo = -cquo;
-  *quo = cquo;
-  return result;
-}
-#define weak_aliasx(a,b) weak_alias(a,b)
-weak_aliasx (s(__remquo), s(remquo))
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_remquof.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_remquof.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_remquof.c	1997-04-17 17:04:17.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_remquof.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define SUFF f
-#define float_type float
-#include <s_remquo.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_remquol.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_remquol.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_remquol.c	1997-04-17 17:04:34.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_remquol.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define SUFF l
-#define float_type long double
-#include <s_remquo.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_rint.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_rint.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_rint.c	1996-03-16 22:32:08.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_rint.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	rint
-#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_rintf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_rintf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_rintf.c	1996-03-16 22:32:03.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_rintf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	rintf
-#include <s_atanf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_rintl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_rintl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_rintl.c	1996-06-06 07:22:27.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_rintl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC rintl
-#include <s_atanl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_scalbln.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_scalbln.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_scalbln.c	1997-10-26 20:58:52.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_scalbln.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-/* Nothing to do.  This function is the same as scalbn.  So we define an
-   alias.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_scalblnf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_scalblnf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_scalblnf.c	1997-10-26 20:58:55.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_scalblnf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-/* Nothing to do.  This function is the same as scalbnf.  So we define an
-   alias.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_scalblnl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_scalblnl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_scalblnl.c	1997-10-26 20:58:56.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_scalblnl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-/* Nothing to do.  This function is the same as scalbnl.  So we define an
-   alias.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_scalbn.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_scalbn.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_scalbn.c	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_scalbn.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,54 +0,0 @@
-/* Copyright (C) 1996, 1997 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#define scalbln __no_scalbln_decl
-#define scalblnf __no_scalblnf_decl
-#define scalblnl __no_scalblnl_decl
-#define __scalbln __no__scalbln_decl
-#define __scalblnf __no__scalblnf_decl
-#define __scalblnl __no__scalblnl_decl
-#include <math.h>
-#undef scalbln
-#undef scalblnf
-#undef scalblnl
-#undef __scalbln
-#undef __scalblnf
-#undef __scalblnl
-
-#ifndef suffix
-#define suffix /*empty*/
-#endif
-#ifndef float_type
-#define float_type double
-#endif
-
-#define __CONCATX(a,b) __CONCAT(a,b)
-
-float_type
-__CONCATX(__scalbn,suffix) (x, exp)
-     float_type x;
-     int exp;
-{
-  return __m81_u(__CONCATX(__scalbn,suffix))(x, exp);
-}
-
-#define weak_aliasx(a,b) weak_alias(a,b)
-#define strong_aliasx(a,b) strong_alias(a,b)
-weak_aliasx (__CONCATX(__scalbn,suffix), __CONCATX(scalbn,suffix))
-strong_aliasx (__CONCATX(__scalbn,suffix), __CONCATX(__scalbln,suffix))
-weak_aliasx (__CONCATX(__scalbn,suffix), __CONCATX(scalbln,suffix))
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_scalbnf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_scalbnf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_scalbnf.c	1997-10-26 20:59:06.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_scalbnf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define suffix f
-#define float_type float
-#include <s_scalbn.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_scalbnl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_scalbnl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_scalbnl.c	1997-10-26 20:59:09.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_scalbnl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define suffix l
-#define float_type long double
-#include <s_scalbn.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_significand.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_significand.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_significand.c	1996-03-16 22:31:07.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_significand.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	significand
-#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_significandf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_significandf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_significandf.c	1996-03-16 22:32:30.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_significandf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	significandf
-#include <s_atanf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_significandl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_significandl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_significandl.c	1996-06-06 07:21:58.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_significandl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC significandl
-#include <s_atanl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_sin.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_sin.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_sin.c	1996-03-16 22:32:02.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_sin.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	sin
-#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_sincos.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_sincos.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_sincos.c	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_sincos.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,38 +0,0 @@
-/* Copyright (C) 1997 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <math.h>
-
-#ifndef FUNC
-#define FUNC sincos
-#endif
-#ifndef float_type
-#define float_type double
-#endif
-
-#define CONCATX(a,b) __CONCAT(a,b)
-
-void
-CONCATX(__,FUNC) (x, sinx, cosx)
-     float_type x, *sinx, *cosx;
-{
-  __m81_u(CONCATX(__,FUNC))(x, sinx, cosx);
-}
-
-#define weak_aliasx(a,b) weak_alias(a,b)
-weak_aliasx (CONCATX(__,FUNC), FUNC)
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_sincosf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_sincosf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_sincosf.c	1997-04-21 13:37:48.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_sincosf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define FUNC sincosf
-#define float_type float
-#include <s_sincos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_sincosl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_sincosl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_sincosl.c	1997-04-21 13:38:01.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_sincosl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-#define FUNC sincosl
-#define float_type long double
-#include <s_sincos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_sinf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_sinf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_sinf.c	1996-03-16 22:31:25.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_sinf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	sinf
-#include <s_atanf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_sinl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_sinl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_sinl.c	1996-06-06 07:22:12.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_sinl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC sinl
-#include <s_atanl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_tan.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_tan.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_tan.c	1996-03-16 22:31:31.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_tan.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	tan
-#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_tanf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_tanf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_tanf.c	1996-03-16 22:32:07.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_tanf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	tanf
-#include <s_atanf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_tanh.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_tanh.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_tanh.c	1996-03-16 22:31:48.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_tanh.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	tanh
-#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_tanhf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_tanhf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_tanhf.c	1996-03-16 22:31:41.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_tanhf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC	tanhf
-#include <s_atanf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_tanhl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_tanhl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_tanhl.c	1996-06-06 07:22:16.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_tanhl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC tanhl
-#include <s_atanl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_tanl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_tanl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_tanl.c	1996-06-06 07:21:51.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_tanl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define FUNC tanl
-#include <s_atanl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_trunc.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_trunc.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_trunc.c	1997-04-02 16:46:33.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_trunc.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC trunc
-#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_truncf.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_truncf.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_truncf.c	1997-04-02 16:46:42.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_truncf.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC truncf
-#include <s_atanf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/s_truncl.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_truncl.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/s_truncl.c	1997-04-02 16:46:54.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/s_truncl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define	FUNC truncl
-#include <s_atanl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/switch/68881-sw.h glibc-ports-2.5-cs/sysdeps/m68k/fpu/switch/68881-sw.h
--- glibc-ports-2.5/sysdeps/m68k/fpu/switch/68881-sw.h	2001-07-06 06:55:56.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/switch/68881-sw.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,64 +0,0 @@
-/* Copyright (C) 1991, 1992, 1997, 2000 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#ifndef	_68881_SWITCH_H
-
-#define	_68881_SWITCH_H	1
-#include <sys/cdefs.h>
-
-/* This is the format of the data at the code label for a function which
-   wants to switch depending on whether or not a 68881 is present.
-
-   Initially, `insn' is a `jsr' instruction, and `target' is __68881_switch.
-   The first time such a function is called, __68881_switch determines whether
-   or not a 68881 is present, and modifies the function accordingly.
-   Then `insn' is a `jmp' instruction, and `target' is the value of `fpu'
-   if there is 68881, or the value of `soft' if not.  */
-
-struct switch_caller
-  {
-    unsigned short int insn;	/* The `jsr' or `jmp' instruction.  */
-    void *target;		/* The target of the instruction.  */
-    void *soft;			/* The address of the soft function.  */
-    void *fpu;			/* The address of the 68881 function.  */
-  };
-
-/* These are opcodes (values for `insn', above) for `jmp' and `jsr'
-   instructions, respectively, to 32-bit absolute addresses.  */
-#define	JMP	0x4ef9
-#define	JSR	0x4eb9
-
-
-/* Function to determine whether or not a 68881 is available,
-   and modify its caller (which must be a `struct switch_caller', above,
-   in data space) to use the appropriate version.  */
-extern void __68881_switch (int __dummy) __THROW;
-
-
-/* Define FUNCTION as a `struct switch_caller' which will call
-   `__FUNCTION_68881' if a 68881 is present, and `__FUNCTION_soft' if not.
-#define	switching_function(FUNCTION)					      \
-  struct switch_caller FUNCTION =					      \
-    {									      \
-      JSR, (__ptr_t) __68881_switch,					      \
-      __CONCAT(__CONCAT(__,FUNCTION),_soft),				      \
-      __CONCAT(__CONCAT(__,FUNCTION),_68881)				      \
-    }
-
-
-#endif	/* 68881-switch.h  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/switch/bits/mathinline.h glibc-ports-2.5-cs/sysdeps/m68k/fpu/switch/bits/mathinline.h
--- glibc-ports-2.5/sysdeps/m68k/fpu/switch/bits/mathinline.h	1997-06-21 04:34:13.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/switch/bits/mathinline.h	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-/* We don't want any inlines when we might not have a 68881.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/switch/Makefile glibc-ports-2.5-cs/sysdeps/m68k/fpu/switch/Makefile
--- glibc-ports-2.5/sysdeps/m68k/fpu/switch/Makefile	2001-07-06 06:55:56.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/switch/Makefile	1970-01-01 01:00:00.000000000 +0100
@@ -1,51 +0,0 @@
-# Copyright (C) 1991, 1992, 1997 Free Software Foundation, Inc.
-# This file is part of the GNU C Library.
-
-# The GNU C Library is free software; you can redistribute it and/or
-# modify it under the terms of the GNU Lesser General Public
-# License as published by the Free Software Foundation; either
-# version 2.1 of the License, or (at your option) any later version.
-
-# The GNU C Library is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-# Lesser General Public License for more details.
-
-# You should have received a copy of the GNU Lesser General Public
-# License along with the GNU C Library; if not, write to the Free
-# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-# 02111-1307 USA.
-
-ifeq ($(subdir),math)
-
-sysdep_routines := $(sysdep_routines) switch
-
-# Find all the sources that have 68881 versions.
-+68881-sources := \
-  $(notdir $(wildcard $(addprefix $(filter %/fpu,$(sysdirs)),$(sources))))
-
-# Sysdep directories other than fpu and fpu/switch (this one).
-+non68881-dirs := $(filter-out %/fpu %/fpu/switch,$(+sysdep_dirs))
-
-# Get a non-68881 version of the target.
-+non68881-version = $(firstword $(wildcard $(addsuffix /$@,$(+non68881-dirs))))
-
-# Directory containing 68881 sources.
-+68881-dir := $(filter %/fpu,$(+sysdep_dirs))
-
-# For all the files that have 68881 versions and don't exist already in
-# the source directory (math), automatically make ones that switch between
-# 68881 and soft versions.
-$(addprefix $(objpfx), \
-	    $(filter-out $(wildcard $(+68881-sources)),$(+68881-sources))):
-	(echo '#include <68881-sw.h>'		;\
-	 echo '#define $* __$*_68881'		;\
-	 echo '#include <$(+68881-dir)/$@>'	;\
-	 echo '#undef $*'			;\
-	 echo '#define $* __$*_soft'		;\
-	 echo '#include <$(non68881-version)>'	;\
-	 echo '#undef $*'			;\
-	 echo 'switching_function($*);') > $@-tmp
-	mv $@-tmp $@
-
-endif
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/switch/switch.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/switch/switch.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/switch/switch.c	2001-07-06 06:55:56.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/switch/switch.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,87 +0,0 @@
-/* Copyright (C) 1991, 1992, 1997 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <signal.h>
-#include <68881-sw.h>
-
-
-/* The signal that is sent when a 68881 instruction
-   is executed and there is no 68881.  */
-#ifndef	TRAPSIG
-#define	TRAPSIG	SIGILL
-#endif
-
-/* Zero if no 68881, one if we have a 68881, or -1 if we don't know yet.  */
-static int have_fpu = -1;
-
-
-/* Signal handler for the trap that happens if we don't have a 68881.  */
-static void
-trap (sig)
-     int sig;
-{
-  have_fpu = 0;
-}
-
-/* This function is called by functions that want to switch.
-   The calling function must be a `struct switch_caller' in data space.
-   It determines whether a 68881 is present, and modifies its caller
-   to be a static jump to either the 68881 version or the soft version.
-   It then returns into the function it has chosen to do the work.  */
-void
-__68881_switch (dummy)
-     int dummy;
-{
-  void **return_address_location = &((void **) &dummy)[-1];
-  struct switch_caller *const caller
-    = (struct switch_caller *) (((short int *) *return_address_location) - 1);
-
-  if (have_fpu < 0)
-    {
-      /* Figure out whether or not we have a 68881.  */
-      __sighandler_t handler = signal (TRAPSIG, trap);
-      if (handler == SIG_ERR)
-	/* We can't figure it out, so assume we don't have a 68881.
-	   This assumption will never cause us any problems other than
-	   lost performance, while the reverse assumption could cause
-	   the program to crash.  */
-	have_fpu = 0;
-      else
-	{
-	  /* We set `have_fpu' to nonzero, and then execute a 68881
-	     no-op instruction.  If we have a 68881, this will do nothing.
-	     If we don't have one, this will trap and the signal handler
-	     will clear `have_fpu'.  */
-	  have_fpu = 1;
-	  asm ("fnop");
-
-	  /* Restore the old signal handler.  */
-	  (void) signal (TRAPSIG, handler);
-	}
-    }
-
-  /* Modify the caller to be a jump to the appropriate address.  */
-  caller->insn = JMP;
-  caller->target = have_fpu ? caller->fpu : caller->soft;
-
-  /* Make the address we will return to be the target we have chosen.
-     Our return will match the `jsr' done by the caller we have
-     just modified, and it will be just as if that had instead
-     been a `jmp' to the new target.  */
-  *return_address_location = caller->target;
-}
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu/t_exp.c glibc-ports-2.5-cs/sysdeps/m68k/fpu/t_exp.c
--- glibc-ports-2.5/sysdeps/m68k/fpu/t_exp.c	1998-02-18 02:32:32.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu/t_exp.c	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-/* Empty.  Not needed. */
diff -Naur glibc-ports-2.5/sysdeps/m68k/fpu_control.h glibc-ports-2.5-cs/sysdeps/m68k/fpu_control.h
--- glibc-ports-2.5/sysdeps/m68k/fpu_control.h	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/fpu_control.h	2007-03-27 15:01:23.000000000 +0200
@@ -30,9 +30,9 @@
  * 12     -> enable trap for OVFL exception
  * 11     -> enable trap for UNFL exception
  * 10     -> enable trap for DZ exception
- *  9     -> enable trap for INEX2 exception
- *  8     -> enable trap for INEX1 exception
- *  7-6   -> Precision Control
+ *  9     -> enable trap for INEX2 exception (INEX on Coldfire)
+ *  8     -> enable trap for INEX1 exception (IDE on Coldfire)
+ *  7-6   -> Precision Control (only bit 6 is used on Coldfire)
  *  5-4   -> Rounding Control
  *  3-0   -> zero (read as 0, write as 0)
  *
@@ -54,6 +54,15 @@
 
 #include <features.h>
 
+#if defined (__mcoldfire__) && !defined (__mcffpu__)
+
+#define _FPU_RESERVED 0xffffffff
+#define _FPU_DEFAULT  0x00000000
+#define _FPU_GETCW(cw) ((cw) = 0)
+#define _FPU_SETCW(cw) ((void)(cw))
+
+#else
+
 /* masking of interrupts */
 #define _FPU_MASK_BSUN  0x8000
 #define _FPU_MASK_SNAN  0x4000
@@ -65,8 +74,12 @@
 #define _FPU_MASK_INEX2 0x0100
 
 /* precision control */
+#ifdef __mcoldfire__
+#define _FPU_DOUBLE   0x00
+#else
 #define _FPU_EXTENDED 0x00   /* RECOMMENDED */
 #define _FPU_DOUBLE   0x80
+#endif
 #define _FPU_SINGLE   0x40     /* DO NOT USE */
 
 /* rounding control */
@@ -75,7 +88,11 @@
 #define _FPU_RC_DOWN    0x20
 #define _FPU_RC_UP      0x30
 
+#ifdef __mcoldfire__
+#define _FPU_RESERVED 0xFFFF800F
+#else
 #define _FPU_RESERVED 0xFFFF000F  /* Reserved bits in fpucr */
+#endif
 
 
 /* Now two recommended fpucr */
@@ -88,14 +105,14 @@
    that __setfpucw works.  This bit will be ignored.  */
 #define _FPU_IEEE     0x00000001
 
-/* Type of the control word.  */
-typedef unsigned int fpu_control_t __attribute__ ((__mode__ (__SI__)));
-
 /* Macros for accessing the hardware control word.  */
 #define _FPU_GETCW(cw) __asm__ ("fmove%.l %!, %0" : "=dm" (cw))
 #define _FPU_SETCW(cw) __asm__ volatile ("fmove%.l %0, %!" : : "dm" (cw))
+#endif
+
+/* Type of the control word.  */
+typedef unsigned int fpu_control_t __attribute__ ((__mode__ (__SI__)));
 
 /* Default control word set at startup.  */
 extern fpu_control_t __fpu_control;
-
 #endif /* _M68K_FPU_CONTROL_H */
diff -Naur glibc-ports-2.5/sysdeps/m68k/Implies glibc-ports-2.5-cs/sysdeps/m68k/Implies
--- glibc-ports-2.5/sysdeps/m68k/Implies	2000-09-17 00:59:10.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/Implies	2007-03-27 15:01:22.000000000 +0200
@@ -1,5 +1,4 @@
 wordsize-32
 # 68k uses IEEE 754 floating point.
-ieee754/ldbl-96
 ieee754/dbl-64
 ieee754/flt-32
diff -Naur glibc-ports-2.5/sysdeps/m68k/ldsodefs.h glibc-ports-2.5-cs/sysdeps/m68k/ldsodefs.h
--- glibc-ports-2.5/sysdeps/m68k/ldsodefs.h	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/ldsodefs.h	2007-03-27 15:01:22.000000000 +0200
@@ -0,0 +1,43 @@
+/* Run-time dynamic linker data structures for loaded ELF shared objects.
+   Copyright (C) 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#ifndef __LDSODEFS_H
+
+#include <elf.h>
+
+struct La_m68k_regs;
+struct La_m68k_retval;
+
+#define ARCH_PLTENTER_MEMBERS						\
+    Elf32_Addr (*m68k_gnu_pltenter) (Elf32_Sym *, unsigned int,		\
+				     uintptr_t *, uintptr_t *,		\
+				     const struct La_m68k_regs *,	\
+				     unsigned int *, const char *name,  \
+				     long int *framesizep);
+
+#define ARCH_PLTEXIT_MEMBERS						\
+    unsigned int (*m68k_gnu_pltexit) (Elf32_Sym *, unsigned int,	\
+				      uintptr_t *, uintptr_t *,		\
+				      const struct La_m68k_regs *,	\
+				      struct La_m68k_retval *,		\
+				      const char *);
+
+#include_next <ldsodefs.h>
+
+#endif
diff -Naur glibc-ports-2.5/sysdeps/m68k/__longjmp.c glibc-ports-2.5-cs/sysdeps/m68k/__longjmp.c
--- glibc-ports-2.5/sysdeps/m68k/__longjmp.c	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/__longjmp.c	2007-03-27 15:01:22.000000000 +0200
@@ -31,6 +31,9 @@
   /* Restore the floating-point registers.  */
   asm volatile("fmovem%.x %0, %/fp0-%/fp7" :
 	       /* No outputs.  */ : "g" (env[0].__fpregs[0]));
+#elif defined (__mcffpu__)
+  asm volatile("fmovem %0, %/fp0-%/fp7" :
+	       /* No outputs.  */ : "m" (env[0].__fpregs[0]));
 #endif
 
   /* Put VAL in D0.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/lshift.S glibc-ports-2.5-cs/sysdeps/m68k/lshift.S
--- glibc-ports-2.5/sysdeps/m68k/lshift.S	2001-07-07 12:13:13.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/lshift.S	1970-01-01 01:00:00.000000000 +0100
@@ -1,147 +0,0 @@
-/* mc68020 __mpn_lshift -- Shift left a low-level natural-number integer.
-
-Copyright (C) 1996, 1998 Free Software Foundation, Inc.
-
-This file is part of the GNU MP Library.
-
-The GNU MP Library is free software; you can redistribute it and/or modify
-it under the terms of the GNU Lesser General Public License as published by
-the Free Software Foundation; either version 2.1 of the License, or (at your
-option) any later version.
-
-The GNU MP Library is distributed in the hope that it will be useful, but
-WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
-or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
-License for more details.
-
-You should have received a copy of the GNU Lesser General Public License
-along with the GNU MP Library; see the file COPYING.LIB.  If not, write to
-the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
-MA 02111-1307, USA. */
-
-/*
-  INPUT PARAMETERS
-  res_ptr	(sp + 4)
-  s_ptr		(sp + 8)
-  s_size	(sp + 16)
-  cnt		(sp + 12)
-*/
-
-#include "sysdep.h"
-#include "asm-syntax.h"
-
-#define res_ptr a1
-#define s_ptr a0
-#define s_size d6
-#define cnt d4
-
-	TEXT
-ENTRY(__mpn_lshift)
-
-/* Save used registers on the stack.  */
-	moveml	R(d2)-R(d6)/R(a2),MEM_PREDEC(sp)
-
-/* Copy the arguments to registers.  */
-	movel	MEM_DISP(sp,28),R(res_ptr)
-	movel	MEM_DISP(sp,32),R(s_ptr)
-	movel	MEM_DISP(sp,36),R(s_size)
-	movel	MEM_DISP(sp,40),R(cnt)
-
-	moveql	#1,R(d5)
-	cmpl	R(d5),R(cnt)
-	bne	L(Lnormal)
-	cmpl	R(s_ptr),R(res_ptr)
-	bls	L(Lspecial)		/* jump if s_ptr >= res_ptr */
-#if (defined (__mc68020__) || defined (__NeXT__) || defined(mc68020))
-	lea	MEM_INDX1(s_ptr,s_size,l,4),R(a2)
-#else /* not mc68020 */
-	movel	R(s_size),R(d0)
-	asll	#2,R(d0)
-	lea	MEM_INDX(s_ptr,d0,l),R(a2)
-#endif
-	cmpl	R(res_ptr),R(a2)
-	bls	L(Lspecial)		/* jump if res_ptr >= s_ptr + s_size */
-
-L(Lnormal:)
-	moveql	#32,R(d5)
-	subl	R(cnt),R(d5)
-
-#if (defined (__mc68020__) || defined (__NeXT__) || defined(mc68020))
-	lea	MEM_INDX1(s_ptr,s_size,l,4),R(s_ptr)
-	lea	MEM_INDX1(res_ptr,s_size,l,4),R(res_ptr)
-#else /* not mc68000 */
-	movel	R(s_size),R(d0)
-	asll	#2,R(d0)
-	addl	R(s_size),R(s_ptr)
-	addl	R(s_size),R(res_ptr)
-#endif
-	movel	MEM_PREDEC(s_ptr),R(d2)
-	movel	R(d2),R(d0)
-	lsrl	R(d5),R(d0)		/* compute carry limb */
-
-	lsll	R(cnt),R(d2)
-	movel	R(d2),R(d1)
-	subql	#1,R(s_size)
-	beq	L(Lend)
-	lsrl	#1,R(s_size)
-	bcs	L(L1)
-	subql	#1,R(s_size)
-
-L(Loop:)
-	movel	MEM_PREDEC(s_ptr),R(d2)
-	movel	R(d2),R(d3)
-	lsrl	R(d5),R(d3)
-	orl	R(d3),R(d1)
-	movel	R(d1),MEM_PREDEC(res_ptr)
-	lsll	R(cnt),R(d2)
-L(L1:)
-	movel	MEM_PREDEC(s_ptr),R(d1)
-	movel	R(d1),R(d3)
-	lsrl	R(d5),R(d3)
-	orl	R(d3),R(d2)
-	movel	R(d2),MEM_PREDEC(res_ptr)
-	lsll	R(cnt),R(d1)
-
-	dbf	R(s_size),L(Loop)
-	subl	#0x10000,R(s_size)
-	bcc	L(Loop)
-
-L(Lend:)
-	movel	R(d1),MEM_PREDEC(res_ptr) /* store least significant limb */
-
-/* Restore used registers from stack frame.  */
-	moveml	MEM_POSTINC(sp),R(d2)-R(d6)/R(a2)
-	rts
-
-/* We loop from least significant end of the arrays, which is only
-   permissible if the source and destination don't overlap, since the
-   function is documented to work for overlapping source and destination.  */
-
-L(Lspecial:)
-	clrl	R(d0)			/* initialize carry */
-	eorw	#1,R(s_size)
-	lsrl	#1,R(s_size)
-	bcc	L(LL1)
-	subql	#1,R(s_size)
-
-L(LLoop:)
-	movel	MEM_POSTINC(s_ptr),R(d2)
-	addxl	R(d2),R(d2)
-	movel	R(d2),MEM_POSTINC(res_ptr)
-L(LL1:)
-	movel	MEM_POSTINC(s_ptr),R(d2)
-	addxl	R(d2),R(d2)
-	movel	R(d2),MEM_POSTINC(res_ptr)
-
-	dbf	R(s_size),L(LLoop)
-	addxl	R(d0),R(d0)		/* save cy in lsb */
-	subl	#0x10000,R(s_size)
-	bcs	L(LLend)
-	lsrl	#1,R(d0)		/* restore cy */
-	bra	L(LLoop)
-
-L(LLend:)
-/* Restore used registers from stack frame.  */
-	moveml	MEM_POSTINC(sp),R(d2)-R(d6)/R(a2)
-	rts
-END(__mpn_lshift)
diff -Naur glibc-ports-2.5/sysdeps/m68k/m68020/addmul_1.S glibc-ports-2.5-cs/sysdeps/m68k/m68020/addmul_1.S
--- glibc-ports-2.5/sysdeps/m68k/m68020/addmul_1.S	2001-07-07 12:13:15.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/m68020/addmul_1.S	1970-01-01 01:00:00.000000000 +0100
@@ -1,80 +0,0 @@
-/* mc68020 __mpn_addmul_1 -- Multiply a limb vector with a limb and add
-   the result to a second limb vector.
-
-Copyright (C) 1992, 1994, 1996, 1998 Free Software Foundation, Inc.
-
-This file is part of the GNU MP Library.
-
-The GNU MP Library is free software; you can redistribute it and/or modify
-it under the terms of the GNU Lesser General Public License as published by
-the Free Software Foundation; either version 2.1 of the License, or (at your
-option) any later version.
-
-The GNU MP Library is distributed in the hope that it will be useful, but
-WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
-or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
-License for more details.
-
-You should have received a copy of the GNU Lesser General Public License
-along with the GNU MP Library; see the file COPYING.LIB.  If not, write to
-the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
-MA 02111-1307, USA. */
-
-/*
-  INPUT PARAMETERS
-  res_ptr	(sp + 4)
-  s1_ptr	(sp + 8)
-  s1_size	(sp + 12)
-  s2_limb	(sp + 16)
-*/
-
-#include "sysdep.h"
-#include "asm-syntax.h"
-
-	TEXT
-ENTRY(__mpn_addmul_1)
-
-#define res_ptr a0
-#define s1_ptr a1
-#define s1_size d2
-#define s2_limb d4
-
-/* Save used registers on the stack.  */
-	moveml	R(d2)-R(d5),MEM_PREDEC(sp)
-
-/* Copy the arguments to registers.  Better use movem?  */
-	movel	MEM_DISP(sp,20),R(res_ptr)
-	movel	MEM_DISP(sp,24),R(s1_ptr)
-	movel	MEM_DISP(sp,28),R(s1_size)
-	movel	MEM_DISP(sp,32),R(s2_limb)
-
-	eorw	#1,R(s1_size)
-	clrl	R(d1)
-	clrl	R(d5)
-	lsrl	#1,R(s1_size)
-	bcc	L(L1)
-	subql	#1,R(s1_size)
-	subl	R(d0),R(d0)		/* (d0,cy) <= (0,0) */
-
-L(Loop:)
-	movel	MEM_POSTINC(s1_ptr),R(d3)
-	mulul	R(s2_limb),R(d1):R(d3)
-	addxl	R(d0),R(d3)
-	addxl	R(d5),R(d1)
-	addl	R(d3),MEM_POSTINC(res_ptr)
-L(L1:)	movel	MEM_POSTINC(s1_ptr),R(d3)
-	mulul	R(s2_limb),R(d0):R(d3)
-	addxl	R(d1),R(d3)
-	addxl	R(d5),R(d0)
-	addl	R(d3),MEM_POSTINC(res_ptr)
-
-	dbf	R(s1_size),L(Loop)
-	addxl	R(d5),R(d0)
-	subl	#0x10000,R(s1_size)
-	bcc	L(Loop)
-
-/* Restore used registers from stack frame.  */
-	moveml	MEM_POSTINC(sp),R(d2)-R(d5)
-
-	rts
-END(__mpn_addmul_1)
diff -Naur glibc-ports-2.5/sysdeps/m68k/m68020/bits/atomic.h glibc-ports-2.5-cs/sysdeps/m68k/m68020/bits/atomic.h
--- glibc-ports-2.5/sysdeps/m68k/m68020/bits/atomic.h	2004-05-23 12:22:47.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/m68020/bits/atomic.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,254 +0,0 @@
-/* Copyright (C) 2003, 2004 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Andreas Schwab <schwab@suse.de>, 2003.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <stdint.h>
-
-
-typedef int8_t atomic8_t;
-typedef uint8_t uatomic8_t;
-typedef int_fast8_t atomic_fast8_t;
-typedef uint_fast8_t uatomic_fast8_t;
-
-typedef int16_t atomic16_t;
-typedef uint16_t uatomic16_t;
-typedef int_fast16_t atomic_fast16_t;
-typedef uint_fast16_t uatomic_fast16_t;
-
-typedef int32_t atomic32_t;
-typedef uint32_t uatomic32_t;
-typedef int_fast32_t atomic_fast32_t;
-typedef uint_fast32_t uatomic_fast32_t;
-
-typedef int64_t atomic64_t;
-typedef uint64_t uatomic64_t;
-typedef int_fast64_t atomic_fast64_t;
-typedef uint_fast64_t uatomic_fast64_t;
-
-typedef intptr_t atomicptr_t;
-typedef uintptr_t uatomicptr_t;
-typedef intmax_t atomic_max_t;
-typedef uintmax_t uatomic_max_t;
-
-#define __arch_compare_and_exchange_val_8_acq(mem, newval, oldval) \
-  ({ __typeof (*(mem)) __ret;						      \
-     __asm __volatile ("cas%.b %0,%2,%1"				      \
-		       : "=d" (__ret), "+m" (*(mem))			      \
-		       : "d" (newval), "0" (oldval));			      \
-     __ret; })
-
-#define __arch_compare_and_exchange_val_16_acq(mem, newval, oldval) \
-  ({ __typeof (*(mem)) __ret;						      \
-     __asm __volatile ("cas%.w %0,%2,%1"				      \
-		       : "=d" (__ret), "+m" (*(mem))			      \
-		       : "d" (newval), "0" (oldval));			      \
-     __ret; })
-
-#define __arch_compare_and_exchange_val_32_acq(mem, newval, oldval) \
-  ({ __typeof (*(mem)) __ret;						      \
-     __asm __volatile ("cas%.l %0,%2,%1"				      \
-		       : "=d" (__ret), "+m" (*(mem))			      \
-		       : "d" (newval), "0" (oldval));			      \
-     __ret; })
-
-# define __arch_compare_and_exchange_val_64_acq(mem, newval, oldval) \
-  ({ __typeof (*(mem)) __ret;						      \
-     __typeof (mem) __memp = (mem);					      \
-     __asm __volatile ("cas2%.l %0:%R0,%1:%R1,(%2):(%3)"		      \
-		       : "=d" (__ret)					      \
-		       : "d" (newval), "r" (__memp),			      \
-			 "r" ((char *) __memp + 4), "0" (oldval)	      \
-		       : "memory");					      \
-     __ret; })
-
-#define atomic_exchange_acq(mem, newvalue) \
-  ({ __typeof (*(mem)) __result = *(mem);				      \
-     if (sizeof (*(mem)) == 1)						      \
-       __asm __volatile ("1: cas%.b %0,%2,%1;"				      \
-			 "   jbne 1b"					      \
-			 : "=d" (__result), "+m" (*(mem))		      \
-			 : "d" (newvalue), "0" (__result));		      \
-     else if (sizeof (*(mem)) == 2)					      \
-       __asm __volatile ("1: cas%.w %0,%2,%1;"				      \
-			 "   jbne 1b"					      \
-			 : "=d" (__result), "+m" (*(mem))		      \
-			 : "d" (newvalue), "0" (__result));		      \
-     else if (sizeof (*(mem)) == 4)					      \
-       __asm __volatile ("1: cas%.l %0,%2,%1;"				      \
-			 "   jbne 1b"					      \
-			 : "=d" (__result), "+m" (*(mem))		      \
-			 : "d" (newvalue), "0" (__result));		      \
-     else								      \
-       {								      \
-	 __typeof (mem) __memp = (mem);					      \
-	 __asm __volatile ("1: cas2%.l %0:%R0,%1:%R1,(%2):(%3);"	      \
-			   "   jbne 1b"					      \
-			   : "=d" (__result)				      \
-			   : "d" (newvalue), "r" (__memp),		      \
-			     "r" ((char *) __memp + 4), "0" (__result)	      \
-			   : "memory");					      \
-       }								      \
-     __result; })
-
-#define atomic_exchange_and_add(mem, value) \
-  ({ __typeof (*(mem)) __result = *(mem);				      \
-     __typeof (*(mem)) __temp;						      \
-     if (sizeof (*(mem)) == 1)						      \
-       __asm __volatile ("1: move%.b %0,%2;"				      \
-			 "   add%.b %3,%2;"				      \
-			 "   cas%.b %0,%2,%1;"				      \
-			 "   jbne 1b"					      \
-			 : "=d" (__result), "+m" (*(mem)),		      \
-			   "=&d" (__temp)				      \
-			 : "d" (value), "0" (__result));		      \
-     else if (sizeof (*(mem)) == 2)					      \
-       __asm __volatile ("1: move%.w %0,%2;"				      \
-			 "   add%.w %3,%2;"				      \
-			 "   cas%.w %0,%2,%1;"				      \
-			 "   jbne 1b"					      \
-			 : "=d" (__result), "+m" (*(mem)),		      \
-			   "=&d" (__temp)				      \
-			 : "d" (value), "0" (__result));		      \
-     else if (sizeof (*(mem)) == 4)					      \
-       __asm __volatile ("1: move%.l %0,%2;"				      \
-			 "   add%.l %3,%2;"				      \
-			 "   cas%.l %0,%2,%1;"				      \
-			 "   jbne 1b"					      \
-			 : "=d" (__result), "+m" (*(mem)),		      \
-			   "=&d" (__temp)				      \
-			 : "d" (value), "0" (__result));		      \
-     else								      \
-       {								      \
-	 __typeof (mem) __memp = (mem);					      \
-	 __asm __volatile ("1: move%.l %0,%1;"				      \
-			   "   move%.l %R0,%R1;"			      \
-			   "   add%.l %2,%1;"				      \
-			   "   addx%.l %R2,%R1;"			      \
-			   "   cas2%.l %0:%R0,%1:%R1,(%3):(%4);"	      \
-			   "   jbne 1b"					      \
-			   : "=d" (__result), "=&d" (__temp)		      \
-			   : "d" (value), "r" (__memp),			      \
-			     "r" ((char *) __memp + 4), "0" (__result)	      \
-			   : "memory");					      \
-       }								      \
-     __result; })
-
-#define atomic_add(mem, value) \
-  (void) ({ if (sizeof (*(mem)) == 1)					      \
-	      __asm __volatile ("add%.b %1,%0"				      \
-				: "+m" (*(mem))				      \
-				: "id" (value));			      \
-	    else if (sizeof (*(mem)) == 2)				      \
-	      __asm __volatile ("add%.w %1,%0"				      \
-				: "+m" (*(mem))				      \
-				: "id" (value));			      \
-	    else if (sizeof (*(mem)) == 4)				      \
-	      __asm __volatile ("add%.l %1,%0"				      \
-				: "+m" (*(mem))				      \
-				: "id" (value));			      \
-	    else							      \
-	      {								      \
-		__typeof (mem) __memp = (mem);				      \
-		__typeof (*(mem)) __oldval = *__memp;			      \
-		__typeof (*(mem)) __temp;				      \
-		__asm __volatile ("1: move%.l %0,%1;"			      \
-				  "   move%.l %R0,%R1;"			      \
-				  "   add%.l %2,%1;"			      \
-				  "   addx%.l %R2,%R1;"			      \
-				  "   cas2%.l %0:%R0,%1:%R1,(%3):(%4);"	      \
-				  "   jbne 1b"				      \
-				  : "=d" (__oldval), "=&d" (__temp)	      \
-				  : "d" (value), "r" (__memp),		      \
-				    "r" ((char *) __memp + 4), "0" (__oldval) \
-				  : "memory");				      \
-	      }								      \
-	    })
-
-#define atomic_increment_and_test(mem) \
-  ({ char __result;							      \
-     if (sizeof (*(mem)) == 1)						      \
-       __asm __volatile ("addq%.b %#1,%1; seq %0"			      \
-			 : "=dm" (__result), "+m" (*(mem)));		      \
-     else if (sizeof (*(mem)) == 2)					      \
-       __asm __volatile ("addq%.w %#1,%1; seq %0"			      \
-			 : "=dm" (__result), "+m" (*(mem)));		      \
-     else if (sizeof (*(mem)) == 4)					      \
-       __asm __volatile ("addq%.l %#1,%1; seq %0"			      \
-			 : "=dm" (__result), "+m" (*(mem)));		      \
-     else								      \
-       {								      \
-	 __typeof (mem) __memp = (mem);					      \
-	 __typeof (*(mem)) __oldval = *__memp;				      \
-	 __typeof (*(mem)) __temp;					      \
-	 __asm __volatile ("1: move%.l %1,%2;"				      \
-			   "   move%.l %R1,%R2;"			      \
-			   "   addq%.l %#1,%2;"				      \
-			   "   addx%.l %5,%R2;"				      \
-			   "   seq %0;"					      \
-			   "   cas2%.l %1:%R1,%2:%R2,(%3):(%4);"	      \
-			   "   jbne 1b"					      \
-			   : "=&dm" (__result), "=d" (__oldval),	      \
-			     "=&d" (__temp)				      \
-			   : "r" (__memp), "r" ((char *) __memp + 4),	      \
-			     "d" (0), "1" (__oldval)			      \
-			   : "memory");					      \
-       }								      \
-     __result; })
-
-#define atomic_decrement_and_test(mem) \
-  ({ char __result;							      \
-     if (sizeof (*(mem)) == 1)						      \
-       __asm __volatile ("subq%.b %#1,%1; seq %0"			      \
-			 : "=dm" (__result), "+m" (*(mem)));		      \
-     else if (sizeof (*(mem)) == 2)					      \
-       __asm __volatile ("subq%.w %#1,%1; seq %0"			      \
-			 : "=dm" (__result), "+m" (*(mem)));		      \
-     else if (sizeof (*(mem)) == 4)					      \
-       __asm __volatile ("subq%.l %#1,%1; seq %0"			      \
-			 : "=dm" (__result), "+m" (*(mem)));		      \
-     else								      \
-       {								      \
-	 __typeof (mem) __memp = (mem);					      \
-	 __typeof (*(mem)) __oldval = *__memp;				      \
-	 __typeof (*(mem)) __temp;					      \
-	 __asm __volatile ("1: move%.l %1,%2;"				      \
-			   "   move%.l %R1,%R2;"			      \
-			   "   subq%.l %#1,%2;"				      \
-			   "   subx%.l %5,%R2;"				      \
-			   "   seq %0;"					      \
-			   "   cas2%.l %1:%R1,%2:%R2,(%3):(%4);"	      \
-			   "   jbne 1b"					      \
-			   : "=&dm" (__result), "=d" (__oldval),	      \
-			     "=&d" (__temp)				      \
-			   : "r" (__memp), "r" ((char *) __memp + 4),	      \
-			     "d" (0), "1" (__oldval)			      \
-			   : "memory");					      \
-       }								      \
-     __result; })
-
-#define atomic_bit_set(mem, bit) \
-  __asm __volatile ("bfset %0{%1,#1}"					      \
-		    : "+m" (*(mem))					      \
-		    : "di" (sizeof (*(mem)) * 8 - (bit) - 1))
-
-#define atomic_bit_test_set(mem, bit) \
-  ({ char __result;							      \
-     __asm __volatile ("bfset %1{%2,#1}; sne %0"			      \
-		       : "=dm" (__result), "+m" (*(mem))		      \
-		       : "di" (sizeof (*(mem)) * 8 - (bit) - 1));	      \
-     __result; })
diff -Naur glibc-ports-2.5/sysdeps/m68k/m68020/bits/string.h glibc-ports-2.5-cs/sysdeps/m68k/m68020/bits/string.h
--- glibc-ports-2.5/sysdeps/m68k/m68020/bits/string.h	2001-07-06 06:55:56.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/m68020/bits/string.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,26 +0,0 @@
-/* Optimized, inlined string functions.  m680x0 version, x >= 2.
-   Copyright (C) 1997 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#ifndef _STRING_H
-# error "Never use <bits/string.h> directly; include <string.h> instead."
-#endif
-
-/* Currently the only purpose of this file is to tell the generic inline
-   macros that unaligned memory access is possible.  */
-#define _STRING_ARCH_unaligned	1
diff -Naur glibc-ports-2.5/sysdeps/m68k/m68020/Makefile glibc-ports-2.5-cs/sysdeps/m68k/m68020/Makefile
--- glibc-ports-2.5/sysdeps/m68k/m68020/Makefile	1997-08-27 22:03:43.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/m68020/Makefile	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-ifeq ($(subdir),db2)
-CPPFLAGS += -DHAVE_SPINLOCKS=1 -DHAVE_ASSEM_MC68020_GCC=1
-endif
diff -Naur glibc-ports-2.5/sysdeps/m68k/m68020/mul_1.S glibc-ports-2.5-cs/sysdeps/m68k/m68020/mul_1.S
--- glibc-ports-2.5/sysdeps/m68k/m68020/mul_1.S	2001-07-07 12:13:15.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/m68020/mul_1.S	1970-01-01 01:00:00.000000000 +0100
@@ -1,87 +0,0 @@
-/* mc68020 __mpn_mul_1 -- Multiply a limb vector with a limb and store
-   the result in a second limb vector.
-
-Copyright (C) 1992, 1994, 1996, 1998 Free Software Foundation, Inc.
-
-This file is part of the GNU MP Library.
-
-The GNU MP Library is free software; you can redistribute it and/or modify
-it under the terms of the GNU Lesser General Public License as published by
-the Free Software Foundation; either version 2.1 of the License, or (at your
-option) any later version.
-
-The GNU MP Library is distributed in the hope that it will be useful, but
-WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
-or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
-License for more details.
-
-You should have received a copy of the GNU Lesser General Public License
-along with the GNU MP Library; see the file COPYING.LIB.  If not, write to
-the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
-MA 02111-1307, USA. */
-
-/*
-  INPUT PARAMETERS
-  res_ptr	(sp + 4)
-  s1_ptr	(sp + 8)
-  s1_size	(sp + 12)
-  s2_limb	(sp + 16)
-*/
-
-#include "sysdep.h"
-#include "asm-syntax.h"
-
-	TEXT
-ENTRY(__mpn_mul_1)
-
-#define res_ptr a0
-#define s1_ptr a1
-#define s1_size d2
-#define s2_limb d4
-
-/* Save used registers on the stack.  */
-	moveml	R(d2)-R(d4),MEM_PREDEC(sp)
-#if 0
-	movel	R(d2),MEM_PREDEC(sp)
-	movel	R(d3),MEM_PREDEC(sp)
-	movel	R(d4),MEM_PREDEC(sp)
-#endif
-
-/* Copy the arguments to registers.  Better use movem?  */
-	movel	MEM_DISP(sp,16),R(res_ptr)
-	movel	MEM_DISP(sp,20),R(s1_ptr)
-	movel	MEM_DISP(sp,24),R(s1_size)
-	movel	MEM_DISP(sp,28),R(s2_limb)
-
-	eorw	#1,R(s1_size)
-	clrl	R(d1)
-	lsrl	#1,R(s1_size)
-	bcc	L(L1)
-	subql	#1,R(s1_size)
-	subl	R(d0),R(d0)	/* (d0,cy) <= (0,0) */
-
-L(Loop:)
-	movel	MEM_POSTINC(s1_ptr),R(d3)
-	mulul	R(s2_limb),R(d1):R(d3)
-	addxl	R(d0),R(d3)
-	movel	R(d3),MEM_POSTINC(res_ptr)
-L(L1:)	movel	MEM_POSTINC(s1_ptr),R(d3)
-	mulul	R(s2_limb),R(d0):R(d3)
-	addxl	R(d1),R(d3)
-	movel	R(d3),MEM_POSTINC(res_ptr)
-
-	dbf	R(s1_size),L(Loop)
-	clrl	R(d3)
-	addxl	R(d3),R(d0)
-	subl	#0x10000,R(s1_size)
-	bcc	L(Loop)
-
-/* Restore used registers from stack frame.  */
-	moveml	MEM_POSTINC(sp),R(d2)-R(d4)
-#if 0
-	movel	MEM_POSTINC(sp),R(d4)
-	movel	MEM_POSTINC(sp),R(d3)
-	movel	MEM_POSTINC(sp),R(d2)
-#endif
-	rts
-END(__mpn_mul_1)
diff -Naur glibc-ports-2.5/sysdeps/m68k/m68020/submul_1.S glibc-ports-2.5-cs/sysdeps/m68k/m68020/submul_1.S
--- glibc-ports-2.5/sysdeps/m68k/m68020/submul_1.S	2001-07-07 12:13:15.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/m68020/submul_1.S	1970-01-01 01:00:00.000000000 +0100
@@ -1,80 +0,0 @@
-/* mc68020 __mpn_submul_1 -- Multiply a limb vector with a limb and subtract
-   the result from a second limb vector.
-
-Copyright (C) 1992, 1994, 1996, 1998 Free Software Foundation, Inc.
-
-This file is part of the GNU MP Library.
-
-The GNU MP Library is free software; you can redistribute it and/or modify
-it under the terms of the GNU Lesser General Public License as published by
-the Free Software Foundation; either version 2.1 of the License, or (at your
-option) any later version.
-
-The GNU MP Library is distributed in the hope that it will be useful, but
-WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
-or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
-License for more details.
-
-You should have received a copy of the GNU Lesser General Public License
-along with the GNU MP Library; see the file COPYING.LIB.  If not, write to
-the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
-MA 02111-1307, USA. */
-
-/*
-  INPUT PARAMETERS
-  res_ptr	(sp + 4)
-  s1_ptr	(sp + 8)
-  s1_size	(sp + 12)
-  s2_limb	(sp + 16)
-*/
-
-#include "sysdep.h"
-#include "asm-syntax.h"
-
-	TEXT
-ENTRY(__mpn_submul_1)
-
-#define res_ptr a0
-#define s1_ptr a1
-#define s1_size d2
-#define s2_limb d4
-
-/* Save used registers on the stack.  */
-	moveml	R(d2)-R(d5),MEM_PREDEC(sp)
-
-/* Copy the arguments to registers.  Better use movem?  */
-	movel	MEM_DISP(sp,20),R(res_ptr)
-	movel	MEM_DISP(sp,24),R(s1_ptr)
-	movel	MEM_DISP(sp,28),R(s1_size)
-	movel	MEM_DISP(sp,32),R(s2_limb)
-
-	eorw	#1,R(s1_size)
-	clrl	R(d1)
-	clrl	R(d5)
-	lsrl	#1,R(s1_size)
-	bcc	L(L1)
-	subql	#1,R(s1_size)
-	subl	R(d0),R(d0)	/* (d0,cy) <= (0,0) */
-
-L(Loop:)
-	movel	MEM_POSTINC(s1_ptr),R(d3)
-	mulul	R(s2_limb),R(d1):R(d3)
-	addxl	R(d0),R(d3)
-	addxl	R(d5),R(d1)
-	subl	R(d3),MEM_POSTINC(res_ptr)
-L(L1:)	movel	MEM_POSTINC(s1_ptr),R(d3)
-	mulul	R(s2_limb),R(d0):R(d3)
-	addxl	R(d1),R(d3)
-	addxl	R(d5),R(d0)
-	subl	R(d3),MEM_POSTINC(res_ptr)
-
-	dbf	R(s1_size),L(Loop)
-	addxl	R(d5),R(d0)
-	subl	#0x10000,R(s1_size)
-	bcc	L(Loop)
-
-/* Restore used registers from stack frame.  */
-	moveml	MEM_POSTINC(sp),R(d2)-R(d5)
-
-	rts
-END(__mpn_submul_1)
diff -Naur glibc-ports-2.5/sysdeps/m68k/m68020/wordcopy.S glibc-ports-2.5-cs/sysdeps/m68k/m68020/wordcopy.S
--- glibc-ports-2.5/sysdeps/m68k/m68020/wordcopy.S	1998-03-23 03:18:31.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m68020/wordcopy.S	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-/* Empty, not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/add_n.S glibc-ports-2.5-cs/sysdeps/m68k/m680x0/add_n.S
--- glibc-ports-2.5/sysdeps/m68k/m680x0/add_n.S	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/add_n.S	2007-03-27 15:01:16.000000000 +0200
@@ -0,0 +1,76 @@
+/* mc68020 __mpn_add_n -- Add two limb vectors of the same length > 0 and store
+   sum in a third limb vector.
+
+Copyright (C) 1992, 1994, 1996, 1998 Free Software Foundation, Inc.
+
+This file is part of the GNU MP Library.
+
+The GNU MP Library is free software; you can redistribute it and/or modify
+it under the terms of the GNU Lesser General Public License as published by
+the Free Software Foundation; either version 2.1 of the License, or (at your
+option) any later version.
+
+The GNU MP Library is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
+License for more details.
+
+You should have received a copy of the GNU Lesser General Public License
+along with the GNU MP Library; see the file COPYING.LIB.  If not, write to
+the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
+MA 02111-1307, USA. */
+
+/*
+  INPUT PARAMETERS
+  res_ptr	(sp + 4)
+  s1_ptr	(sp + 8)
+  s2_ptr	(sp + 16)
+  size		(sp + 12)
+*/
+
+#include "sysdep.h"
+#include "asm-syntax.h"
+
+	TEXT
+ENTRY(__mpn_add_n)
+/* Save used registers on the stack.  */
+	movel	R(d2),MEM_PREDEC(sp)
+	movel	R(a2),MEM_PREDEC(sp)
+
+/* Copy the arguments to registers.  Better use movem?  */
+	movel	MEM_DISP(sp,12),R(a2)
+	movel	MEM_DISP(sp,16),R(a0)
+	movel	MEM_DISP(sp,20),R(a1)
+	movel	MEM_DISP(sp,24),R(d2)
+
+	eorw	#1,R(d2)
+	lsrl	#1,R(d2)
+	bcc	L(L1)
+	subql	#1,R(d2)	/* clears cy as side effect */
+
+L(Loop:)
+	movel	MEM_POSTINC(a0),R(d0)
+	movel	MEM_POSTINC(a1),R(d1)
+	addxl	R(d1),R(d0)
+	movel	R(d0),MEM_POSTINC(a2)
+L(L1:)	movel	MEM_POSTINC(a0),R(d0)
+	movel	MEM_POSTINC(a1),R(d1)
+	addxl	R(d1),R(d0)
+	movel	R(d0),MEM_POSTINC(a2)
+
+	dbf	R(d2),L(Loop)		/* loop until 16 lsb of %4 == -1 */
+	subxl	R(d0),R(d0)	/* d0 <= -cy; save cy as 0 or -1 in d0 */
+	subl	#0x10000,R(d2)
+	bcs	L(L2)
+	addl	R(d0),R(d0)	/* restore cy */
+	bra	L(Loop)
+
+L(L2:)
+	negl	R(d0)
+
+/* Restore used registers from stack frame.  */
+	movel	MEM_POSTINC(sp),R(a2)
+	movel	MEM_POSTINC(sp),R(d2)
+
+	rts
+END(__mpn_add_n)
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/bits/huge_vall.h glibc-ports-2.5-cs/sysdeps/m68k/m680x0/bits/huge_vall.h
--- glibc-ports-2.5/sysdeps/m68k/m680x0/bits/huge_vall.h	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/bits/huge_vall.h	2007-03-27 15:01:00.000000000 +0200
@@ -0,0 +1,43 @@
+/* `HUGE_VALL' constant for m68k (where it is infinity).
+   Used by <stdlib.h> and <math.h> functions for overflow.
+   Copyright (C) 1992, 1995, 1996, 1997, 1999, 2000, 2004
+   Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#ifndef _MATH_H
+# error "Never use <bits/huge_val.h> directly; include <math.h> instead."
+#endif
+
+#if __GNUC_PREREQ(3,3)
+# define HUGE_VALL	(__builtin_huge_vall ())
+#elif __GNUC_PREREQ(2,96)
+# define HUGE_VALL	(__extension__ 0x1.0p32767L)
+#elif defined__GNUC__
+
+# define HUGE_VALL					\
+  (__extension__					\
+   ((union { unsigned long __l[3]; long double __ld; })	\
+    { __l: { 0x7fff0000UL, 0x80000000UL, 0UL } }).__ld)
+
+#else /* not GCC */
+
+static union { unsigned char __c[12]; long double __ld; } __huge_vall =
+  { { 0x7f, 0xff, 0, 0, 0x80, 0, 0, 0, 0, 0, 0, 0 } };
+# define HUGE_VALL	(__huge_vall.__ld)
+
+#endif /* GCC 2.95.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/bits/mathdef.h glibc-ports-2.5-cs/sysdeps/m68k/m680x0/bits/mathdef.h
--- glibc-ports-2.5/sysdeps/m68k/m680x0/bits/mathdef.h	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/bits/mathdef.h	2007-03-27 15:01:00.000000000 +0200
@@ -0,0 +1,38 @@
+/* Copyright (C) 1997, 1998, 1999, 2000, 2004 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#if !defined _MATH_H && !defined _COMPLEX_H
+# error "Never use <bits/mathdef.h> directly; include <math.h> instead"
+#endif
+
+#if defined __USE_ISOC99 && defined _MATH_H && !defined _MATH_H_MATHDEF
+# define _MATH_H_MATHDEF	1
+
+/* The m68k FPUs evaluate all values in the 96 bit floating-point format
+   which is also available for the user as `long double'.  Therefore we
+   define: */
+typedef long double float_t;	/* `float' expressions are evaluated as
+				   `long double'.  */
+typedef long double double_t;	/* `double' expressions are evaluated as
+				   `long double'.  */
+
+/* The values returned by `ilogb' for 0 and NaN respectively.  */
+# define FP_ILOGB0	(-2147483647 - 1)
+# define FP_ILOGBNAN	(2147483647)
+
+#endif	/* ISO C99 */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/bits/mathinline.h glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/bits/mathinline.h
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/bits/mathinline.h	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/bits/mathinline.h	2007-03-27 15:01:02.000000000 +0200
@@ -0,0 +1,445 @@
+/* Definitions of inline math functions implemented by the m68881/2.
+   Copyright (C) 1991,92,93,94,96,97,98,99,2000,2002, 2003, 2004
+     Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#ifdef	__GNUC__
+
+#ifdef __USE_ISOC99
+/* GCC 3.1 and up have builtins that actually can be used.  */
+# if !__GNUC_PREREQ (3,1)
+/* ISO C99 defines some macros to perform unordered comparisons.  The
+   m68k FPU supports this with special opcodes and we should use them.
+   These must not be inline functions since we have to be able to handle
+   all floating-point types.  */
+#  undef isgreater
+#  undef isgreaterequal
+#  undef isless
+#  undef islessequal
+#  undef islessgreater
+#  undef isunordered
+#  define isgreater(x, y)					\
+   __extension__					\
+   ({ char __result;					\
+      __asm__ ("fcmp%.x %2,%1; fsogt %0"		\
+	       : "=dm" (__result) : "f" (x), "f" (y));	\
+      __result != 0; })
+
+#  define isgreaterequal(x, y)				\
+   __extension__					\
+   ({ char __result;					\
+      __asm__ ("fcmp%.x %2,%1; fsoge %0"		\
+	       : "=dm" (__result) : "f" (x), "f" (y));	\
+      __result != 0; })
+
+#  define isless(x, y)					\
+   __extension__					\
+   ({ char __result;					\
+      __asm__ ("fcmp%.x %2,%1; fsolt %0"		\
+	       : "=dm" (__result) : "f" (x), "f" (y));	\
+      __result != 0; })
+
+#  define islessequal(x, y)				\
+   __extension__					\
+   ({ char __result;					\
+      __asm__ ("fcmp%.x %2,%1; fsole %0"		\
+	       : "=dm" (__result) : "f" (x), "f" (y));	\
+      __result != 0; })
+
+#  define islessgreater(x, y)				\
+   __extension__					\
+   ({ char __result;					\
+      __asm__ ("fcmp%.x %2,%1; fsogl %0"		\
+	       : "=dm" (__result) : "f" (x), "f" (y));	\
+      __result != 0; })
+
+#  define isunordered(x, y)				\
+   __extension__					\
+   ({ char __result;					\
+      __asm__ ("fcmp%.x %2,%1; fsun %0"			\
+	       : "=dm" (__result) : "f" (x), "f" (y));	\
+      __result != 0; })
+# endif /* GCC 3.1 */
+#endif
+
+
+#if (!defined __NO_MATH_INLINES && defined __OPTIMIZE__) \
+    || defined __LIBC_INTERNAL_MATH_INLINES
+
+#ifdef	__LIBC_INTERNAL_MATH_INLINES
+/* This is used when defining the functions themselves.  Define them with
+   __ names, and with `static inline' instead of `extern inline' so the
+   bodies will always be used, never an external function call.  */
+# define __m81_u(x)		__CONCAT(__,x)
+# define __m81_inline		static __inline
+#else
+# define __m81_u(x)		x
+# ifdef __cplusplus
+#  define __m81_inline		__inline
+# else
+#  define __m81_inline		extern __inline
+# endif
+# define __M81_MATH_INLINES	1
+#endif
+
+/* Define a const math function.  */
+#define __m81_defun(rettype, func, args)				      \
+  __m81_inline rettype __attribute__((__const__))			      \
+  __m81_u(func) args
+
+/* Define the three variants of a math function that has a direct
+   implementation in the m68k fpu.  FUNC is the name for C (which will be
+   suffixed with f and l for the float and long double version, resp).  OP
+   is the name of the fpu operation (without leading f).  */
+
+#if defined __USE_MISC || defined __USE_ISOC99
+# define __inline_mathop(func, op)			\
+  __inline_mathop1(double, func, op)			\
+  __inline_mathop1(float, __CONCAT(func,f), op)	\
+  __inline_mathop1(long double, __CONCAT(func,l), op)
+#else
+# define __inline_mathop(func, op)			\
+  __inline_mathop1(double, func, op)
+#endif
+
+#define __inline_mathop1(float_type,func, op)				      \
+  __m81_defun (float_type, func, (float_type __mathop_x))		      \
+  {									      \
+    float_type __result;						      \
+    __asm("f" __STRING(op) "%.x %1, %0" : "=f" (__result) : "f" (__mathop_x));\
+    return __result;							      \
+  }
+
+__inline_mathop(__atan, atan)
+__inline_mathop(__cos, cos)
+__inline_mathop(__sin, sin)
+__inline_mathop(__tan, tan)
+__inline_mathop(__tanh, tanh)
+__inline_mathop(__fabs, abs)
+
+#if defined __USE_MISC || defined __USE_XOPEN_EXTENDED || defined __USE_ISOC99
+__inline_mathop(__rint, int)
+__inline_mathop(__expm1, etoxm1)
+__inline_mathop(__log1p, lognp1)
+#endif
+
+#ifdef __USE_MISC
+__inline_mathop(__significand, getman)
+#endif
+
+#ifdef __USE_ISOC99
+__inline_mathop(__trunc, intrz)
+#endif
+
+#if !defined __NO_MATH_INLINES && defined __OPTIMIZE__
+
+__inline_mathop(atan, atan)
+__inline_mathop(cos, cos)
+__inline_mathop(sin, sin)
+__inline_mathop(tan, tan)
+__inline_mathop(tanh, tanh)
+
+# if defined __USE_MISC || defined __USE_XOPEN_EXTENDED || defined __USE_ISOC99
+__inline_mathop(rint, int)
+__inline_mathop(expm1, etoxm1)
+__inline_mathop(log1p, lognp1)
+# endif
+
+# ifdef __USE_MISC
+__inline_mathop(significand, getman)
+# endif
+
+# ifdef __USE_ISOC99
+__inline_mathop(trunc, intrz)
+# endif
+
+#endif /* !__NO_MATH_INLINES && __OPTIMIZE__ */
+
+/* This macro contains the definition for the rest of the inline
+   functions, using FLOAT_TYPE as the domain type and S as the suffix
+   for the function names.  */
+
+#define __inline_functions(float_type, s)				  \
+__m81_defun (float_type, __CONCAT(__floor,s), (float_type __x))	  \
+{									  \
+  float_type __result;							  \
+  unsigned long int __ctrl_reg;						  \
+  __asm __volatile__ ("fmove%.l %!, %0" : "=dm" (__ctrl_reg));		  \
+  /* Set rounding towards negative infinity.  */			  \
+  __asm __volatile__ ("fmove%.l %0, %!" : /* No outputs.  */		  \
+		      : "dmi" ((__ctrl_reg & ~0x10) | 0x20));		  \
+  /* Convert X to an integer, using -Inf rounding.  */			  \
+  __asm __volatile__ ("fint%.x %1, %0" : "=f" (__result) : "f" (__x));	  \
+  /* Restore the previous rounding mode.  */				  \
+  __asm __volatile__ ("fmove%.l %0, %!" : /* No outputs.  */		  \
+		      : "dmi" (__ctrl_reg));				  \
+  return __result;							  \
+}									  \
+									  \
+__m81_defun (float_type, __CONCAT(__ceil,s), (float_type __x))	  	  \
+{									  \
+  float_type __result;							  \
+  unsigned long int __ctrl_reg;						  \
+  __asm __volatile__ ("fmove%.l %!, %0" : "=dm" (__ctrl_reg));		  \
+  /* Set rounding towards positive infinity.  */			  \
+  __asm __volatile__ ("fmove%.l %0, %!" : /* No outputs.  */		  \
+		      : "dmi" (__ctrl_reg | 0x30));			  \
+  /* Convert X to an integer, using +Inf rounding.  */			  \
+  __asm __volatile__ ("fint%.x %1, %0" : "=f" (__result) : "f" (__x));	  \
+  /* Restore the previous rounding mode.  */				  \
+  __asm __volatile__ ("fmove%.l %0, %!" : /* No outputs.  */		  \
+		      : "dmi" (__ctrl_reg));				  \
+  return __result;							  \
+}
+
+__inline_functions(double,)
+#if defined __USE_MISC || defined __USE_ISOC99
+__inline_functions(float,f)
+__inline_functions(long double,l)
+#endif
+#undef __inline_functions
+
+#ifdef __USE_MISC
+
+# define __inline_functions(float_type, s)				  \
+__m81_defun (int, __CONCAT(__isinf,s), (float_type __value))	  	  \
+{									  \
+  /* There is no branch-condition for infinity,				  \
+     so we must extract and examine the condition codes manually.  */	  \
+  unsigned long int __fpsr;						  \
+  __asm("ftst%.x %1\n"							  \
+	"fmove%.l %/fpsr, %0" : "=dm" (__fpsr) : "f" (__value));	  \
+  return (__fpsr & (2 << 24)) ? (__fpsr & (8 << 24) ? -1 : 1) : 0;	  \
+}									  \
+									  \
+__m81_defun (int, __CONCAT(__finite,s), (float_type __value))	  	  \
+{									  \
+  /* There is no branch-condition for infinity, so we must extract and	  \
+     examine the condition codes manually.  */				  \
+  unsigned long int __fpsr;						  \
+  __asm ("ftst%.x %1\n"							  \
+	 "fmove%.l %/fpsr, %0" : "=dm" (__fpsr) : "f" (__value));	  \
+  return (__fpsr & (3 << 24)) == 0;					  \
+}									  \
+									  \
+__m81_defun (float_type, __CONCAT(__scalbn,s),				  \
+	     (float_type __x, int __n))					  \
+{									  \
+  float_type __result;							  \
+  __asm ("fscale%.l %1, %0" : "=f" (__result) : "dmi" (__n), "0" (__x));  \
+  return __result;							  \
+}
+
+__inline_functions(double,)
+__inline_functions(float,f)
+__inline_functions(long double,l)
+# undef __inline_functions
+
+#endif /* Use misc.  */
+
+#if defined __USE_MISC || defined __USE_XOPEN
+
+# define __inline_functions(float_type, s)				  \
+__m81_defun (int, __CONCAT(__isnan,s), (float_type __value))	  	  \
+{									  \
+  char __result;							  \
+  __asm("ftst%.x %1\n"							  \
+	"fsun %0" : "=dm" (__result) : "f" (__value));			  \
+  return __result;							  \
+}
+
+__inline_functions(double,)
+# ifdef __USE_MISC
+__inline_functions(float,f)
+__inline_functions(long double,l)
+# endif
+# undef __inline_functions
+
+#endif
+
+#ifdef __USE_ISOC99
+
+# define __inline_functions(float_type, s)				  \
+__m81_defun (int, __CONCAT(__signbit,s), (float_type __value))	  	  \
+{									  \
+  /* There is no branch-condition for the sign bit, so we must extract	  \
+     and examine the condition codes manually.  */			  \
+  unsigned long int __fpsr;						  \
+  __asm ("ftst%.x %1\n"							  \
+	 "fmove%.l %/fpsr, %0" : "=dm" (__fpsr) : "f" (__value));	  \
+  return (__fpsr >> 27) & 1;						  \
+}									  \
+									  \
+  __m81_defun (float_type, __CONCAT(__scalbln,s),			  \
+	     (float_type __x, long int __n))				  \
+{									  \
+  return __CONCAT(__scalbn,s) (__x, __n);				  \
+}									  \
+									  \
+__m81_defun (float_type, __CONCAT(__nearbyint,s), (float_type __x))	  \
+{									  \
+  float_type __result;							  \
+  unsigned long int __ctrl_reg;						  \
+  __asm __volatile__ ("fmove%.l %!, %0" : "=dm" (__ctrl_reg));		  \
+  /* Temporarily disable the inexact exception.  */			  \
+  __asm __volatile__ ("fmove%.l %0, %!" : /* No outputs.  */		  \
+		      : "dmi" (__ctrl_reg & ~0x200));			  \
+  __asm __volatile__ ("fint%.x %1, %0" : "=f" (__result) : "f" (__x));	  \
+  __asm __volatile__ ("fmove%.l %0, %!" : /* No outputs.  */		  \
+		      : "dmi" (__ctrl_reg));				  \
+  return __result;							  \
+}									  \
+									  \
+__m81_defun (long int, __CONCAT(__lrint,s), (float_type __x))		  \
+{									  \
+  long int __result;							  \
+  __asm ("fmove%.l %1, %0" : "=dm" (__result) : "f" (__x));		  \
+  return __result;							  \
+}									  \
+									  \
+__m81_inline float_type							  \
+__m81_u(__CONCAT(__fma,s))(float_type __x, float_type __y,		  \
+			   float_type __z)				  \
+{									  \
+  return (__x * __y) + __z;						  \
+}
+
+__inline_functions (double,)
+__inline_functions (float,f)
+__inline_functions (long double,l)
+# undef __inline_functions
+
+#endif /* Use ISO C9x */
+
+#ifdef __USE_GNU
+
+# define __inline_functions(float_type, s)				\
+__m81_inline void							\
+__m81_u(__CONCAT(__sincos,s))(float_type __x, float_type *__sinx,	\
+			      float_type *__cosx)			\
+{									\
+  __asm ("fsincos%.x %2,%1:%0"						\
+	 : "=f" (*__sinx), "=f" (*__cosx) : "f" (__x));			\
+}
+
+__inline_functions (double,)
+__inline_functions (float,f)
+__inline_functions (long double,l)
+# undef __inline_functions
+
+#endif
+
+#if !defined __NO_MATH_INLINES && defined __OPTIMIZE__
+
+/* Define inline versions of the user visible functions.  */
+
+/* Note that there must be no whitespace before the argument passed for
+   NAME, to make token pasting work correctly with -traditional.  */
+# define __inline_forward_c(rettype, name, args1, args2)	\
+extern __inline rettype __attribute__((__const__))		\
+  name args1							\
+{								\
+  return __CONCAT(__,name) args2;				\
+}
+
+# define __inline_forward(rettype, name, args1, args2)	\
+extern __inline rettype name args1			\
+{							\
+  return __CONCAT(__,name) args2;			\
+}
+
+__inline_forward_c(double,floor, (double __x), (__x))
+__inline_forward_c(double,ceil, (double __x), (__x))
+# ifdef __USE_MISC
+#  ifndef __USE_ISOC99 /* Conflict with macro of same name.  */
+__inline_forward_c(int,isinf, (double __value), (__value))
+#  endif
+__inline_forward_c(int,finite, (double __value), (__value))
+__inline_forward_c(double,scalbn, (double __x, int __n), (__x, __n))
+# endif
+# if defined __USE_MISC || defined __USE_XOPEN
+#  ifndef __USE_ISOC99 /* Conflict with macro of same name.  */
+__inline_forward_c(int,isnan, (double __value), (__value))
+#  endif
+# endif
+# ifdef __USE_ISOC99
+__inline_forward_c(double,scalbln, (double __x, long int __n), (__x, __n))
+__inline_forward_c(double,nearbyint, (double __value), (__value))
+__inline_forward_c(long int,lrint, (double __value), (__value))
+__inline_forward_c(double,fma, (double __x, double __y, double __z),
+		   (__x, __y, __z))
+# endif
+# ifdef __USE_GNU
+__inline_forward(void,sincos, (double __x, double *__sinx, double *__cosx),
+		 (__x, __sinx, __cosx))
+# endif
+
+# if defined __USE_MISC || defined __USE_ISOC99
+
+__inline_forward_c(float,floorf, (float __x), (__x))
+__inline_forward_c(float,ceilf, (float __x), (__x))
+#  ifdef __USE_MISC
+__inline_forward_c(int,isinff, (float __value), (__value))
+__inline_forward_c(int,finitef, (float __value), (__value))
+__inline_forward_c(float,scalbnf, (float __x, int __n), (__x, __n))
+__inline_forward_c(int,isnanf, (float __value), (__value))
+#  endif
+# ifdef __USE_ISOC99
+__inline_forward_c(float,scalblnf, (float __x, long int __n), (__x, __n))
+__inline_forward_c(float,nearbyintf, (float __value), (__value))
+__inline_forward_c(long int,lrintf, (float __value), (__value))
+__inline_forward_c(float,fmaf, (float __x, float __y, float __z),
+		   (__x, __y, __z))
+# endif
+# ifdef __USE_GNU
+__inline_forward(void,sincosf, (float __x, float *__sinx, float *__cosx),
+		 (__x, __sinx, __cosx))
+# endif
+
+__inline_forward_c(long double,floorl, (long double __x), (__x))
+__inline_forward_c(long double,ceill, (long double __x), (__x))
+# ifdef __USE_MISC
+__inline_forward_c(int,isinfl, (long double __value), (__value))
+__inline_forward_c(int,finitel, (long double __value), (__value))
+__inline_forward_c(long double,scalbnl, (long double __x, int __n), (__x, __n))
+__inline_forward_c(int,isnanl, (long double __value), (__value))
+# endif
+# ifdef __USE_ISOC99
+__inline_forward_c(long double,scalblnl, (long double __x, long int __n),
+		   (__x, __n))
+__inline_forward_c(long double,nearbyintl, (long double __value), (__value))
+__inline_forward_c(long int,lrintl, (long double __value), (__value))
+__inline_forward_c(long double,fmal,
+		   (long double __x, long double __y, long double __z),
+		   (__x, __y, __z))
+# endif
+# ifdef __USE_GNU
+__inline_forward(void,sincosl,
+		 (long double __x, long double *__sinx, long double *__cosx),
+		 (__x, __sinx, __cosx))
+# endif
+
+#endif /* Use misc or ISO C99 */
+
+#undef __inline_forward
+#undef __inline_forward_c
+
+#endif /* !__NO_MATH_INLINES && __OPTIMIZE__ */
+
+#endif
+#endif	/* GCC.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/branred.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/branred.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/branred.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/branred.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1 @@
+/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/doasin.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/doasin.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/doasin.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/doasin.c	2007-03-27 15:01:12.000000000 +0200
@@ -0,0 +1 @@
+/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/dosincos.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/dosincos.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/dosincos.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/dosincos.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1 @@
+/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_acos.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_acos.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_acos.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_acos.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,35 @@
+/* Copyright (C) 1996, 1997, 1999 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <math.h>
+#include "math_private.h"
+#include "mathimpl.h"
+
+#ifndef	FUNC
+#define	FUNC	__ieee754_acos
+#endif
+#ifndef float_type
+#define float_type double
+#endif
+
+float_type
+FUNC (x)
+     float_type x;
+{
+  return __m81_u(FUNC)(x);
+}
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_acosf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_acosf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_acosf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_acosf.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,5 @@
+#ifndef	FUNC
+#define	FUNC	__ieee754_acosf
+#endif
+#define float_type float
+#include <e_acos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_acosl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_acosl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_acosl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_acosl.c	2007-03-27 15:01:12.000000000 +0200
@@ -0,0 +1,5 @@
+#ifndef FUNC
+#define FUNC __ieee754_acosl
+#endif
+#define float_type long double
+#include <e_acos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_asin.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_asin.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_asin.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_asin.c	2007-03-27 15:01:11.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	__ieee754_asin
+#include <e_acos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_asinf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_asinf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_asinf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_asinf.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	__ieee754_asinf
+#include <e_acosf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_asinl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_asinl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_asinl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_asinl.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC __ieee754_asinl
+#include <e_acosl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_atan2.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_atan2.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_atan2.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_atan2.c	2007-03-27 15:01:12.000000000 +0200
@@ -0,0 +1,104 @@
+/* Copyright (C) 1997, 1999 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <math.h>
+#include "math_private.h"
+#include "mathimpl.h"
+
+#ifndef SUFF
+#define SUFF
+#endif
+#ifndef float_type
+#define float_type double
+#endif
+
+#define CONCATX(a,b) __CONCAT(a,b)
+#define s(name) CONCATX(name,SUFF)
+#define m81(func) __m81_u(s(func))
+
+float_type
+s(__ieee754_atan2) (float_type y, float_type x)
+{
+  float_type pi, pi_2, z;
+  unsigned long y_cond, x_cond;
+
+  __asm ("fmovecr%.x %#0, %0" : "=f" (pi));
+  __asm ("fscale%.w %#-1, %0" : "=f" (pi_2) : "0" (pi));
+  y_cond = __m81_test (y);
+  x_cond = __m81_test (x);
+
+  if ((x_cond | y_cond) & __M81_COND_NAN)
+    z = x + y;
+  else if (y_cond & __M81_COND_ZERO)
+    {
+      if (x_cond & __M81_COND_NEG)
+	z = y_cond & __M81_COND_NEG ? -pi : pi;
+      else
+	z = y;
+    }
+  else if (x_cond & __M81_COND_INF)
+    {
+      if (y_cond & __M81_COND_INF)
+	{
+	  float_type pi_4;
+	  __asm ("fscale%.w %#-2, %0" : "=f" (pi_4) : "0" (pi));
+	  z = x_cond & __M81_COND_NEG ? 3 * pi_4 : pi_4;
+	}
+      else
+	z = x_cond & __M81_COND_NEG ? pi : 0;
+      if (y_cond & __M81_COND_NEG)
+	z = -z;
+    }
+  else if (y_cond & __M81_COND_INF)
+    z = y_cond & __M81_COND_NEG ? -pi_2 : pi_2;
+  else if (x_cond & __M81_COND_NEG)
+    {
+      if (y_cond & __M81_COND_NEG)
+	{
+	  if (-x > -y)
+	    z = -pi + m81(__atan) (y / x);
+	  else
+	    z = -pi_2 - m81(__atan) (x / y);
+	}
+      else
+	{
+	  if (-x > y)
+	    z = pi + m81(__atan) (y / x);
+	  else
+	    z = pi_2 - m81(__atan) (x / y);
+	}
+    }
+  else
+    {
+      if (y_cond & __M81_COND_NEG)
+	{
+	  if (x > -y)
+	    z = m81(__atan) (y / x);
+	  else
+	    z = -pi_2 - m81(__atan) (x / y);
+	}
+      else
+	{
+	  if (x > y)
+	    z = m81(__atan) (y / x);
+	  else
+	    z = pi_2 - m81(__atan) (x / y);
+	}
+    }
+  return z;
+}
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_atan2f.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_atan2f.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_atan2f.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_atan2f.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,3 @@
+#define SUFF f
+#define float_type float
+#include <e_atan2.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_atan2l.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_atan2l.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_atan2l.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_atan2l.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1,3 @@
+#define SUFF l
+#define float_type long double
+#include <e_atan2.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_atanh.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_atanh.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_atanh.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_atanh.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	__ieee754_atanh
+#include <e_acos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_atanhf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_atanhf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_atanhf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_atanhf.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	__ieee754_atanhf
+#include <e_acosf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_atanhl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_atanhl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_atanhl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_atanhl.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC __ieee754_atanhl
+#include <e_acosl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_cosh.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_cosh.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_cosh.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_cosh.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	__ieee754_cosh
+#include <e_acos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_coshf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_coshf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_coshf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_coshf.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	__ieee754_coshf
+#include <e_acosf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_coshl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_coshl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_coshl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_coshl.c	2007-03-27 15:01:11.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC __ieee754_coshl
+#include <e_acosl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_exp10.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_exp10.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_exp10.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_exp10.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC __ieee754_exp10
+#include <e_acos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_exp10f.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_exp10f.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_exp10f.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_exp10f.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC __ieee754_exp10f
+#include <e_acosf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_exp10l.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_exp10l.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_exp10l.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_exp10l.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC __ieee754_exp10l
+#include <e_acosl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_exp2.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_exp2.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_exp2.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_exp2.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC __ieee754_exp2
+#include <e_acos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_exp2f.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_exp2f.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_exp2f.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_exp2f.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC __ieee754_exp2f
+#include <e_acosf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_exp2l.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_exp2l.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_exp2l.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_exp2l.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC __ieee754_exp2l
+#include <e_acosl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_exp.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_exp.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_exp.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_exp.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	__ieee754_exp
+#include <e_acos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_expf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_expf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_expf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_expf.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	__ieee754_expf
+#include <e_acosf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_expl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_expl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_expl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_expl.c	2007-03-27 15:01:12.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC __ieee754_expl
+#include <e_acosl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_fmod.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_fmod.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_fmod.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_fmod.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1,36 @@
+/* Copyright (C) 1996, 1997, 1999 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <math.h>
+#include "math_private.h"
+#include "mathimpl.h"
+
+#ifndef FUNC
+#define FUNC __ieee754_fmod
+#endif
+#ifndef float_type
+#define float_type double
+#endif
+
+float_type
+FUNC (x, y)
+     float_type x;
+     float_type y;
+{
+  return __m81_u(FUNC)(x, y);
+}
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_fmodf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_fmodf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_fmodf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_fmodf.c	2007-03-27 15:01:11.000000000 +0200
@@ -0,0 +1,5 @@
+#ifndef FUNC
+#define FUNC __ieee754_fmodf
+#endif
+#define float_type float
+#include <e_fmod.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_fmodl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_fmodl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_fmodl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_fmodl.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,5 @@
+#ifndef FUNC
+#define FUNC __ieee754_fmodl
+#endif
+#define float_type long double
+#include <e_fmod.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_log10.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_log10.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_log10.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_log10.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	__ieee754_log10
+#include <e_acos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_log10f.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_log10f.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_log10f.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_log10f.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	__ieee754_log10f
+#include <e_acosf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_log10l.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_log10l.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_log10l.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_log10l.c	2007-03-27 15:01:11.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC __ieee754_log10l
+#include <e_acosl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_log2.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_log2.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_log2.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_log2.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC    __ieee754_log2
+#include <e_acos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_log2f.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_log2f.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_log2f.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_log2f.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC    __ieee754_log2f
+#include <e_acosf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_log2l.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_log2l.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_log2l.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_log2l.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC    __ieee754_log2l
+#include <e_acosl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_log.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_log.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_log.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_log.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	__ieee754_log
+#include <e_acos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_logf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_logf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_logf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_logf.c	2007-03-27 15:01:12.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	__ieee754_logf
+#include <e_acosf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_logl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_logl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_logl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_logl.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC __ieee754_logl
+#include <e_acosl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_pow.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_pow.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_pow.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_pow.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,126 @@
+/* Copyright (C) 1997, 1999 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <math.h>
+#include "math_private.h"
+#include "mathimpl.h"
+
+#ifndef SUFF
+#define SUFF
+#endif
+#ifndef float_type
+#define float_type double
+#endif
+
+#define CONCATX(a,b) __CONCAT(a,b)
+#define s(name) CONCATX(name,SUFF)
+#define m81(func) __m81_u(s(func))
+
+float_type
+s(__ieee754_pow) (float_type x, float_type y)
+{
+  float_type z;
+  float_type ax;
+  unsigned long x_cond, y_cond;
+
+  y_cond = __m81_test (y);
+  if (y_cond & __M81_COND_ZERO)
+    return 1.0;
+  if (y_cond & __M81_COND_NAN)
+    return x == 1.0 ? x : x + y;
+
+  x_cond = __m81_test (x);
+  if (x_cond & __M81_COND_NAN)
+    return x + y;
+
+  if (y_cond & __M81_COND_INF)
+    {
+      ax = s(fabs) (x);
+      if (ax == 1.0)
+	return ax;
+      if (ax > 1.0)
+	return y_cond & __M81_COND_NEG ? 0 : y;
+      else
+	return y_cond & __M81_COND_NEG ? -y : 0;
+    }
+
+  if (s(fabs) (y) == 1.0)
+    return y_cond & __M81_COND_NEG ? 1 / x : x;
+
+  if (y == 2)
+    return x * x;
+  if (y == 0.5 && !(x_cond & __M81_COND_NEG))
+    return m81(__ieee754_sqrt) (x);
+
+  if (x == 10.0)
+    {
+      __asm ("ftentox%.x %1, %0" : "=f" (z) : "f" (y));
+      return z;
+    }
+  if (x == 2.0)
+    {
+      __asm ("ftwotox%.x %1, %0" : "=f" (z) : "f" (y));
+      return z;
+    }
+
+  ax = s(fabs) (x);
+  if (x_cond & (__M81_COND_INF | __M81_COND_ZERO) || ax == 1.0)
+    {
+      z = ax;
+      if (y_cond & __M81_COND_NEG)
+	z = 1 / z;
+      if (x_cond & __M81_COND_NEG)
+	{
+	  if (y != m81(__rint) (y))
+	    {
+	      if (x == -1)
+		z = (z - z) / (z - z);
+	    }
+	  else
+	    goto maybe_negate;
+	}
+      return z;
+    }
+
+  if (x_cond & __M81_COND_NEG)
+    {
+      if (y == m81(__rint) (y))
+	{
+	  z = m81(__ieee754_exp) (y * m81(__ieee754_log) (-x));
+	maybe_negate:
+	  /* We always use the long double format, since y is already in
+	     this format and rounding won't change the result.  */
+	  {
+	    int32_t exponent;
+	    u_int32_t i0, i1;
+	    GET_LDOUBLE_WORDS (exponent, i0, i1, y);
+	    exponent = (exponent & 0x7fff) - 0x3fff;
+	    if (exponent <= 31
+		? i0 & (1 << (31 - exponent))
+		: (exponent <= 63
+		   && i1 & (1 << (63 - exponent))))
+	      z = -z;
+	  }
+	}
+      else
+	z = (y - y) / (y - y);
+    }
+  else
+    z = m81(__ieee754_exp) (y * m81(__ieee754_log) (x));
+  return z;
+}
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_powf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_powf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_powf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_powf.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,3 @@
+#define SUFF f
+#define float_type float
+#include <e_pow.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_powl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_powl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_powl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_powl.c	2007-03-27 15:01:12.000000000 +0200
@@ -0,0 +1,3 @@
+#define SUFF l
+#define float_type long double
+#include <e_pow.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_remainder.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_remainder.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_remainder.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_remainder.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC __ieee754_remainder
+#include <e_fmod.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_remainderf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_remainderf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_remainderf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_remainderf.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC __ieee754_remainderf
+#include <e_fmodf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_remainderl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_remainderl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_remainderl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_remainderl.c	2007-03-27 15:01:12.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC __ieee754_remainderl
+#include <e_fmodl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_rem_pio2.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_rem_pio2.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_rem_pio2.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_rem_pio2.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1,3 @@
+/* Empty.  This file is only meant to avoid compiling the file with the
+   same name in the libm-ieee754 directory.  The code is not used since
+   there is an assembler version for all users of this file.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_rem_pio2f.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_rem_pio2f.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_rem_pio2f.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_rem_pio2f.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1,3 @@
+/* Empty.  This file is only meant to avoid compiling the file with the
+   same name in the libm-ieee754 directory.  The code is not used since
+   there is an assembler version for all users of this file.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_rem_pio2l.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_rem_pio2l.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_rem_pio2l.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_rem_pio2l.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,3 @@
+/* Empty.  This file is only meant to avoid compiling the file with the
+   same name in the libm-ieee754 directory.  The code is not used since
+   there is an assembler version for all users of this file.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_scalb.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_scalb.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_scalb.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_scalb.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,60 @@
+/* Copyright (C) 1997, 1999 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Andreas Schwab <schwab@issan.informatik.uni-dortmund.de>.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <math.h>
+#include "math_private.h"
+#include "mathimpl.h"
+
+#ifndef SUFF
+#define SUFF
+#endif
+#ifndef float_type
+#define float_type double
+#endif
+
+#define CONCATX(a,b) __CONCAT(a,b)
+#define s(name) CONCATX(name,SUFF)
+#define m81(func) __m81_u(s(func))
+
+float_type
+s(__ieee754_scalb) (float_type x, float_type fn)
+{
+  float_type retval;
+  unsigned long x_cond = __m81_test (x);
+  unsigned long fn_cond = __m81_test (fn);
+
+  if ((x_cond | fn_cond) & __M81_COND_NAN)
+    return x * fn;
+
+  if (fn_cond & __M81_COND_INF)
+    {
+      if (!(fn_cond & __M81_COND_NEG))
+	return x * fn;
+      else if (x_cond & __M81_COND_ZERO)
+	return x;
+      else
+	return x / -fn;
+    }
+
+  if (m81(__rint) (fn) != fn)
+    return (x - x) / (x - x);
+
+  __asm ("fscale%.x %1, %0" : "=f" (retval) : "f" (fn), "0" (x));
+  return retval;
+}
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_scalbf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_scalbf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_scalbf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_scalbf.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,3 @@
+#define SUFF f
+#define float_type float
+#include <e_scalb.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_scalbl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_scalbl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_scalbl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_scalbl.c	2007-03-27 15:01:11.000000000 +0200
@@ -0,0 +1,3 @@
+#define SUFF l
+#define float_type long double
+#include <e_scalb.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_sinh.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_sinh.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_sinh.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_sinh.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	__ieee754_sinh
+#include <e_acos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_sinhf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_sinhf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_sinhf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_sinhf.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	__ieee754_sinhf
+#include <e_acosf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_sinhl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_sinhl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_sinhl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_sinhl.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC __ieee754_sinhl
+#include <e_acosl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_sqrt.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_sqrt.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_sqrt.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_sqrt.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	__ieee754_sqrt
+#include <e_acos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_sqrtf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_sqrtf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_sqrtf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_sqrtf.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	__ieee754_sqrtf
+#include <e_acosf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_sqrtl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_sqrtl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/e_sqrtl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/e_sqrtl.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC __ieee754_sqrtl
+#include <e_acosl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/fraiseexcpt.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/fraiseexcpt.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/fraiseexcpt.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/fraiseexcpt.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,83 @@
+/* Raise given exceptions.
+   Copyright (C) 1997,99,2000,01,02 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Andreas Schwab <schwab@issan.informatik.uni-dortmund.de>
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <fenv.h>
+#include <float.h>
+#include <math.h>
+
+int
+__feraiseexcept (int excepts)
+{
+  /* Raise exceptions represented by EXCEPTS.  But we must raise only one
+     signal at a time.  It is important that if the overflow/underflow
+     exception and the divide by zero exception are given at the same
+     time, the overflow/underflow exception follows the divide by zero
+     exception.  */
+
+  /* First: invalid exception.  */
+  if (excepts & FE_INVALID)
+    {
+      /* One example of a invalid operation is 0 * Infinity.  */
+      double d = HUGE_VAL;
+      __asm__ __volatile__ ("fmul%.s %#0r0,%0; fnop" : "=f" (d) : "0" (d));
+    }
+
+  /* Next: division by zero.  */
+  if (excepts & FE_DIVBYZERO)
+    {
+      double d = 1.0;
+      __asm__ __volatile__ ("fdiv%.s %#0r0,%0; fnop" : "=f" (d) : "0" (d));
+    }
+
+  /* Next: overflow.  */
+  if (excepts & FE_OVERFLOW)
+    {
+      long double d = LDBL_MAX;
+
+      __asm__ __volatile__ ("fmul%.x %0,%0; fnop" : "=f" (d) : "0" (d));
+    }
+
+  /* Next: underflow.  */
+  if (excepts & FE_UNDERFLOW)
+    {
+      long double d = -LDBL_MAX;
+
+      __asm__ __volatile__ ("fetox%.x %0; fnop" : "=f" (d) : "0" (d));
+    }
+
+  /* Last: inexact.  */
+  if (excepts & FE_INEXACT)
+    {
+      long double d = 1.0;
+      __asm__ __volatile__ ("fdiv%.s %#0r3,%0; fnop" : "=f" (d) : "0" (d));
+    }
+
+  /* Success.  */
+  return 0;
+}
+
+#include <shlib-compat.h>
+#if SHLIB_COMPAT (libm, GLIBC_2_1, GLIBC_2_2)
+strong_alias (__feraiseexcept, __old_feraiseexcept)
+compat_symbol (libm, __old_feraiseexcept, feraiseexcept, GLIBC_2_1);
+#endif
+
+libm_hidden_ver (__feraiseexcept, feraiseexcept)
+versioned_symbol (libm, __feraiseexcept, feraiseexcept, GLIBC_2_2);
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/halfulp.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/halfulp.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/halfulp.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/halfulp.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1 @@
+/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/k_cos.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/k_cos.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/k_cos.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/k_cos.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,42 @@
+/* Copyright (C) 1996, 1997 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <math.h>
+#include "math_private.h"
+
+#ifndef FUNC
+#define FUNC cos
+#endif
+#ifndef float_type
+#define float_type double
+#endif
+
+#define __CONCATX(a,b) __CONCAT(a,b)
+
+float_type
+__CONCATX(__kernel_,FUNC) (x, y)
+     float_type x;
+     float_type y;
+{
+  float_type sin_x, cos_x, sin_y, cos_y;
+  __asm__ __volatile__ ("fsincosx %2,%0:%1" : "=f" (cos_x), "=f" (sin_x)
+			: "f" (x));
+  __asm__ __volatile__ ("fsincosx %2,%0:%1" : "=f" (cos_y), "=f" (sin_y)
+			: "f" (y));
+  return cos_x * cos_y - sin_x * sin_y;
+}
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/k_cosf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/k_cosf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/k_cosf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/k_cosf.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,3 @@
+#define FUNC cosf
+#define float_type float
+#include <k_cos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/k_cosl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/k_cosl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/k_cosl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/k_cosl.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,3 @@
+#define FUNC cosl
+#define float_type long double
+#include <k_cos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/k_rem_pio2.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/k_rem_pio2.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/k_rem_pio2.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/k_rem_pio2.c	2007-03-27 15:01:12.000000000 +0200
@@ -0,0 +1,3 @@
+/* Empty.  This file is only meant to avoid compiling the file with the
+   same name in the libm-ieee754 directory.  The code is not used since
+   there is an assembler version for all users of this file.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/k_rem_pio2f.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/k_rem_pio2f.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/k_rem_pio2f.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/k_rem_pio2f.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1,3 @@
+/* Empty.  This file is only meant to avoid compiling the file with the
+   same name in the libm-ieee754 directory.  The code is not used since
+   there is an assembler version for all users of this file.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/k_rem_pio2l.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/k_rem_pio2l.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/k_rem_pio2l.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/k_rem_pio2l.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,3 @@
+/* Empty.  This file is only meant to avoid compiling the file with the
+   same name in the libm-ieee754 directory.  The code is not used since
+   there is an assembler version for all users of this file.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/k_sin.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/k_sin.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/k_sin.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/k_sin.c	2007-03-27 15:01:11.000000000 +0200
@@ -0,0 +1,45 @@
+/* Copyright (C) 1996, 1997 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <math.h>
+#include "math_private.h"
+
+#ifndef FUNC
+#define FUNC sin
+#endif
+#ifndef float_type
+#define float_type double
+#endif
+
+#define __CONCATX(a,b) __CONCAT(a,b)
+
+float_type
+__CONCATX(__kernel_,FUNC) (x, y, iy)
+     float_type x;
+     float_type y;
+     int iy;
+{
+  float_type sin_x, cos_x, sin_y, cos_y;
+  if (iy == 0)
+    return __m81_u(__CONCATX(__,FUNC)) (x);
+  __asm__ __volatile__ ("fsincosx %2,%0:%1" : "=f" (cos_x), "=f" (sin_x)
+			: "f" (x));
+  __asm__ __volatile__ ("fsincosx %2,%0:%1" : "=f" (cos_y), "=f" (sin_y)
+			: "f" (y));
+  return sin_x * cos_y + cos_x * sin_y;
+}
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/k_sinf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/k_sinf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/k_sinf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/k_sinf.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,3 @@
+#define FUNC sinf
+#define float_type float
+#include <k_sin.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/k_sinl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/k_sinl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/k_sinl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/k_sinl.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1,3 @@
+#define FUNC sinl
+#define float_type long double
+#include <k_sin.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/k_tan.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/k_tan.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/k_tan.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/k_tan.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,44 @@
+/* Copyright (C) 1996, 1997 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <math.h>
+#include "math_private.h"
+
+#ifndef FUNC
+#define FUNC tan
+#endif
+#ifndef float_type
+#define float_type double
+#endif
+
+#define __CONCATX(a,b) __CONCAT(a,b)
+
+float_type
+__CONCATX(__kernel_,FUNC) (x, y, iy)
+     float_type x;
+     float_type y;
+     int iy;
+{
+  float_type tan_x, tan_y;
+  tan_x = __m81_u(__CONCATX(__,FUNC)) (x);
+  tan_y = __m81_u(__CONCATX(__,FUNC)) (y);
+  if (iy > 0)
+    return (tan_x + tan_y) / (1 - tan_x * tan_y);
+  else
+    return (tan_x * tan_y - 1) / (tan_x + tan_y);
+}
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/k_tanf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/k_tanf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/k_tanf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/k_tanf.c	2007-03-27 15:01:11.000000000 +0200
@@ -0,0 +1,3 @@
+#define FUNC tanf
+#define float_type float
+#include <k_tan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/k_tanl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/k_tanl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/k_tanl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/k_tanl.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,3 @@
+#define FUNC tanl
+#define float_type long double
+#include <k_tan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/libm-test-ulps glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/libm-test-ulps
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/libm-test-ulps	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/libm-test-ulps	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,1165 @@
+# Begin of automatic generation
+
+# acosh
+Test "acosh (7) == 2.63391579384963341725009269461593689":
+ildouble: 1
+ldouble: 1
+
+# asinh
+Test "asinh (0.75) == 0.693147180559945309417232121458176568":
+ildouble: 1
+ldouble: 1
+
+# atan2
+Test "atan2 (0.390625, .00029) == 1.57005392693128974780151246612928941":
+ildouble: 1
+ldouble: 1
+Test "atan2 (1.390625, 0.9296875) == 0.981498387184244311516296577615519772":
+ildouble: 1
+ldouble: 1
+
+# atanh
+Test "atanh (0.75) == 0.972955074527656652552676371721589865":
+ildouble: 1
+ldouble: 1
+
+# cacos
+Test "Real part of: cacos (0.75 + 1.25 i) == 1.11752014915610270578240049553777969 - 1.13239363160530819522266333696834467 i":
+float: 2
+ifloat: 2
+ildouble: 1
+ldouble: 1
+Test "Imaginary part of: cacos (0.75 + 1.25 i) == 1.11752014915610270578240049553777969 - 1.13239363160530819522266333696834467 i":
+float: 1
+ifloat: 1
+ildouble: 2
+ldouble: 2
+
+# cacosh
+Test "Real part of: cacosh (-2 - 3 i) == 1.9833870299165354323470769028940395 - 2.1414491111159960199416055713254211 i":
+double: 1
+float: 7
+idouble: 1
+ifloat: 7
+ildouble: 6
+ldouble: 6
+Test "Imaginary part of: cacosh (-2 - 3 i) == 1.9833870299165354323470769028940395 - 2.1414491111159960199416055713254211 i":
+double: 1
+idouble: 1
+ildouble: 2
+ldouble: 2
+Test "Real part of: cacosh (0.75 + 1.25 i) == 1.13239363160530819522266333696834467 + 1.11752014915610270578240049553777969 i":
+ildouble: 1
+ldouble: 1
+Test "Imaginary part of: cacosh (0.75 + 1.25 i) == 1.13239363160530819522266333696834467 + 1.11752014915610270578240049553777969 i":
+float: 1
+ifloat: 1
+
+# casin
+Test "Real part of: casin (0.75 + 1.25 i) == 0.453276177638793913448921196101971749 + 1.13239363160530819522266333696834467 i":
+double: 1
+float: 5
+idouble: 1
+ifloat: 5
+ildouble: 3
+ldouble: 3
+Test "Imaginary part of: casin (0.75 + 1.25 i) == 0.453276177638793913448921196101971749 + 1.13239363160530819522266333696834467 i":
+float: 1
+ifloat: 1
+ildouble: 2
+ldouble: 2
+
+# casinh
+Test "Real part of: casinh (-2 - 3 i) == -1.9686379257930962917886650952454982 - 0.96465850440760279204541105949953237 i":
+double: 6
+float: 19
+idouble: 6
+ifloat: 19
+ildouble: 5
+ldouble: 5
+Test "Imaginary part of: casinh (-2 - 3 i) == -1.9686379257930962917886650952454982 - 0.96465850440760279204541105949953237 i":
+double: 13
+float: 1
+idouble: 13
+ifloat: 1
+ildouble: 6
+ldouble: 6
+Test "Real part of: casinh (0.75 + 1.25 i) == 1.03171853444778027336364058631006594 + 0.911738290968487636358489564316731207 i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: casinh (0.75 + 1.25 i) == 1.03171853444778027336364058631006594 + 0.911738290968487636358489564316731207 i":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+
+# catan
+Test "Imaginary part of: catan (-2 - 3 i) == -1.4099210495965755225306193844604208 - 0.22907268296853876629588180294200276 i":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+Test "Real part of: catan (0.75 + 1.25 i) == 1.10714871779409050301706546017853704 + 0.549306144334054845697622618461262852 i":
+ildouble: 1
+ldouble: 1
+
+# catanh
+Test "Real part of: catanh (-2 - 3 i) == -0.14694666622552975204743278515471595 - 1.3389725222944935611241935759091443 i":
+ildouble: 1
+ldouble: 1
+
+# cbrt
+Test "cbrt (-0.001) == -0.1":
+ildouble: 1
+ldouble: 1
+Test "cbrt (0.9921875) == 0.997389022060725270579075195353955217":
+ildouble: 1
+ldouble: 1
+
+# ccos
+Test "Real part of: ccos (-2 - 3 i) == -4.18962569096880723013255501961597373 - 9.10922789375533659797919726277886212 i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: ccos (-2 - 3 i) == -4.18962569096880723013255501961597373 - 9.10922789375533659797919726277886212 i":
+float: 1
+ifloat: 1
+Test "Real part of: ccos (0.75 + 1.25 i) == 1.38173873063425888530729933139078645 - 1.09193013555397466170919531722024128 i":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+Test "Imaginary part of: ccos (0.75 + 1.25 i) == 1.38173873063425888530729933139078645 - 1.09193013555397466170919531722024128 i":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+
+# ccosh
+Test "Real part of: ccosh (-2 - 3 i) == -3.72454550491532256547397070325597253 + 0.511822569987384608834463849801875634 i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: ccosh (-2 - 3 i) == -3.72454550491532256547397070325597253 + 0.511822569987384608834463849801875634 i":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+Test "Real part of: ccosh (0.75 + 1.25 i) == 0.408242591877968807788852146397499084 + 0.780365930845853240391326216300863152 i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: ccosh (0.75 + 1.25 i) == 0.408242591877968807788852146397499084 + 0.780365930845853240391326216300863152 i":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+
+# cexp
+Test "Real part of: cexp (-2.0 - 3.0 i) == -0.13398091492954261346140525546115575 - 0.019098516261135196432576240858800925 i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: cexp (-2.0 - 3.0 i) == -0.13398091492954261346140525546115575 - 0.019098516261135196432576240858800925 i":
+float: 1
+ifloat: 1
+Test "Real part of: cexp (0.75 + 1.25 i) == 0.667537446429131586942201977015932112 + 2.00900045494094876258347228145863909 i":
+float: 2
+ifloat: 2
+Test "Imaginary part of: cexp (0.75 + 1.25 i) == 0.667537446429131586942201977015932112 + 2.00900045494094876258347228145863909 i":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+
+# clog
+Test "Real part of: clog (0.75 + 1.25 i) == 0.376885901188190075998919126749298416 + 1.03037682652431246378774332703115153 i":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+Test "Imaginary part of: clog (0.75 + 1.25 i) == 0.376885901188190075998919126749298416 + 1.03037682652431246378774332703115153 i":
+ildouble: 1
+ldouble: 1
+
+# clog10
+Test "Imaginary part of: clog10 (-0 + inf i) == inf + pi/2*log10(e) i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: clog10 (-0 - inf i) == inf - pi/2*log10(e) i":
+float: 1
+ifloat: 1
+Test "Real part of: clog10 (-2 - 3 i) == 0.556971676153418384603252578971164214 - 0.937554462986374708541507952140189646 i":
+ildouble: 1
+ldouble: 1
+Test "Imaginary part of: clog10 (-3 + inf i) == inf + pi/2*log10(e) i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: clog10 (-3 - inf i) == inf - pi/2*log10(e) i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: clog10 (-inf + 0 i) == inf + pi*log10(e) i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: clog10 (-inf + 1 i) == inf + pi*log10(e) i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: clog10 (-inf + inf i) == inf + 3/4 pi*log10(e) i":
+double: 1
+idouble: 1
+Test "Imaginary part of: clog10 (-inf - 0 i) == inf - pi*log10(e) i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: clog10 (-inf - 1 i) == inf - pi*log10(e) i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: clog10 (0 + inf i) == inf + pi/2*log10(e) i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: clog10 (0 - inf i) == inf - pi/2*log10(e) i":
+float: 1
+ifloat: 1
+Test "Real part of: clog10 (0.75 + 1.25 i) == 0.163679467193165171449476605077428975 + 0.447486970040493067069984724340855636 i":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+Test "Imaginary part of: clog10 (0.75 + 1.25 i) == 0.163679467193165171449476605077428975 + 0.447486970040493067069984724340855636 i":
+double: 1
+idouble: 1
+ildouble: 2
+ldouble: 2
+Test "Imaginary part of: clog10 (3 + inf i) == inf + pi/2*log10(e) i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: clog10 (3 - inf i) == inf - pi/2*log10(e) i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: clog10 (inf + inf i) == inf + pi/4*log10(e) i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: clog10 (inf - inf i) == inf - pi/4*log10(e) i":
+float: 1
+ifloat: 1
+
+# cos
+Test "cos (M_PI_6l * 2.0) == 0.5":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+Test "cos (M_PI_6l * 4.0) == -0.5":
+double: 2
+float: 1
+idouble: 2
+ifloat: 1
+ildouble: 1
+ldouble: 1
+Test "cos (pi/2) == 0":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+
+# cpow
+Test "Real part of: cpow (0.75 + 1.25 i, 0.0 + 1.0 i) == 0.331825439177608832276067945276730566 + 0.131338600281188544930936345230903032 i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: cpow (0.75 + 1.25 i, 0.0 + 1.0 i) == 0.331825439177608832276067945276730566 + 0.131338600281188544930936345230903032 i":
+float: 1
+ifloat: 1
+Test "Real part of: cpow (0.75 + 1.25 i, 0.75 + 1.25 i) == 0.117506293914473555420279832210420483 + 0.346552747708338676483025352060418001 i":
+float: 1
+ifloat: 1
+ildouble: 9
+ldouble: 9
+Test "Imaginary part of: cpow (0.75 + 1.25 i, 0.75 + 1.25 i) == 0.117506293914473555420279832210420483 + 0.346552747708338676483025352060418001 i":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+Test "Real part of: cpow (0.75 + 1.25 i, 1.0 + 0.0 i) == 0.75 + 1.25 i":
+float: 2
+ifloat: 2
+ildouble: 2
+ldouble: 2
+Test "Imaginary part of: cpow (0.75 + 1.25 i, 1.0 + 0.0 i) == 0.75 + 1.25 i":
+float: 2
+ifloat: 2
+ildouble: 1
+ldouble: 1
+Test "Real part of: cpow (0.75 + 1.25 i, 1.0 + 1.0 i) == 0.0846958290317209430433805274189191353 + 0.513285749182902449043287190519090481 i":
+double: 1
+float: 2
+idouble: 1
+ifloat: 2
+ildouble: 15
+ldouble: 15
+Test "Imaginary part of: cpow (0.75 + 1.25 i, 1.0 + 1.0 i) == 0.0846958290317209430433805274189191353 + 0.513285749182902449043287190519090481 i":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+Test "Real part of: cpow (2 + 0 i, 10 + 0 i) == 1024.0 + 0.0 i":
+ildouble: 5
+ldouble: 5
+Test "Real part of: cpow (2 + 3 i, 4 + 0 i) == -119.0 - 120.0 i":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+ildouble: 4
+ldouble: 4
+Test "Imaginary part of: cpow (2 + 3 i, 4 + 0 i) == -119.0 - 120.0 i":
+float: 6
+ifloat: 6
+ildouble: 2
+ldouble: 2
+Test "Real part of: cpow (e + 0 i, 0 + 2 * M_PIl i) == 1.0 + 0.0 i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: cpow (e + 0 i, 0 + 2 * M_PIl i) == 1.0 + 0.0 i":
+double: 2
+float: 3
+idouble: 2
+ifloat: 3
+ildouble: 1
+ldouble: 1
+
+# csin
+Test "Real part of: csin (-2 - 3 i) == -9.15449914691142957346729954460983256 + 4.16890695996656435075481305885375484 i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: csin (-2 - 3 i) == -9.15449914691142957346729954460983256 + 4.16890695996656435075481305885375484 i":
+float: 1
+ifloat: 1
+Test "Real part of: csin (0.75 + 1.25 i) == 1.28722291002649188575873510790565441 + 1.17210635989270256101081285116138863 i":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+Test "Imaginary part of: csin (0.75 + 1.25 i) == 1.28722291002649188575873510790565441 + 1.17210635989270256101081285116138863 i":
+float: 1
+ifloat: 1
+
+# csinh
+Test "Real part of: csinh (-2 - 3 i) == 3.59056458998577995201256544779481679 - 0.530921086248519805267040090660676560 i":
+float: 1
+ifloat: 1
+Test "Imaginary part of: csinh (-2 - 3 i) == 3.59056458998577995201256544779481679 - 0.530921086248519805267040090660676560 i":
+float: 1
+ifloat: 1
+Test "Real part of: csinh (0.75 + 1.25 i) == 0.259294854551162779153349830618433028 + 1.22863452409509552219214606515777594 i":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+Test "Imaginary part of: csinh (0.75 + 1.25 i) == 0.259294854551162779153349830618433028 + 1.22863452409509552219214606515777594 i":
+float: 1
+ifloat: 1
+
+# ctan
+Test "Real part of: ctan (-2 - 3 i) == 0.376402564150424829275122113032269084e-2 - 1.00323862735360980144635859782192726 i":
+double: 1
+idouble: 1
+ildouble: 1
+ldouble: 1
+Test "Real part of: ctan (0.75 + 1.25 i) == 0.160807785916206426725166058173438663 + 0.975363285031235646193581759755216379 i":
+ildouble: 1
+ldouble: 1
+Test "Imaginary part of: ctan (0.75 + 1.25 i) == 0.160807785916206426725166058173438663 + 0.975363285031235646193581759755216379 i":
+ildouble: 2
+ldouble: 2
+
+# ctanh
+Test "Imaginary part of: ctanh (-2 - 3 i) == -0.965385879022133124278480269394560686 + 0.988437503832249372031403430350121098e-2 i":
+ildouble: 1
+ldouble: 1
+Test "Imaginary part of: ctanh (0 + pi/4 i) == 0.0 + 1.0 i":
+double: 1
+idouble: 1
+Test "Imaginary part of: ctanh (0.75 + 1.25 i) == 1.37260757053378320258048606571226857 + 0.385795952609750664177596760720790220 i":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+
+# erfc
+Test "erfc (0.75) == 0.288844366346484868401062165408589223":
+float: 1
+ifloat: 1
+Test "erfc (1.25) == 0.0770998717435417698634765188027188596":
+ildouble: 1
+ldouble: 1
+Test "erfc (4.125) == 0.542340079956506600531223408575531062e-8":
+float: 1
+ifloat: 1
+
+# expm1
+Test "expm1 (1) == M_El - 1.0":
+ildouble: 1
+ldouble: 1
+
+# gamma
+Test "gamma (-0.5) == log(2*sqrt(pi))":
+ildouble: 1
+ldouble: 1
+Test "gamma (0.5) == log(sqrt(pi))":
+ildouble: 1
+ldouble: 1
+Test "gamma (3) == M_LN2l":
+ildouble: 1
+ldouble: 1
+
+# hypot
+Test "hypot (-0.7, -12.4) == 12.419742348374220601176836866763271":
+float: 1
+ifloat: 1
+Test "hypot (-0.7, 12.4) == 12.419742348374220601176836866763271":
+float: 1
+ifloat: 1
+Test "hypot (-12.4, -0.7) == 12.419742348374220601176836866763271":
+float: 1
+ifloat: 1
+Test "hypot (-12.4, 0.7) == 12.419742348374220601176836866763271":
+float: 1
+ifloat: 1
+Test "hypot (0.7, -12.4) == 12.419742348374220601176836866763271":
+float: 1
+ifloat: 1
+Test "hypot (0.7, 12.4) == 12.419742348374220601176836866763271":
+float: 1
+ifloat: 1
+Test "hypot (12.4, -0.7) == 12.419742348374220601176836866763271":
+float: 1
+ifloat: 1
+Test "hypot (12.4, 0.7) == 12.419742348374220601176836866763271":
+float: 1
+ifloat: 1
+
+# j0
+Test "j0 (-4.0) == -3.9714980986384737228659076845169804197562E-1":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+Test "j0 (0.75) == 0.864242275166648623555731103820923211":
+float: 1
+ifloat: 1
+Test "j0 (1.5) == 0.511827671735918128749051744283411720":
+float: 1
+ifloat: 1
+Test "j0 (10.0) == -0.245935764451348335197760862485328754":
+double: 1
+idouble: 1
+Test "j0 (4.0) == -3.9714980986384737228659076845169804197562E-1":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+
+# j1
+Test "j1 (-1.0) == -0.440050585744933515959682203718914913":
+float: 1
+ifloat: 1
+Test "j1 (1.0) == 0.440050585744933515959682203718914913":
+float: 1
+ifloat: 1
+Test "j1 (1.5) == 0.557936507910099641990121213156089400":
+float: 1
+ifloat: 1
+Test "j1 (10.0) == 0.0434727461688614366697487680258592883":
+float: 2
+ifloat: 2
+ildouble: 1
+ldouble: 1
+Test "j1 (2.0) == 0.576724807756873387202448242269137087":
+float: 1
+ifloat: 1
+Test "j1 (8.0) == 0.234636346853914624381276651590454612":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+
+# jn
+Test "jn (0, -4.0) == -3.9714980986384737228659076845169804197562E-1":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+Test "jn (0, 0.75) == 0.864242275166648623555731103820923211":
+float: 1
+ifloat: 1
+Test "jn (0, 1.5) == 0.511827671735918128749051744283411720":
+float: 1
+ifloat: 1
+Test "jn (0, 10.0) == -0.245935764451348335197760862485328754":
+double: 1
+idouble: 1
+Test "jn (0, 4.0) == -3.9714980986384737228659076845169804197562E-1":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+Test "jn (1, -1.0) == -0.440050585744933515959682203718914913":
+float: 1
+ifloat: 1
+Test "jn (1, 1.0) == 0.440050585744933515959682203718914913":
+float: 1
+ifloat: 1
+Test "jn (1, 1.5) == 0.557936507910099641990121213156089400":
+float: 1
+ifloat: 1
+Test "jn (1, 10.0) == 0.0434727461688614366697487680258592883":
+float: 2
+ifloat: 2
+ildouble: 1
+ldouble: 1
+Test "jn (1, 2.0) == 0.576724807756873387202448242269137087":
+float: 1
+ifloat: 1
+Test "jn (1, 8.0) == 0.234636346853914624381276651590454612":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+Test "jn (10, -1.0) == 0.263061512368745320699785368779050294e-9":
+float: 2
+ifloat: 2
+ildouble: 1
+ldouble: 1
+Test "jn (10, 0.125) == 0.250543369809369890173993791865771547e-18":
+float: 1
+ifloat: 1
+Test "jn (10, 0.75) == 0.149621713117596814698712483621682835e-10":
+float: 2
+ifloat: 2
+ildouble: 2
+ldouble: 2
+Test "jn (10, 1.0) == 0.263061512368745320699785368779050294e-9":
+float: 2
+ifloat: 2
+ildouble: 1
+ldouble: 1
+Test "jn (10, 10.0) == 0.207486106633358857697278723518753428":
+double: 1
+float: 5
+idouble: 1
+ifloat: 5
+ildouble: 2
+ldouble: 2
+Test "jn (10, 2.0) == 0.251538628271673670963516093751820639e-6":
+float: 2
+ifloat: 2
+ildouble: 1
+ldouble: 1
+Test "jn (3, -1.0) == -0.0195633539826684059189053216217515083":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+Test "jn (3, 1.0) == 0.0195633539826684059189053216217515083":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+Test "jn (3, 10.0) == 0.0583793793051868123429354784103409563":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+Test "jn (3, 2.0) == 0.128943249474402051098793332969239835":
+ildouble: 1
+ldouble: 1
+
+# lgamma
+Test "lgamma (-0.5) == log(2*sqrt(pi))":
+ildouble: 1
+ldouble: 1
+Test "lgamma (0.5) == log(sqrt(pi))":
+ildouble: 1
+ldouble: 1
+Test "lgamma (0.7) == 0.260867246531666514385732417016759578":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+Test "lgamma (1.2) == -0.853740900033158497197028392998854470e-1":
+double: 1
+float: 2
+idouble: 1
+ifloat: 2
+ildouble: 1
+ldouble: 1
+Test "lgamma (3) == M_LN2l":
+ildouble: 1
+ldouble: 1
+
+# log
+Test "log (0.75) == -0.287682072451780927439219005993827432":
+ildouble: 1
+ldouble: 1
+Test "log (2) == M_LN2l":
+ildouble: 1
+ldouble: 1
+Test "log (e) == 1":
+float: 1
+ifloat: 1
+
+# log10
+Test "log10 (0.75) == -0.124938736608299953132449886193870744":
+ildouble: 2
+ldouble: 2
+Test "log10 (e) == log10(e)":
+float: 1
+ifloat: 1
+
+# log1p
+Test "log1p (-0.25) == -0.287682072451780927439219005993827432":
+ildouble: 1
+ldouble: 1
+
+# log2
+Test "log2 (0.75) == -.415037499278843818546261056052183492":
+ildouble: 1
+ldouble: 1
+
+# pow
+Test "pow (0.75, 1.25) == 0.697953644326574699205914060237425566":
+ildouble: 1
+ldouble: 1
+
+# sincos
+Test "sincos (M_PI_6l*2.0, &sin_res, &cos_res) puts 0.5 in cos_res":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+Test "sincos (M_PI_6l*2.0, &sin_res, &cos_res) puts 0.86602540378443864676372317075293616 in sin_res":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+Test "sincos (pi/2, &sin_res, &cos_res) puts 0 in cos_res":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+
+# sinh
+Test "sinh (0.75) == 0.822316731935829980703661634446913849":
+ildouble: 1
+ldouble: 1
+
+# tan
+Test "tan (0.75) == 0.931596459944072461165202756573936428":
+ildouble: 1
+ldouble: 1
+Test "tan (pi/4) == 1":
+double: 1
+idouble: 1
+
+# tgamma
+Test "tgamma (-0.5) == -2 sqrt (pi)":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+Test "tgamma (0.5) == sqrt (pi)":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+Test "tgamma (0.7) == 1.29805533264755778568117117915281162":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+Test "tgamma (4) == 6":
+ildouble: 1
+ldouble: 1
+
+# y0
+Test "y0 (0.125) == -1.38968062514384052915582277745018693":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+Test "y0 (0.75) == -0.137172769385772397522814379396581855":
+double: 1
+idouble: 1
+ildouble: 2
+ldouble: 2
+Test "y0 (1.0) == 0.0882569642156769579829267660235151628":
+ildouble: 1
+ldouble: 1
+Test "y0 (1.5) == 0.382448923797758843955068554978089862":
+ildouble: 1
+ldouble: 1
+Test "y0 (10.0) == 0.0556711672835993914244598774101900481":
+ildouble: 1
+ldouble: 1
+Test "y0 (2.0) == 0.510375672649745119596606592727157873":
+float: 1
+ifloat: 1
+Test "y0 (8.0) == 0.223521489387566220527323400498620359":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+
+# y1
+Test "y1 (0.125) == -5.19993611253477499595928744876579921":
+ildouble: 1
+ldouble: 1
+Test "y1 (1.0) == -0.781212821300288716547150000047964821":
+double: 1
+idouble: 1
+Test "y1 (10.0) == 0.249015424206953883923283474663222803":
+float: 1
+ifloat: 1
+Test "y1 (2.0) == -0.107032431540937546888370772277476637":
+float: 2
+ifloat: 2
+ildouble: 1
+ldouble: 1
+Test "y1 (8.0) == -0.158060461731247494255555266187483550":
+ildouble: 1
+ldouble: 1
+
+# yn
+Test "yn (0, 0.125) == -1.38968062514384052915582277745018693":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+Test "yn (0, 0.75) == -0.137172769385772397522814379396581855":
+double: 1
+idouble: 1
+ildouble: 2
+ldouble: 2
+Test "yn (0, 1.0) == 0.0882569642156769579829267660235151628":
+ildouble: 1
+ldouble: 1
+Test "yn (0, 1.5) == 0.382448923797758843955068554978089862":
+ildouble: 1
+ldouble: 1
+Test "yn (0, 10.0) == 0.0556711672835993914244598774101900481":
+ildouble: 1
+ldouble: 1
+Test "yn (0, 2.0) == 0.510375672649745119596606592727157873":
+float: 1
+ifloat: 1
+Test "yn (0, 8.0) == 0.223521489387566220527323400498620359":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+Test "yn (1, 0.125) == -5.19993611253477499595928744876579921":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+Test "yn (1, 0.75) == -1.03759455076928541973767132140642198":
+float: 1
+ifloat: 1
+Test "yn (1, 1.0) == -0.781212821300288716547150000047964821":
+double: 1
+idouble: 1
+Test "yn (1, 10.0) == 0.249015424206953883923283474663222803":
+float: 1
+ifloat: 1
+Test "yn (1, 2.0) == -0.107032431540937546888370772277476637":
+float: 2
+ifloat: 2
+ildouble: 1
+ldouble: 1
+Test "yn (1, 8.0) == -0.158060461731247494255555266187483550":
+ildouble: 1
+ldouble: 1
+Test "yn (10, 0.125) == -127057845771019398.252538486899753195":
+double: 1
+idouble: 1
+ildouble: 2
+ldouble: 2
+Test "yn (10, 0.75) == -2133501638.90573424452445412893839236":
+float: 1
+ifloat: 1
+ildouble: 4
+ldouble: 4
+Test "yn (10, 10.0) == -0.359814152183402722051986577343560609":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+Test "yn (3, 0.125) == -2612.69757350066712600220955744091741":
+ildouble: 1
+ldouble: 1
+Test "yn (3, 0.75) == -12.9877176234475433186319774484809207":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+ildouble: 2
+ldouble: 2
+Test "yn (3, 2.0) == -1.12778377684042778608158395773179238":
+float: 1
+ifloat: 1
+
+# Maximal error of functions:
+Function: "acosh":
+ildouble: 1
+ldouble: 1
+
+Function: "asinh":
+ildouble: 1
+ldouble: 1
+
+Function: "atan2":
+ildouble: 1
+ldouble: 1
+
+Function: "atanh":
+ildouble: 1
+ldouble: 1
+
+Function: Real part of "cacos":
+float: 2
+ifloat: 2
+ildouble: 1
+ldouble: 1
+
+Function: Imaginary part of "cacos":
+float: 1
+ifloat: 1
+ildouble: 2
+ldouble: 2
+
+Function: Real part of "cacosh":
+double: 1
+float: 7
+idouble: 1
+ifloat: 7
+ildouble: 6
+ldouble: 6
+
+Function: Imaginary part of "cacosh":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+ildouble: 2
+ldouble: 2
+
+Function: Real part of "casin":
+double: 1
+float: 5
+idouble: 1
+ifloat: 5
+ildouble: 3
+ldouble: 3
+
+Function: Imaginary part of "casin":
+float: 1
+ifloat: 1
+ildouble: 2
+ldouble: 2
+
+Function: Real part of "casinh":
+double: 6
+float: 19
+idouble: 6
+ifloat: 19
+ildouble: 5
+ldouble: 5
+
+Function: Imaginary part of "casinh":
+double: 13
+float: 1
+idouble: 13
+ifloat: 1
+ildouble: 6
+ldouble: 6
+
+Function: Real part of "catan":
+ildouble: 1
+ldouble: 1
+
+Function: Imaginary part of "catan":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+
+Function: Real part of "catanh":
+ildouble: 1
+ldouble: 1
+
+Function: "cbrt":
+ildouble: 1
+ldouble: 1
+
+Function: Real part of "ccos":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+
+Function: Imaginary part of "ccos":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+
+Function: Real part of "ccosh":
+float: 1
+ifloat: 1
+
+Function: Imaginary part of "ccosh":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+
+Function: Real part of "cexp":
+float: 2
+ifloat: 2
+
+Function: Imaginary part of "cexp":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+
+Function: Real part of "clog":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+
+Function: Imaginary part of "clog":
+ildouble: 1
+ldouble: 1
+
+Function: Real part of "clog10":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+
+Function: Imaginary part of "clog10":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+ildouble: 2
+ldouble: 2
+
+Function: "cos":
+double: 2
+float: 1
+idouble: 2
+ifloat: 1
+ildouble: 1
+ldouble: 1
+
+Function: Real part of "cpow":
+double: 1
+float: 2
+idouble: 1
+ifloat: 2
+ildouble: 15
+ldouble: 15
+
+Function: Imaginary part of "cpow":
+double: 2
+float: 6
+idouble: 2
+ifloat: 6
+ildouble: 2
+ldouble: 2
+
+Function: Real part of "csin":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+
+Function: Imaginary part of "csin":
+float: 1
+ifloat: 1
+
+Function: Real part of "csinh":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+
+Function: Imaginary part of "csinh":
+float: 1
+ifloat: 1
+
+Function: Real part of "ctan":
+double: 1
+idouble: 1
+ildouble: 1
+ldouble: 1
+
+Function: Imaginary part of "ctan":
+ildouble: 2
+ldouble: 2
+
+Function: Imaginary part of "ctanh":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+
+Function: "erfc":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+
+Function: "expm1":
+ildouble: 1
+ldouble: 1
+
+Function: "gamma":
+ildouble: 1
+ldouble: 1
+
+Function: "hypot":
+float: 1
+ifloat: 1
+
+Function: "j0":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+
+Function: "j1":
+float: 2
+ifloat: 2
+ildouble: 1
+ldouble: 1
+
+Function: "jn":
+double: 1
+float: 5
+idouble: 1
+ifloat: 5
+ildouble: 2
+ldouble: 2
+
+Function: "lgamma":
+double: 1
+float: 2
+idouble: 1
+ifloat: 2
+ildouble: 1
+ldouble: 1
+
+Function: "log":
+float: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+
+Function: "log10":
+float: 1
+ifloat: 1
+ildouble: 2
+ldouble: 2
+
+Function: "log1p":
+ildouble: 1
+ldouble: 1
+
+Function: "log2":
+ildouble: 1
+ldouble: 1
+
+Function: "pow":
+ildouble: 1
+ldouble: 1
+
+Function: "sincos":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+
+Function: "sinh":
+ildouble: 1
+ldouble: 1
+
+Function: "tan":
+double: 1
+idouble: 1
+ildouble: 1
+ldouble: 1
+
+Function: "tgamma":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+ildouble: 1
+ldouble: 1
+
+Function: "y0":
+double: 1
+float: 1
+idouble: 1
+ifloat: 1
+ildouble: 2
+ldouble: 2
+
+Function: "y1":
+double: 1
+float: 2
+idouble: 1
+ifloat: 2
+ildouble: 1
+ldouble: 1
+
+Function: "yn":
+double: 1
+float: 2
+idouble: 1
+ifloat: 2
+ildouble: 4
+ldouble: 4
+
+# end of automatic generation
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/Makefile glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/Makefile
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/Makefile	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,11 @@
+ifeq	($(subdir),math)
+ifndef	math-twiddled
+
+# Avoid twiddling in generic/Makefile.
+math-twiddled := t
+
+endif
+
+bsdmath_dirs := $(bsdmath_dirs) mc68881
+
+endif
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/mathimpl.h glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/mathimpl.h
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/mathimpl.h	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/mathimpl.h	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,94 @@
+/* Definitions of libc internal inline math functions implemented
+   by the m68881/2.
+   Copyright (C) 1991,92,93,94,96,97,98,99 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+/* This file contains the definitions of the inline math functions that
+   are only used internally inside libm, not visible to the user.  */
+
+__inline_mathop	(__ieee754_acos, acos)
+__inline_mathop	(__ieee754_asin, asin)
+__inline_mathop	(__ieee754_cosh, cosh)
+__inline_mathop	(__ieee754_sinh, sinh)
+__inline_mathop	(__ieee754_exp, etox)
+__inline_mathop	(__ieee754_exp2, twotox)
+__inline_mathop	(__ieee754_exp10, tentox)
+__inline_mathop	(__ieee754_log10, log10)
+__inline_mathop	(__ieee754_log2, log2)
+__inline_mathop	(__ieee754_log, logn)
+__inline_mathop	(__ieee754_sqrt, sqrt)
+__inline_mathop	(__ieee754_atanh, atanh)
+
+__m81_defun (double, __ieee754_remainder, (double __x, double __y))
+{
+  double __result;
+  __asm ("frem%.x %1, %0" : "=f" (__result) : "f" (__y), "0" (__x));
+  return __result;
+}
+
+__m81_defun (float, __ieee754_remainderf, (float __x, float __y))
+{
+  float __result;
+  __asm ("frem%.x %1, %0" : "=f" (__result) : "f" (__y), "0" (__x));
+  return __result;
+}
+
+__m81_defun (long double,
+	     __ieee754_remainderl, (long double __x, long double __y))
+{
+  long double __result;
+  __asm ("frem%.x %1, %0" : "=f" (__result) : "f" (__y), "0" (__x));
+  return __result;
+}
+
+__m81_defun (double, __ieee754_fmod, (double __x, double __y))
+{
+  double __result;
+  __asm ("fmod%.x %1, %0" : "=f" (__result) : "f" (__y), "0" (__x));
+  return __result;
+}
+
+__m81_defun (float, __ieee754_fmodf, (float __x, float __y))
+{
+  float __result;
+  __asm ("fmod%.x %1, %0" : "=f" (__result) : "f" (__y), "0" (__x));
+  return __result;
+}
+
+__m81_defun (long double,
+	     __ieee754_fmodl, (long double __x, long double __y))
+{
+  long double __result;
+  __asm ("fmod%.x %1, %0" : "=f" (__result) : "f" (__y), "0" (__x));
+  return __result;
+}
+
+/* Get the m68881 condition codes, to quickly check multiple conditions.  */
+static __inline__ unsigned long
+__m81_test (long double __val)
+{
+  unsigned long __fpsr;
+  __asm ("ftst%.x %1; fmove%.l %/fpsr,%0" : "=dm" (__fpsr) : "f" (__val));
+  return __fpsr;
+}
+
+/* Bit values returned by __m81_test.  */
+#define __M81_COND_NAN  (1 << 24)
+#define __M81_COND_INF  (2 << 24)
+#define __M81_COND_ZERO (4 << 24)
+#define __M81_COND_NEG  (8 << 24)
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/mpa.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/mpa.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/mpa.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/mpa.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1 @@
+/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/mpatan2.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/mpatan2.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/mpatan2.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/mpatan2.c	2007-03-27 15:01:12.000000000 +0200
@@ -0,0 +1 @@
+/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/mpatan.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/mpatan.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/mpatan.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/mpatan.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1 @@
+/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/mpexp.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/mpexp.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/mpexp.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/mpexp.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1 @@
+/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/mplog.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/mplog.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/mplog.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/mplog.c	2007-03-27 15:01:12.000000000 +0200
@@ -0,0 +1 @@
+/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/mpsqrt.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/mpsqrt.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/mpsqrt.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/mpsqrt.c	2007-03-27 15:01:12.000000000 +0200
@@ -0,0 +1 @@
+/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/mptan.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/mptan.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/mptan.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/mptan.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1 @@
+/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_atan.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_atan.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_atan.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_atan.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,38 @@
+/* Copyright (C) 1996, 1997 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <math.h>
+
+#ifndef FUNC
+#define FUNC atan
+#endif
+#ifndef float_type
+#define float_type double
+#endif
+
+#define __CONCATX(a,b) __CONCAT(a,b)
+
+float_type
+__CONCATX(__,FUNC) (x)
+     float_type x;
+{
+  return __m81_u(__CONCATX(__,FUNC))(x);
+}
+
+#define weak_aliasx(a,b) weak_alias(a,b)
+weak_aliasx (__CONCATX(__,FUNC), FUNC)
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_atanf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_atanf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_atanf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_atanf.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,5 @@
+#ifndef FUNC
+#define FUNC atanf
+#endif
+#define float_type float
+#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_atanl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_atanl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_atanl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_atanl.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1,5 @@
+#ifndef FUNC
+#define FUNC atanl
+#endif
+#define float_type long double
+#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_ccos.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_ccos.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_ccos.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_ccos.c	2007-03-27 15:01:11.000000000 +0200
@@ -0,0 +1,73 @@
+/* Complex cosine function.  m68k fpu version
+   Copyright (C) 1997, 1999 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Andreas Schwab <schwab@issan.informatik.uni-dortmund.de>.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <complex.h>
+#include <math.h>
+#include "mathimpl.h"
+
+#ifndef SUFF
+#define SUFF
+#endif
+#ifndef float_type
+#define float_type double
+#endif
+
+#define CONCATX(a,b) __CONCAT(a,b)
+#define s(name) CONCATX(name,SUFF)
+#define m81(func) __m81_u(s(func))
+
+__complex__ float_type
+s(__ccos) (__complex__ float_type x)
+{
+  __complex__ float_type retval;
+  unsigned long rx_cond = __m81_test (__real__ x);
+
+  if ((rx_cond & (__M81_COND_INF|__M81_COND_NAN)) == 0)
+    {
+      /* Real part is finite.  */
+      float_type sin_rx, cos_rx;
+
+      __asm ("fsincos%.x %2,%1:%0" : "=f" (sin_rx), "=f" (cos_rx)
+	     : "f" (__real__ x));
+      __real__ retval = cos_rx * m81(__ieee754_cosh) (__imag__ x);
+      if (rx_cond & __M81_COND_ZERO)
+	__imag__ retval = (m81(__signbit) (__imag__ x)
+			   ? __real__ x : -__real__ x);
+      else
+	__imag__ retval = -sin_rx * m81(__ieee754_sinh) (__imag__ x);
+    }
+  else
+    {
+      unsigned long ix_cond = __m81_test (__imag__ x);
+
+      if (ix_cond & __M81_COND_INF)
+	__real__ retval = s(fabs) (__imag__ x);
+      else
+	__real__ retval = __real__ x - __real__ x;
+      if (ix_cond & __M81_COND_ZERO)
+	__imag__ retval = __imag__ x;
+      else
+	__imag__ retval = __real__ x - __real__ x;
+    }
+
+  return retval;
+}
+#define weak_aliasx(a,b) weak_alias(a,b)
+weak_aliasx (s(__ccos), s(ccos))
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_ccosf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_ccosf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_ccosf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_ccosf.c	2007-03-27 15:01:12.000000000 +0200
@@ -0,0 +1,3 @@
+#define SUFF f
+#define float_type float
+#include <s_ccos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_ccosh.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_ccosh.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_ccosh.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_ccosh.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,78 @@
+/* Complex cosine hyperbole function.  m68k fpu version
+   Copyright (C) 1997, 1999 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Andreas Schwab <schwab@issan.informatik.uni-dortmund.de>.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <complex.h>
+#include <math.h>
+#include "mathimpl.h"
+
+#ifndef SUFF
+#define SUFF
+#endif
+#ifndef float_type
+#define float_type double
+#endif
+
+#define CONCATX(a,b) __CONCAT(a,b)
+#define s(name) CONCATX(name,SUFF)
+#define m81(func) __m81_u(s(func))
+
+__complex__ float_type
+s(__ccosh) (__complex__ float_type x)
+{
+  __complex__ float_type retval;
+  unsigned long ix_cond = __m81_test (__imag__ x);
+
+  if ((ix_cond & (__M81_COND_INF|__M81_COND_NAN)) == 0)
+    {
+      /* Imaginary part is finite.  */
+      float_type sin_ix, cos_ix;
+
+      __asm ("fsincos%.x %2,%1:%0" : "=f" (sin_ix), "=f" (cos_ix)
+	     : "f" (__imag__ x));
+      __real__ retval = cos_ix * m81(__ieee754_cosh) (__real__ x);
+      if (ix_cond & __M81_COND_ZERO)
+	__imag__ retval = (m81(__signbit) (__real__ x)
+			   ? -__imag__ x : __imag__ x);
+      else
+	__imag__ retval = sin_ix * m81(__ieee754_sinh) (__real__ x);
+    }
+  else
+    {
+      unsigned long rx_cond = __m81_test (__real__ x);
+
+      if (rx_cond & __M81_COND_ZERO)
+	{
+	  __real__ retval = __imag__ x - __imag__ x;
+	  __imag__ retval = __real__ x;
+	}
+      else
+	{
+	  if (rx_cond & __M81_COND_INF)
+	    __real__ retval = s(fabs) (__real__ x);
+	  else
+	    __real__ retval = 0.0/0.0;
+	  __imag__ retval = __imag__ x - __imag__ x;
+	}
+    }
+
+  return retval;
+}
+#define weak_aliasx(a,b) weak_alias(a,b)
+weak_aliasx (s(__ccosh), s(ccosh))
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_ccoshf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_ccoshf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_ccoshf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_ccoshf.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1,3 @@
+#define SUFF f
+#define float_type float
+#include <s_ccosh.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_ccoshl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_ccoshl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_ccoshl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_ccoshl.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,3 @@
+#define SUFF l
+#define float_type long double
+#include <s_ccosh.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_ccosl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_ccosl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_ccosl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_ccosl.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,3 @@
+#define SUFF l
+#define float_type long double
+#include <s_ccos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_ceil.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_ceil.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_ceil.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_ceil.c	2007-03-27 15:01:11.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	ceil
+#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_ceilf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_ceilf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_ceilf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_ceilf.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	ceilf
+#include <s_atanf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_ceill.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_ceill.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_ceill.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_ceill.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC ceill
+#include <s_atanl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_cexp.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_cexp.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_cexp.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_cexp.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,117 @@
+/* Complex exponential function.  m68k fpu version
+   Copyright (C) 1997, 1999 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Andreas Schwab <schwab@issan.informatik.uni-dortmund.de>
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <complex.h>
+#include <math.h>
+#include "mathimpl.h"
+
+#ifndef SUFF
+#define SUFF
+#endif
+#ifndef float_type
+#define float_type double
+#endif
+
+#define CONCATX(a,b) __CONCAT(a,b)
+#define s(name) CONCATX(name,SUFF)
+#define m81(func) __m81_u(s(func))
+
+__complex__ float_type
+s(__cexp) (__complex__ float_type x)
+{
+  __complex__ float_type retval;
+  unsigned long ix_cond;
+
+  ix_cond = __m81_test (__imag__ x);
+
+  if ((ix_cond & (__M81_COND_NAN|__M81_COND_INF)) == 0)
+    {
+      /* Imaginary part is finite.  */
+      float_type exp_val = m81(__ieee754_exp) (__real__ x);
+
+      __real__ retval = __imag__ retval = exp_val;
+      if (m81(__finite) (exp_val))
+	{
+	  float_type sin_ix, cos_ix;
+	  __asm ("fsincos%.x %2,%1:%0" : "=f" (sin_ix), "=f" (cos_ix)
+		 : "f" (__imag__ x));
+	  __real__ retval *= cos_ix;
+	  if (ix_cond & __M81_COND_ZERO)
+	    __imag__ retval = __imag__ x;
+	  else
+	    __imag__ retval *= sin_ix;
+	}
+      else
+	{
+	  /* Compute the sign of the result.  */
+	  float_type remainder, pi_2;
+	  int quadrant;
+
+	  __asm ("fmovecr %#0,%0\n\tfscale%.w %#-1,%0" : "=f" (pi_2));
+	  __asm ("fmod%.x %2,%0\n\tfmove%.l %/fpsr,%1"
+		 : "=f" (remainder), "=dm" (quadrant)
+		 : "f" (pi_2), "0" (__imag__ x));
+	  quadrant = (quadrant >> 16) & 0x83;
+	  if (quadrant & 0x80)
+	    quadrant ^= 0x83;
+	  switch (quadrant)
+	    {
+	    default:
+	      break;
+	    case 1:
+	      __real__ retval = -__real__ retval;
+	      break;
+	    case 2:
+	      __real__ retval = -__real__ retval;
+	    case 3:
+	      __imag__ retval = -__imag__ retval;
+	      break;
+	    }
+	  if (ix_cond & __M81_COND_ZERO && !m81(__isnan) (exp_val))
+	    __imag__ retval = __imag__ x;
+	}
+    }
+  else
+    {
+      unsigned long rx_cond = __m81_test (__real__ x);
+
+      if (rx_cond & __M81_COND_INF)
+	{
+	  /* Real part is infinite.  */
+	  if (rx_cond & __M81_COND_NEG)
+	    {
+	      __real__ retval = __imag__ retval = 0.0;
+	      if (ix_cond & __M81_COND_NEG)
+		__imag__ retval = -__imag__ retval;
+	    }
+	  else
+	    {
+	      __real__ retval = __real__ x;
+	      __imag__ retval = __imag__ x - __imag__ x;
+	    }
+	}
+      else
+	__real__ retval = __imag__ retval = __imag__ x - __imag__ x;
+    }
+
+  return retval;
+}
+#define weak_aliasx(a,b) weak_alias(a,b)
+weak_aliasx (s(__cexp), s(cexp))
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_cexpf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_cexpf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_cexpf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_cexpf.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1,3 @@
+#define SUFF f
+#define float_type float
+#include <s_cexp.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_cexpl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_cexpl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_cexpl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_cexpl.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,3 @@
+#define SUFF l
+#define float_type long double
+#include <s_cexp.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_cos.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_cos.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_cos.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_cos.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	cos
+#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_cosf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_cosf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_cosf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_cosf.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	cosf
+#include <s_atanf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_cosl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_cosl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_cosl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_cosl.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC cosl
+#include <s_atanl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_csin.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_csin.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_csin.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_csin.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,69 @@
+/* Complex sine function.  m68k fpu version
+   Copyright (C) 1997, 1999 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Andreas Schwab <schwab@issan.informatik.uni-dortmund.de>.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <complex.h>
+#include <math.h>
+#include "mathimpl.h"
+
+#ifndef SUFF
+#define SUFF
+#endif
+#ifndef float_type
+#define float_type double
+#endif
+
+#define CONCATX(a,b) __CONCAT(a,b)
+#define s(name) CONCATX(name,SUFF)
+#define m81(func) __m81_u(s(func))
+
+__complex__ float_type
+s(__csin) (__complex__ float_type x)
+{
+  __complex__ float_type retval;
+  unsigned long rx_cond = __m81_test (__real__ x);
+
+  if ((rx_cond & (__M81_COND_INF|__M81_COND_NAN)) == 0)
+    {
+      /* Real part is finite.  */
+      float_type sin_rx, cos_rx;
+
+      __asm ("fsincos%.x %2,%1:%0" : "=f" (sin_rx), "=f" (cos_rx)
+	     : "f" (__real__ x));
+      if (rx_cond & __M81_COND_ZERO)
+	__real__ retval = __real__ x;
+      else
+	__real__ retval = sin_rx * m81(__ieee754_cosh) (__imag__ x);
+      __imag__ retval = cos_rx * m81(__ieee754_sinh) (__imag__ x);
+    }
+  else
+    {
+      unsigned long ix_cond = __m81_test (__imag__ x);
+
+      __real__ retval = __real__ x - __real__ x;
+      if (ix_cond & (__M81_COND_ZERO|__M81_COND_INF|__M81_COND_NAN))
+	__imag__ retval = __imag__ x;
+      else
+	__imag__ retval = __real__ retval;
+    }
+
+  return retval;
+}
+#define weak_aliasx(a,b) weak_alias(a,b)
+weak_aliasx (s(__csin), s(csin))
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_csinf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_csinf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_csinf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_csinf.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,3 @@
+#define SUFF f
+#define float_type float
+#include <s_csin.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_csinh.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_csinh.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_csinh.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_csinh.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1,71 @@
+/* Complex sine hyperbole function.  m68k fpu version
+   Copyright (C) 1997, 1999 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Andreas Schwab <schwab@issan.informatik.uni-dortmund.de>.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <complex.h>
+#include <math.h>
+#include "mathimpl.h"
+
+#ifndef SUFF
+#define SUFF
+#endif
+#ifndef float_type
+#define float_type double
+#endif
+
+#define CONCATX(a,b) __CONCAT(a,b)
+#define s(name) CONCATX(name,SUFF)
+#define m81(func) __m81_u(s(func))
+
+__complex__ float_type
+s(__csinh) (__complex__ float_type x)
+{
+  __complex__ float_type retval;
+  unsigned long ix_cond;
+
+  ix_cond = __m81_test (__imag__ x);
+
+  if ((ix_cond & (__M81_COND_INF|__M81_COND_NAN)) == 0)
+    {
+      /* Imaginary part is finite.  */
+      float_type sin_ix, cos_ix;
+
+      __asm ("fsincos%.x %2,%1:%0" : "=f" (sin_ix), "=f" (cos_ix)
+	     : "f" (__imag__ x));
+      __real__ retval = cos_ix * m81(__ieee754_sinh) (__real__ x);
+      if (ix_cond & __M81_COND_ZERO)
+	__imag__ retval = __imag__ x;
+      else
+	__imag__ retval = sin_ix * m81(__ieee754_cosh) (__real__ x);
+    }
+  else
+    {
+      unsigned long rx_cond = __m81_test (__real__ x);
+
+      __imag__ retval = __imag__ x - __imag__ x;
+      if (rx_cond & (__M81_COND_ZERO|__M81_COND_INF|__M81_COND_NAN))
+	__real__ retval = __real__ x;
+      else
+	__real__ retval = __imag__ retval;
+    }
+
+  return retval;
+}
+#define weak_aliasx(a,b) weak_alias(a,b)
+weak_aliasx (s(__csinh), s(csinh))
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_csinhf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_csinhf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_csinhf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_csinhf.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,3 @@
+#define SUFF f
+#define float_type float
+#include <s_csinh.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_csinhl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_csinhl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_csinhl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_csinhl.c	2007-03-27 15:01:12.000000000 +0200
@@ -0,0 +1,3 @@
+#define SUFF l
+#define float_type long double
+#include <s_csinh.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_csinl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_csinl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_csinl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_csinl.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1,3 @@
+#define SUFF l
+#define float_type long double
+#include <s_csin.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_expm1.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_expm1.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_expm1.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_expm1.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	expm1
+#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_expm1f.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_expm1f.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_expm1f.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_expm1f.c	2007-03-27 15:01:12.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	expm1f
+#include <s_atanf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_expm1l.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_expm1l.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_expm1l.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_expm1l.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,3 @@
+#define FUNC expm1l
+#include <s_atanl.c>
+libm_hidden_def (__expm1l)
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_fabs.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_fabs.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_fabs.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_fabs.c	2007-03-27 15:01:11.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	fabs
+#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_fabsf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_fabsf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_fabsf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_fabsf.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	fabsf
+#include <s_atanf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_fabsl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_fabsl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_fabsl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_fabsl.c	2007-03-27 15:01:12.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC fabsl
+#include <s_atanl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_finite.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_finite.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_finite.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_finite.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	finite
+#include <s_isinf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_finitef.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_finitef.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_finitef.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_finitef.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	finitef
+#include <s_isinff.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_finitel.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_finitel.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_finitel.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_finitel.c	2007-03-27 15:01:12.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC finitel
+#include <s_isinfl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_floor.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_floor.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_floor.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_floor.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	floor
+#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_floorf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_floorf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_floorf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_floorf.c	2007-03-27 15:01:11.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	floorf
+#include <s_atanf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_floorl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_floorl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_floorl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_floorl.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC floorl
+#include <s_atanl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_fpclassifyl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_fpclassifyl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_fpclassifyl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_fpclassifyl.c	2007-03-27 15:01:12.000000000 +0200
@@ -0,0 +1,44 @@
+/* Return classification value corresponding to argument.  m68k version.
+   Copyright (C) 1997, 2001, 2002 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.
+   Fixed for m68k by Andreas Schwab <schwab@suse.de>.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <math.h>
+
+#include "math_private.h"
+
+
+int
+__fpclassifyl (long double x)
+{
+  u_int32_t ex, hx, lx;
+  int retval = FP_NORMAL;
+
+  GET_LDOUBLE_WORDS (ex, hx, lx, x);
+  ex &= 0x7fff;
+  if ((ex | hx | lx) == 0)
+    retval = FP_ZERO;
+  else if (ex == 0 && (hx & 0x80000000) == 0)
+    retval = FP_SUBNORMAL;
+  else if (ex == 0x7fff)
+    retval = ((hx & 0x7fffffff) | lx) != 0 ? FP_NAN : FP_INFINITE;
+
+  return retval;
+}
+libm_hidden_def (__fpclassifyl)
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_frexp.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_frexp.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_frexp.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_frexp.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,56 @@
+/* Copyright (C) 1996, 1997, 2003 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <math.h>
+
+#ifndef FUNC
+#define FUNC frexp
+#endif
+#ifndef float_type
+#define float_type double
+#endif
+
+#define __CONCATX(a,b) __CONCAT(a,b)
+
+float_type
+__CONCATX(__,FUNC) (float_type value, int *expptr)
+{
+  float_type mantissa, exponent;
+  int iexponent;
+  unsigned long fpsr;
+
+  __asm ("ftst%.x %1\n"
+	 "fmove%.l %/fpsr, %0"
+	 : "=dm" (fpsr) : "f" (value));
+  if (fpsr & (7 << 24))
+    {
+      /* Not finite or zero.  */
+      *expptr = 0;
+      return value;
+    }
+  __asm ("fgetexp%.x %1, %0" : "=f" (exponent) : "f" (value));
+  iexponent = (int) exponent + 1;
+  *expptr = iexponent;
+  __asm ("fscale%.l %2, %0"
+	 : "=f" (mantissa)
+	 : "0" (value), "dmi" (-iexponent));
+  return mantissa;
+}
+
+#define weak_aliasx(a,b) weak_alias(a,b)
+weak_aliasx (__CONCATX(__,FUNC), FUNC)
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_frexpf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_frexpf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_frexpf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_frexpf.c	2007-03-27 15:01:11.000000000 +0200
@@ -0,0 +1,3 @@
+#define FUNC frexpf
+#define float_type float
+#include <s_frexp.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_frexpl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_frexpl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_frexpl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_frexpl.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,59 @@
+/* Copyright (C) 2003 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <math.h>
+
+long double
+__frexpl (long double value, int *expptr)
+{
+  long double mantissa, exponent;
+  int iexponent;
+  unsigned long fpsr;
+
+  __asm ("ftst%.x %1\n"
+	 "fmove%.l %/fpsr, %0"
+	 : "=dm" (fpsr) : "f" (value));
+  if (fpsr & (7 << 24))
+    {
+      /* Not finite or zero.  */
+      *expptr = 0;
+      return value;
+    }
+  __asm ("fgetexp%.x %1, %0" : "=f" (exponent) : "f" (value));
+  iexponent = (int) exponent + 1;
+  *expptr = iexponent;
+  /* Unnormalized numbers must be handled specially, otherwise fscale
+     results in overflow.  */
+  if (iexponent <= -16384)
+    {
+      value *= 0x1p16383L;
+      iexponent += 16383;
+    }
+  else if (iexponent >= 16384)
+    {
+      value *= 0x1p-16383L;
+      iexponent -= 16383;
+    }
+
+  __asm ("fscale%.l %2, %0"
+	 : "=f" (mantissa)
+	 : "0" (value), "dmi" (-iexponent));
+  return mantissa;
+}
+
+weak_alias (__frexpl, frexpl)
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_ilogb.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_ilogb.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_ilogb.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_ilogb.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1,51 @@
+/* Copyright (C) 1996, 1997, 1999 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <math.h>
+#include "mathimpl.h"
+
+#ifndef SUFF
+#define SUFF
+#endif
+#ifndef float_type
+#define float_type double
+#endif
+
+#define CONCATX(a,b) __CONCAT(a,b)
+#define s(name) CONCATX(name,SUFF)
+#define m81(func) __m81_u(s(func))
+
+int
+s(__ilogb) (float_type x)
+{
+  float_type result;
+  unsigned long x_cond;
+
+  x_cond = __m81_test (x);
+  /* We must return consistent values for zero and NaN.  */
+  if (x_cond & __M81_COND_ZERO)
+    return FP_ILOGB0;
+  if (x_cond & (__M81_COND_NAN | __M81_COND_INF))
+    return FP_ILOGBNAN;
+
+  __asm ("fgetexp%.x %1, %0" : "=f" (result) : "f" (x));
+  return (int) result;
+}
+
+#define weak_aliasx(a,b) weak_alias(a,b)
+weak_aliasx (s(__ilogb), s(ilogb))
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_ilogbf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_ilogbf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_ilogbf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_ilogbf.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,3 @@
+#define SUFF f
+#define float_type float
+#include <s_ilogb.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_ilogbl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_ilogbl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_ilogbl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_ilogbl.c	2007-03-27 15:01:12.000000000 +0200
@@ -0,0 +1,3 @@
+#define SUFF l
+#define float_type long double
+#include <s_ilogb.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/sincos32.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/sincos32.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/sincos32.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/sincos32.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1 @@
+/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_isinf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_isinf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_isinf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_isinf.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1,40 @@
+/* Copyright (C) 1996, 1997, 2002 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <math.h>
+
+#ifndef FUNC
+#define FUNC isinf
+#endif
+#ifndef float_type
+#define float_type double
+#endif
+
+#define __CONCATX(a,b) __CONCAT(a,b)
+
+int
+__CONCATX(__,FUNC) (x)
+     float_type x;
+{
+  return __m81_u(__CONCATX(__,FUNC))(x);
+}
+
+#define hidden_defx(a) hidden_def(a)
+hidden_defx(__CONCATX(__,FUNC))
+#define weak_aliasx(a,b) weak_alias(a,b)
+weak_aliasx (__CONCATX(__,FUNC), FUNC)
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_isinff.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_isinff.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_isinff.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_isinff.c	2007-03-27 15:01:12.000000000 +0200
@@ -0,0 +1,5 @@
+#ifndef FUNC
+#define FUNC isinff
+#endif
+#define float_type float
+#include <s_isinf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_isinfl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_isinfl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_isinfl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_isinfl.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,5 @@
+#ifndef FUNC
+#define FUNC isinfl
+#endif
+#define float_type long double
+#include <s_isinf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_isnan.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_isnan.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_isnan.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_isnan.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	isnan
+#include <s_isinf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_isnanf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_isnanf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_isnanf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_isnanf.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	isnanf
+#include <s_isinff.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_isnanl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_isnanl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_isnanl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_isnanl.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC isnanl
+#include <s_isinfl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_llrint.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_llrint.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_llrint.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_llrint.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,76 @@
+/* Round argument to nearest integral value according to current rounding
+   direction.
+   Copyright (C) 1997, 1999 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Andreas Schwab <schwab@issan.informatik.uni-dortmund.de>
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <math.h>
+#include "math_private.h"
+#include "mathimpl.h"
+
+long long int
+__llrint (double x)
+{
+  int32_t e;
+  u_int32_t h, l, s;
+  long long int result;
+
+  x = __m81_u(__rint) (x);
+
+  /* We could use __fixxfdi from libgcc, but here we can take advantage of
+     the known floating point format.  */
+  EXTRACT_WORDS (h, l, x);
+
+  e = ((h >> 20) & 0x7ff) - 0x3ff;
+  if (e < 0)
+    return 0;
+  s = h;
+  h &= 0xfffff;
+  h |= 0x100000;
+
+  if (e < 63)
+    {
+      if (e > 52)
+	{
+	  h <<= e - 52;
+	  h |= l >> (84 - e);
+	  l <<= e - 52;
+	  result = ((long long int) h << 32) | l;
+	}
+      else if (e > 20)
+	{
+	  l >>= 52 - e;
+	  l |= h << (e - 20);
+	  h >>= 52 - e;
+	  result = ((long long int) h << 32) | l;
+	}
+      else
+	result = h >> (20 - e);
+      if (s & 0x80000000)
+	result = -result;
+    }
+  else
+    /* The number is too large or not finite.  The standard leaves it
+       undefined what to return when the number is too large to fit in a
+       `long long int'.  */
+    result = -1LL;
+
+  return result;
+}
+
+weak_alias (__llrint, llrint)
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_llrintf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_llrintf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_llrintf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_llrintf.c	2007-03-27 15:01:11.000000000 +0200
@@ -0,0 +1,66 @@
+/* Round argument to nearest integral value according to current rounding
+   direction.
+   Copyright (C) 1997, 1999 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Andreas Schwab <schwab@issan.informatik.uni-dortmund.de>
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <math.h>
+#include "math_private.h"
+#include "mathimpl.h"
+
+long long int
+__llrintf (float x)
+{
+  int32_t e;
+  u_int32_t i, s;
+  long long int result;
+
+  x = __m81_u(__rintf) (x);
+
+  GET_FLOAT_WORD (i, x);
+
+  e = ((i >> 23) & 0xff) - 0x7f;
+  if (e < 0)
+    return 0;
+  s = i;
+  i &= 0x7fffff;
+  i |= 0x800000;
+
+  if (e < 63)
+    {
+      if (e > 55)
+	result = (long long int) (i << (e - 55)) << 32;
+      else if (e > 31)
+	result = (((long long int) (i >> (55 - e)) << 32) | (i << (e - 23)));
+      else if (e > 23)
+	result = i << (e - 23);
+      else
+	result = i >> (23 - e);
+      if (s & 0x80000000)
+	result = -result;
+    }
+  else
+    /* The number is too large or not finite.  The standard leaves it
+       undefined what to return when the number is too large to fit in a
+       `long long int'.  */
+    result = -1LL;
+
+  return result;
+}
+
+weak_alias (__llrintf, llrintf)
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_llrintl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_llrintl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_llrintl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_llrintl.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,65 @@
+/* Round argument to nearest integral value according to current rounding
+   direction.
+   Copyright (C) 1997, 1999 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Andreas Schwab <schwab@issan.informatik.uni-dortmund.de>
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <math.h>
+#include "math_private.h"
+#include "mathimpl.h"
+
+long long int
+__llrintl (long double x)
+{
+  int32_t e, s;
+  u_int32_t h, l;
+  long long int result;
+
+  x = __m81_u(__rintl) (x);
+
+  GET_LDOUBLE_WORDS (e, h, l, x);
+
+  s = e;
+  e = (e & 0x7fff) - 0x3fff;
+  if (e < 0)
+    return 0;
+
+  if (e < 63)
+    {
+      if (e > 31)
+	{
+	  l >>= 63 - e;
+	  l |= h << (e - 31);
+	  h >>= 63 - e;
+	  result = ((long long int) h << 32) | l;
+	}
+      else
+	result = h >> (31 - e);
+      if (s & 0x8000)
+	result = -result;
+    }
+  else
+    /* The number is too large or not finite.  The standard leaves it
+       undefined what to return when the number is too large to fit in a
+       `long long int'.  */
+    result = -1LL;
+
+  return result;
+}
+
+weak_alias (__llrintl, llrintl)
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_log1p.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_log1p.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_log1p.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_log1p.c	2007-03-27 15:01:11.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	log1p
+#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_log1pf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_log1pf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_log1pf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_log1pf.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	log1pf
+#include <s_atanf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_log1pl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_log1pl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_log1pl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_log1pl.c	2007-03-27 15:01:11.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC log1pl
+#include <s_atanl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/slowexp.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/slowexp.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/slowexp.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/slowexp.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1 @@
+/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/slowpow.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/slowpow.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/slowpow.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/slowpow.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1 @@
+/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_lrint.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_lrint.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_lrint.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_lrint.c	2007-03-27 15:01:11.000000000 +0200
@@ -0,0 +1,40 @@
+/* Round argument to nearest integral value according to current rounding
+   direction.
+   Copyright (C) 1997 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Andreas Schwab <schwab@issan.informatik.uni-dortmund.de>
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <math.h>
+
+#ifndef suffix
+#define suffix /*empty*/
+#endif
+#ifndef float_type
+#define float_type double
+#endif
+
+#define CONCATX(a,b) __CONCAT(a,b)
+
+long int
+CONCATX(__lrint,suffix) (float_type x)
+{
+  return __m81_u(CONCATX(__lrint,suffix)) (x);
+}
+
+#define weak_aliasx(a,b) weak_alias(a,b)
+weak_aliasx (CONCATX(__lrint,suffix), CONCATX(lrint,suffix))
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_lrintf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_lrintf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_lrintf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_lrintf.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,3 @@
+#define suffix f
+#define float_type float
+#include <s_lrint.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_lrintl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_lrintl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_lrintl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_lrintl.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1,3 @@
+#define suffix l
+#define float_type long double
+#include <s_lrint.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_modf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_modf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_modf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_modf.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1,56 @@
+/* Copyright (C) 1996, 1997, 1999 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <math.h>
+#include "mathimpl.h"
+
+#ifndef SUFF
+#define SUFF
+#endif
+#ifndef float_type
+#define float_type double
+#endif
+
+#define CONCATX(a,b) __CONCAT(a,b)
+#define s(name) CONCATX(name,SUFF)
+#define m81(func) __m81_u(s(func))
+
+float_type
+s(__modf) (float_type x, float_type *iptr)
+{
+  float_type x_int, result;
+  unsigned long x_cond;
+
+  __asm ("fintrz%.x %1, %0" : "=f" (x_int) : "f" (x));
+  *iptr = x_int;
+  x_cond = __m81_test (x);
+  if (x_cond & __M81_COND_INF)
+    {
+      result = 0;
+      if (x_cond & __M81_COND_NEG)
+	result = -result;
+    }
+  else if (x_cond & __M81_COND_ZERO)
+    result = x;
+  else
+    result = x - x_int;
+  return result;
+}
+
+#define weak_aliasx(a,b) weak_alias(a,b)
+weak_aliasx(s(__modf), s(modf))
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_modff.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_modff.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_modff.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_modff.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1,3 @@
+#define SUFF f
+#define float_type float
+#include <s_modf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_modfl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_modfl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_modfl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_modfl.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,3 @@
+#define SUFF l
+#define float_type long double
+#include <s_modf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_nearbyint.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_nearbyint.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_nearbyint.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_nearbyint.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC nearbyint
+#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_nearbyintf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_nearbyintf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_nearbyintf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_nearbyintf.c	2007-03-27 15:01:11.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC nearbyintf
+#include <s_atanf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_nearbyintl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_nearbyintl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_nearbyintl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_nearbyintl.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC nearbyintl
+#include <s_atanl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_nextafterl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_nextafterl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_nextafterl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_nextafterl.c	2007-03-27 15:01:11.000000000 +0200
@@ -0,0 +1,109 @@
+/* s_nextafterl.c -- long double version of s_nextafter.c.
+ * Conversion to long double by Ulrich Drepper,
+ * Cygnus Support, drepper@cygnus.com.
+ * Fixed for m68k by Andreas Schwab <schwab@suse.de>.
+ */
+
+/*
+ * ====================================================
+ * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
+ *
+ * Developed at SunPro, a Sun Microsystems, Inc. business.
+ * Permission to use, copy, modify, and distribute this
+ * software is freely granted, provided that this notice
+ * is preserved.
+ * ====================================================
+ */
+
+#if defined(LIBM_SCCS) && !defined(lint)
+static char rcsid[] = "$NetBSD: $";
+#endif
+
+/* IEEE functions
+ *	nextafterl(x,y)
+ *	return the next machine floating-point number of x in the
+ *	direction toward y.
+ *   Special cases:
+ */
+
+#include "math.h"
+#include "math_private.h"
+
+#ifdef __STDC__
+	long double __nextafterl(long double x, long double y)
+#else
+	long double __nextafterl(x,y)
+	long double x,y;
+#endif
+{
+	int32_t ix,iy,esx,esy;
+	u_int32_t hx,hy,lx,ly;
+
+	GET_LDOUBLE_WORDS(esx,hx,lx,x);
+	GET_LDOUBLE_WORDS(esy,hy,ly,y);
+	ix = esx&0x7fff;		/* |x| */
+	iy = esy&0x7fff;		/* |y| */
+
+	if(((ix==0x7fff)&&((hx&0x7fffffff)|lx)!=0) ||   /* x is nan */
+	   ((iy==0x7fff)&&((hy&0x7fffffff)|ly)!=0))     /* y is nan */
+	   return x+y;
+	if(x==y) return y;		/* x=y, return y */
+	if((ix|hx|lx)==0) {			/* x == 0 */
+	    SET_LDOUBLE_WORDS(x,esy&0x8000,0,1);/* return +-minsubnormal */
+	    y = x*x;
+	    if(y==x) return y; else return x;	/* raise underflow flag */
+	}
+	if(esx>=0) {			/* x > 0 */
+	    if(esx>esy||((esx==esy) && (hx>hy||((hx==hy)&&(lx>ly))))) {
+	      /* x > y, x -= ulp */
+		if(lx==0) {
+		    if (ix != 0 && hx == 0x80000000) hx = 0;
+		    if (hx==0) esx -= 1;
+		    hx -= 1;
+		}
+		lx -= 1;
+	    } else {				/* x < y, x += ulp */
+		lx += 1;
+		if(lx==0) {
+		    hx += 1;
+		    if (hx==0) {
+			hx = 0x80000000;
+			esx += 1;
+		    }
+		}
+	    }
+	} else {				/* x < 0 */
+	    if(esy>=0||esx>esy||((esx==esy) && (hx>hy||((hx==hy)&&(lx>ly))))){
+	      /* x < y, x -= ulp */
+		if(lx==0) {
+		    if (ix != 0 && hx == 0x80000000) hx = 0;
+		    if (hx==0) esx -= 1;
+		    hx -= 1;
+		}
+		lx -= 1;
+	    } else {				/* x > y, x += ulp */
+		lx += 1;
+		if(lx==0) {
+		    hx += 1;
+		    if (hx==0) {
+			hx = 0x80000000;
+			esx += 1;
+		    }
+		}
+	    }
+	}
+	esy = esx&0x7fff;
+	if(esy==0x7fff) return x+x;	/* overflow  */
+	if(esy==0 && (hx & 0x80000000) == 0) { /* underflow */
+	    y = x*x;
+	    if(y!=x) {		/* raise underflow flag */
+	        SET_LDOUBLE_WORDS(y,esx,hx,lx);
+		return y;
+	    }
+	}
+	SET_LDOUBLE_WORDS(x,esx,hx,lx);
+	return x;
+}
+weak_alias (__nextafterl, nextafterl)
+strong_alias (__nextafterl, __nexttowardl)
+weak_alias (__nextafterl, nexttowardl)
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_remquo.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_remquo.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_remquo.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_remquo.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,48 @@
+/* Compute remainder and a congruent to the quotient.  m68k fpu version
+   Copyright (C) 1997 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Andreas Schwab <schwab@issan.informatik.uni-dortmund.de>
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <math.h>
+
+#ifndef SUFF
+#define SUFF
+#endif
+#ifndef float_type
+#define float_type double
+#endif
+
+#define CONCATX(a,b) __CONCAT(a,b)
+#define s(name) CONCATX(name,SUFF)
+
+float_type
+s(__remquo) (float_type x, float_type y, int *quo)
+{
+  float_type result;
+  int cquo, fpsr;
+
+  __asm ("frem%.x %2,%0\n\tfmove%.l %/fpsr,%1"
+	 : "=f" (result), "=dm" (fpsr) : "f" (y), "0" (x));
+  cquo = (fpsr >> 16) & 0x7f;
+  if (fpsr & (1 << 23))
+    cquo = -cquo;
+  *quo = cquo;
+  return result;
+}
+#define weak_aliasx(a,b) weak_alias(a,b)
+weak_aliasx (s(__remquo), s(remquo))
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_remquof.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_remquof.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_remquof.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_remquof.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,3 @@
+#define SUFF f
+#define float_type float
+#include <s_remquo.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_remquol.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_remquol.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_remquol.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_remquol.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,3 @@
+#define SUFF l
+#define float_type long double
+#include <s_remquo.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_rint.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_rint.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_rint.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_rint.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	rint
+#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_rintf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_rintf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_rintf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_rintf.c	2007-03-27 15:01:12.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	rintf
+#include <s_atanf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_rintl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_rintl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_rintl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_rintl.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC rintl
+#include <s_atanl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_scalbln.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_scalbln.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_scalbln.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_scalbln.c	2007-03-27 15:01:12.000000000 +0200
@@ -0,0 +1,2 @@
+/* Nothing to do.  This function is the same as scalbn.  So we define an
+   alias.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_scalblnf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_scalblnf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_scalblnf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_scalblnf.c	2007-03-27 15:01:12.000000000 +0200
@@ -0,0 +1,2 @@
+/* Nothing to do.  This function is the same as scalbnf.  So we define an
+   alias.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_scalblnl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_scalblnl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_scalblnl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_scalblnl.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,2 @@
+/* Nothing to do.  This function is the same as scalbnl.  So we define an
+   alias.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_scalbn.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_scalbn.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_scalbn.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_scalbn.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,54 @@
+/* Copyright (C) 1996, 1997 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#define scalbln __no_scalbln_decl
+#define scalblnf __no_scalblnf_decl
+#define scalblnl __no_scalblnl_decl
+#define __scalbln __no__scalbln_decl
+#define __scalblnf __no__scalblnf_decl
+#define __scalblnl __no__scalblnl_decl
+#include <math.h>
+#undef scalbln
+#undef scalblnf
+#undef scalblnl
+#undef __scalbln
+#undef __scalblnf
+#undef __scalblnl
+
+#ifndef suffix
+#define suffix /*empty*/
+#endif
+#ifndef float_type
+#define float_type double
+#endif
+
+#define __CONCATX(a,b) __CONCAT(a,b)
+
+float_type
+__CONCATX(__scalbn,suffix) (x, exp)
+     float_type x;
+     int exp;
+{
+  return __m81_u(__CONCATX(__scalbn,suffix))(x, exp);
+}
+
+#define weak_aliasx(a,b) weak_alias(a,b)
+#define strong_aliasx(a,b) strong_alias(a,b)
+weak_aliasx (__CONCATX(__scalbn,suffix), __CONCATX(scalbn,suffix))
+strong_aliasx (__CONCATX(__scalbn,suffix), __CONCATX(__scalbln,suffix))
+weak_aliasx (__CONCATX(__scalbn,suffix), __CONCATX(scalbln,suffix))
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_scalbnf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_scalbnf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_scalbnf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_scalbnf.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1,3 @@
+#define suffix f
+#define float_type float
+#include <s_scalbn.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_scalbnl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_scalbnl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_scalbnl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_scalbnl.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,3 @@
+#define suffix l
+#define float_type long double
+#include <s_scalbn.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_significand.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_significand.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_significand.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_significand.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	significand
+#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_significandf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_significandf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_significandf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_significandf.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	significandf
+#include <s_atanf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_significandl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_significandl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_significandl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_significandl.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC significandl
+#include <s_atanl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_sin.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_sin.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_sin.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_sin.c	2007-03-27 15:01:11.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	sin
+#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_sincos.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_sincos.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_sincos.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_sincos.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,38 @@
+/* Copyright (C) 1997 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <math.h>
+
+#ifndef FUNC
+#define FUNC sincos
+#endif
+#ifndef float_type
+#define float_type double
+#endif
+
+#define CONCATX(a,b) __CONCAT(a,b)
+
+void
+CONCATX(__,FUNC) (x, sinx, cosx)
+     float_type x, *sinx, *cosx;
+{
+  __m81_u(CONCATX(__,FUNC))(x, sinx, cosx);
+}
+
+#define weak_aliasx(a,b) weak_alias(a,b)
+weak_aliasx (CONCATX(__,FUNC), FUNC)
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_sincosf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_sincosf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_sincosf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_sincosf.c	2007-03-27 15:01:09.000000000 +0200
@@ -0,0 +1,3 @@
+#define FUNC sincosf
+#define float_type float
+#include <s_sincos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_sincosl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_sincosl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_sincosl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_sincosl.c	2007-03-27 15:01:13.000000000 +0200
@@ -0,0 +1,3 @@
+#define FUNC sincosl
+#define float_type long double
+#include <s_sincos.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_sinf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_sinf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_sinf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_sinf.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	sinf
+#include <s_atanf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_sinl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_sinl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_sinl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_sinl.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC sinl
+#include <s_atanl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_tan.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_tan.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_tan.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_tan.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	tan
+#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_tanf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_tanf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_tanf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_tanf.c	2007-03-27 15:01:11.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	tanf
+#include <s_atanf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_tanh.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_tanh.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_tanh.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_tanh.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	tanh
+#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_tanhf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_tanhf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_tanhf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_tanhf.c	2007-03-27 15:01:11.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC	tanhf
+#include <s_atanf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_tanhl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_tanhl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_tanhl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_tanhl.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC tanhl
+#include <s_atanl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_tanl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_tanl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_tanl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_tanl.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,2 @@
+#define FUNC tanl
+#include <s_atanl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_trunc.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_trunc.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_trunc.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_trunc.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC trunc
+#include <s_atan.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_truncf.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_truncf.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_truncf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_truncf.c	2007-03-27 15:01:14.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC truncf
+#include <s_atanf.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_truncl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_truncl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/s_truncl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/s_truncl.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1,2 @@
+#define	FUNC truncl
+#include <s_atanl.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/switch/68881-sw.h glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/switch/68881-sw.h
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/switch/68881-sw.h	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/switch/68881-sw.h	2007-03-27 15:01:07.000000000 +0200
@@ -0,0 +1,64 @@
+/* Copyright (C) 1991, 1992, 1997, 2000 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#ifndef	_68881_SWITCH_H
+
+#define	_68881_SWITCH_H	1
+#include <sys/cdefs.h>
+
+/* This is the format of the data at the code label for a function which
+   wants to switch depending on whether or not a 68881 is present.
+
+   Initially, `insn' is a `jsr' instruction, and `target' is __68881_switch.
+   The first time such a function is called, __68881_switch determines whether
+   or not a 68881 is present, and modifies the function accordingly.
+   Then `insn' is a `jmp' instruction, and `target' is the value of `fpu'
+   if there is 68881, or the value of `soft' if not.  */
+
+struct switch_caller
+  {
+    unsigned short int insn;	/* The `jsr' or `jmp' instruction.  */
+    void *target;		/* The target of the instruction.  */
+    void *soft;			/* The address of the soft function.  */
+    void *fpu;			/* The address of the 68881 function.  */
+  };
+
+/* These are opcodes (values for `insn', above) for `jmp' and `jsr'
+   instructions, respectively, to 32-bit absolute addresses.  */
+#define	JMP	0x4ef9
+#define	JSR	0x4eb9
+
+
+/* Function to determine whether or not a 68881 is available,
+   and modify its caller (which must be a `struct switch_caller', above,
+   in data space) to use the appropriate version.  */
+extern void __68881_switch (int __dummy) __THROW;
+
+
+/* Define FUNCTION as a `struct switch_caller' which will call
+   `__FUNCTION_68881' if a 68881 is present, and `__FUNCTION_soft' if not.
+#define	switching_function(FUNCTION)					      \
+  struct switch_caller FUNCTION =					      \
+    {									      \
+      JSR, (__ptr_t) __68881_switch,					      \
+      __CONCAT(__CONCAT(__,FUNCTION),_soft),				      \
+      __CONCAT(__CONCAT(__,FUNCTION),_68881)				      \
+    }
+
+
+#endif	/* 68881-switch.h  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/switch/bits/mathinline.h glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/switch/bits/mathinline.h
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/switch/bits/mathinline.h	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/switch/bits/mathinline.h	2007-03-27 15:01:07.000000000 +0200
@@ -0,0 +1 @@
+/* We don't want any inlines when we might not have a 68881.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/switch/Makefile glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/switch/Makefile
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/switch/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/switch/Makefile	2007-03-27 15:01:07.000000000 +0200
@@ -0,0 +1,51 @@
+# Copyright (C) 1991, 1992, 1997 Free Software Foundation, Inc.
+# This file is part of the GNU C Library.
+
+# The GNU C Library is free software; you can redistribute it and/or
+# modify it under the terms of the GNU Lesser General Public
+# License as published by the Free Software Foundation; either
+# version 2.1 of the License, or (at your option) any later version.
+
+# The GNU C Library is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+# Lesser General Public License for more details.
+
+# You should have received a copy of the GNU Lesser General Public
+# License along with the GNU C Library; if not, write to the Free
+# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+# 02111-1307 USA.
+
+ifeq ($(subdir),math)
+
+sysdep_routines := $(sysdep_routines) switch
+
+# Find all the sources that have 68881 versions.
++68881-sources := \
+  $(notdir $(wildcard $(addprefix $(filter %/fpu,$(sysdirs)),$(sources))))
+
+# Sysdep directories other than fpu and fpu/switch (this one).
++non68881-dirs := $(filter-out %/fpu %/fpu/switch,$(+sysdep_dirs))
+
+# Get a non-68881 version of the target.
++non68881-version = $(firstword $(wildcard $(addsuffix /$@,$(+non68881-dirs))))
+
+# Directory containing 68881 sources.
++68881-dir := $(filter %/fpu,$(+sysdep_dirs))
+
+# For all the files that have 68881 versions and don't exist already in
+# the source directory (math), automatically make ones that switch between
+# 68881 and soft versions.
+$(addprefix $(objpfx), \
+	    $(filter-out $(wildcard $(+68881-sources)),$(+68881-sources))):
+	(echo '#include <68881-sw.h>'		;\
+	 echo '#define $* __$*_68881'		;\
+	 echo '#include <$(+68881-dir)/$@>'	;\
+	 echo '#undef $*'			;\
+	 echo '#define $* __$*_soft'		;\
+	 echo '#include <$(non68881-version)>'	;\
+	 echo '#undef $*'			;\
+	 echo 'switching_function($*);') > $@-tmp
+	mv $@-tmp $@
+
+endif
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/switch/switch.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/switch/switch.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/switch/switch.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/switch/switch.c	2007-03-27 15:01:07.000000000 +0200
@@ -0,0 +1,87 @@
+/* Copyright (C) 1991, 1992, 1997 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <signal.h>
+#include <68881-sw.h>
+
+
+/* The signal that is sent when a 68881 instruction
+   is executed and there is no 68881.  */
+#ifndef	TRAPSIG
+#define	TRAPSIG	SIGILL
+#endif
+
+/* Zero if no 68881, one if we have a 68881, or -1 if we don't know yet.  */
+static int have_fpu = -1;
+
+
+/* Signal handler for the trap that happens if we don't have a 68881.  */
+static void
+trap (sig)
+     int sig;
+{
+  have_fpu = 0;
+}
+
+/* This function is called by functions that want to switch.
+   The calling function must be a `struct switch_caller' in data space.
+   It determines whether a 68881 is present, and modifies its caller
+   to be a static jump to either the 68881 version or the soft version.
+   It then returns into the function it has chosen to do the work.  */
+void
+__68881_switch (dummy)
+     int dummy;
+{
+  void **return_address_location = &((void **) &dummy)[-1];
+  struct switch_caller *const caller
+    = (struct switch_caller *) (((short int *) *return_address_location) - 1);
+
+  if (have_fpu < 0)
+    {
+      /* Figure out whether or not we have a 68881.  */
+      __sighandler_t handler = signal (TRAPSIG, trap);
+      if (handler == SIG_ERR)
+	/* We can't figure it out, so assume we don't have a 68881.
+	   This assumption will never cause us any problems other than
+	   lost performance, while the reverse assumption could cause
+	   the program to crash.  */
+	have_fpu = 0;
+      else
+	{
+	  /* We set `have_fpu' to nonzero, and then execute a 68881
+	     no-op instruction.  If we have a 68881, this will do nothing.
+	     If we don't have one, this will trap and the signal handler
+	     will clear `have_fpu'.  */
+	  have_fpu = 1;
+	  asm ("fnop");
+
+	  /* Restore the old signal handler.  */
+	  (void) signal (TRAPSIG, handler);
+	}
+    }
+
+  /* Modify the caller to be a jump to the appropriate address.  */
+  caller->insn = JMP;
+  caller->target = have_fpu ? caller->fpu : caller->soft;
+
+  /* Make the address we will return to be the target we have chosen.
+     Our return will match the `jsr' done by the caller we have
+     just modified, and it will be just as if that had instead
+     been a `jmp' to the new target.  */
+  *return_address_location = caller->target;
+}
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/t_exp.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/t_exp.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/fpu/t_exp.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/fpu/t_exp.c	2007-03-27 15:01:10.000000000 +0200
@@ -0,0 +1 @@
+/* Empty.  Not needed. */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/Implies glibc-ports-2.5-cs/sysdeps/m68k/m680x0/Implies
--- glibc-ports-2.5/sysdeps/m68k/m680x0/Implies	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/Implies	2007-03-27 15:01:16.000000000 +0200
@@ -0,0 +1 @@
+ieee754/ldbl-96
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/lshift.S glibc-ports-2.5-cs/sysdeps/m68k/m680x0/lshift.S
--- glibc-ports-2.5/sysdeps/m68k/m680x0/lshift.S	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/lshift.S	2007-03-27 15:01:16.000000000 +0200
@@ -0,0 +1,147 @@
+/* mc68020 __mpn_lshift -- Shift left a low-level natural-number integer.
+
+Copyright (C) 1996, 1998 Free Software Foundation, Inc.
+
+This file is part of the GNU MP Library.
+
+The GNU MP Library is free software; you can redistribute it and/or modify
+it under the terms of the GNU Lesser General Public License as published by
+the Free Software Foundation; either version 2.1 of the License, or (at your
+option) any later version.
+
+The GNU MP Library is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
+License for more details.
+
+You should have received a copy of the GNU Lesser General Public License
+along with the GNU MP Library; see the file COPYING.LIB.  If not, write to
+the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
+MA 02111-1307, USA. */
+
+/*
+  INPUT PARAMETERS
+  res_ptr	(sp + 4)
+  s_ptr		(sp + 8)
+  s_size	(sp + 16)
+  cnt		(sp + 12)
+*/
+
+#include "sysdep.h"
+#include "asm-syntax.h"
+
+#define res_ptr a1
+#define s_ptr a0
+#define s_size d6
+#define cnt d4
+
+	TEXT
+ENTRY(__mpn_lshift)
+
+/* Save used registers on the stack.  */
+	moveml	R(d2)-R(d6)/R(a2),MEM_PREDEC(sp)
+
+/* Copy the arguments to registers.  */
+	movel	MEM_DISP(sp,28),R(res_ptr)
+	movel	MEM_DISP(sp,32),R(s_ptr)
+	movel	MEM_DISP(sp,36),R(s_size)
+	movel	MEM_DISP(sp,40),R(cnt)
+
+	moveql	#1,R(d5)
+	cmpl	R(d5),R(cnt)
+	bne	L(Lnormal)
+	cmpl	R(s_ptr),R(res_ptr)
+	bls	L(Lspecial)		/* jump if s_ptr >= res_ptr */
+#if (defined (__mc68020__) || defined (__NeXT__) || defined(mc68020))
+	lea	MEM_INDX1(s_ptr,s_size,l,4),R(a2)
+#else /* not mc68020 */
+	movel	R(s_size),R(d0)
+	asll	#2,R(d0)
+	lea	MEM_INDX(s_ptr,d0,l),R(a2)
+#endif
+	cmpl	R(res_ptr),R(a2)
+	bls	L(Lspecial)		/* jump if res_ptr >= s_ptr + s_size */
+
+L(Lnormal:)
+	moveql	#32,R(d5)
+	subl	R(cnt),R(d5)
+
+#if (defined (__mc68020__) || defined (__NeXT__) || defined(mc68020))
+	lea	MEM_INDX1(s_ptr,s_size,l,4),R(s_ptr)
+	lea	MEM_INDX1(res_ptr,s_size,l,4),R(res_ptr)
+#else /* not mc68000 */
+	movel	R(s_size),R(d0)
+	asll	#2,R(d0)
+	addl	R(s_size),R(s_ptr)
+	addl	R(s_size),R(res_ptr)
+#endif
+	movel	MEM_PREDEC(s_ptr),R(d2)
+	movel	R(d2),R(d0)
+	lsrl	R(d5),R(d0)		/* compute carry limb */
+
+	lsll	R(cnt),R(d2)
+	movel	R(d2),R(d1)
+	subql	#1,R(s_size)
+	beq	L(Lend)
+	lsrl	#1,R(s_size)
+	bcs	L(L1)
+	subql	#1,R(s_size)
+
+L(Loop:)
+	movel	MEM_PREDEC(s_ptr),R(d2)
+	movel	R(d2),R(d3)
+	lsrl	R(d5),R(d3)
+	orl	R(d3),R(d1)
+	movel	R(d1),MEM_PREDEC(res_ptr)
+	lsll	R(cnt),R(d2)
+L(L1:)
+	movel	MEM_PREDEC(s_ptr),R(d1)
+	movel	R(d1),R(d3)
+	lsrl	R(d5),R(d3)
+	orl	R(d3),R(d2)
+	movel	R(d2),MEM_PREDEC(res_ptr)
+	lsll	R(cnt),R(d1)
+
+	dbf	R(s_size),L(Loop)
+	subl	#0x10000,R(s_size)
+	bcc	L(Loop)
+
+L(Lend:)
+	movel	R(d1),MEM_PREDEC(res_ptr) /* store least significant limb */
+
+/* Restore used registers from stack frame.  */
+	moveml	MEM_POSTINC(sp),R(d2)-R(d6)/R(a2)
+	rts
+
+/* We loop from least significant end of the arrays, which is only
+   permissible if the source and destination don't overlap, since the
+   function is documented to work for overlapping source and destination.  */
+
+L(Lspecial:)
+	clrl	R(d0)			/* initialize carry */
+	eorw	#1,R(s_size)
+	lsrl	#1,R(s_size)
+	bcc	L(LL1)
+	subql	#1,R(s_size)
+
+L(LLoop:)
+	movel	MEM_POSTINC(s_ptr),R(d2)
+	addxl	R(d2),R(d2)
+	movel	R(d2),MEM_POSTINC(res_ptr)
+L(LL1:)
+	movel	MEM_POSTINC(s_ptr),R(d2)
+	addxl	R(d2),R(d2)
+	movel	R(d2),MEM_POSTINC(res_ptr)
+
+	dbf	R(s_size),L(LLoop)
+	addxl	R(d0),R(d0)		/* save cy in lsb */
+	subl	#0x10000,R(s_size)
+	bcs	L(LLend)
+	lsrl	#1,R(d0)		/* restore cy */
+	bra	L(LLoop)
+
+L(LLend:)
+/* Restore used registers from stack frame.  */
+	moveml	MEM_POSTINC(sp),R(d2)-R(d6)/R(a2)
+	rts
+END(__mpn_lshift)
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/m68020/addmul_1.S glibc-ports-2.5-cs/sysdeps/m68k/m680x0/m68020/addmul_1.S
--- glibc-ports-2.5/sysdeps/m68k/m680x0/m68020/addmul_1.S	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/m68020/addmul_1.S	2007-03-27 15:01:16.000000000 +0200
@@ -0,0 +1,80 @@
+/* mc68020 __mpn_addmul_1 -- Multiply a limb vector with a limb and add
+   the result to a second limb vector.
+
+Copyright (C) 1992, 1994, 1996, 1998 Free Software Foundation, Inc.
+
+This file is part of the GNU MP Library.
+
+The GNU MP Library is free software; you can redistribute it and/or modify
+it under the terms of the GNU Lesser General Public License as published by
+the Free Software Foundation; either version 2.1 of the License, or (at your
+option) any later version.
+
+The GNU MP Library is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
+License for more details.
+
+You should have received a copy of the GNU Lesser General Public License
+along with the GNU MP Library; see the file COPYING.LIB.  If not, write to
+the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
+MA 02111-1307, USA. */
+
+/*
+  INPUT PARAMETERS
+  res_ptr	(sp + 4)
+  s1_ptr	(sp + 8)
+  s1_size	(sp + 12)
+  s2_limb	(sp + 16)
+*/
+
+#include "sysdep.h"
+#include "asm-syntax.h"
+
+	TEXT
+ENTRY(__mpn_addmul_1)
+
+#define res_ptr a0
+#define s1_ptr a1
+#define s1_size d2
+#define s2_limb d4
+
+/* Save used registers on the stack.  */
+	moveml	R(d2)-R(d5),MEM_PREDEC(sp)
+
+/* Copy the arguments to registers.  Better use movem?  */
+	movel	MEM_DISP(sp,20),R(res_ptr)
+	movel	MEM_DISP(sp,24),R(s1_ptr)
+	movel	MEM_DISP(sp,28),R(s1_size)
+	movel	MEM_DISP(sp,32),R(s2_limb)
+
+	eorw	#1,R(s1_size)
+	clrl	R(d1)
+	clrl	R(d5)
+	lsrl	#1,R(s1_size)
+	bcc	L(L1)
+	subql	#1,R(s1_size)
+	subl	R(d0),R(d0)		/* (d0,cy) <= (0,0) */
+
+L(Loop:)
+	movel	MEM_POSTINC(s1_ptr),R(d3)
+	mulul	R(s2_limb),R(d1):R(d3)
+	addxl	R(d0),R(d3)
+	addxl	R(d5),R(d1)
+	addl	R(d3),MEM_POSTINC(res_ptr)
+L(L1:)	movel	MEM_POSTINC(s1_ptr),R(d3)
+	mulul	R(s2_limb),R(d0):R(d3)
+	addxl	R(d1),R(d3)
+	addxl	R(d5),R(d0)
+	addl	R(d3),MEM_POSTINC(res_ptr)
+
+	dbf	R(s1_size),L(Loop)
+	addxl	R(d5),R(d0)
+	subl	#0x10000,R(s1_size)
+	bcc	L(Loop)
+
+/* Restore used registers from stack frame.  */
+	moveml	MEM_POSTINC(sp),R(d2)-R(d5)
+
+	rts
+END(__mpn_addmul_1)
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/m68020/bits/atomic.h glibc-ports-2.5-cs/sysdeps/m68k/m680x0/m68020/bits/atomic.h
--- glibc-ports-2.5/sysdeps/m68k/m680x0/m68020/bits/atomic.h	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/m68020/bits/atomic.h	2007-03-27 15:01:15.000000000 +0200
@@ -0,0 +1,254 @@
+/* Copyright (C) 2003, 2004 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Andreas Schwab <schwab@suse.de>, 2003.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <stdint.h>
+
+
+typedef int8_t atomic8_t;
+typedef uint8_t uatomic8_t;
+typedef int_fast8_t atomic_fast8_t;
+typedef uint_fast8_t uatomic_fast8_t;
+
+typedef int16_t atomic16_t;
+typedef uint16_t uatomic16_t;
+typedef int_fast16_t atomic_fast16_t;
+typedef uint_fast16_t uatomic_fast16_t;
+
+typedef int32_t atomic32_t;
+typedef uint32_t uatomic32_t;
+typedef int_fast32_t atomic_fast32_t;
+typedef uint_fast32_t uatomic_fast32_t;
+
+typedef int64_t atomic64_t;
+typedef uint64_t uatomic64_t;
+typedef int_fast64_t atomic_fast64_t;
+typedef uint_fast64_t uatomic_fast64_t;
+
+typedef intptr_t atomicptr_t;
+typedef uintptr_t uatomicptr_t;
+typedef intmax_t atomic_max_t;
+typedef uintmax_t uatomic_max_t;
+
+#define __arch_compare_and_exchange_val_8_acq(mem, newval, oldval) \
+  ({ __typeof (*(mem)) __ret;						      \
+     __asm __volatile ("cas%.b %0,%2,%1"				      \
+		       : "=d" (__ret), "+m" (*(mem))			      \
+		       : "d" (newval), "0" (oldval));			      \
+     __ret; })
+
+#define __arch_compare_and_exchange_val_16_acq(mem, newval, oldval) \
+  ({ __typeof (*(mem)) __ret;						      \
+     __asm __volatile ("cas%.w %0,%2,%1"				      \
+		       : "=d" (__ret), "+m" (*(mem))			      \
+		       : "d" (newval), "0" (oldval));			      \
+     __ret; })
+
+#define __arch_compare_and_exchange_val_32_acq(mem, newval, oldval) \
+  ({ __typeof (*(mem)) __ret;						      \
+     __asm __volatile ("cas%.l %0,%2,%1"				      \
+		       : "=d" (__ret), "+m" (*(mem))			      \
+		       : "d" (newval), "0" (oldval));			      \
+     __ret; })
+
+# define __arch_compare_and_exchange_val_64_acq(mem, newval, oldval) \
+  ({ __typeof (*(mem)) __ret;						      \
+     __typeof (mem) __memp = (mem);					      \
+     __asm __volatile ("cas2%.l %0:%R0,%1:%R1,(%2):(%3)"		      \
+		       : "=d" (__ret)					      \
+		       : "d" (newval), "r" (__memp),			      \
+			 "r" ((char *) __memp + 4), "0" (oldval)	      \
+		       : "memory");					      \
+     __ret; })
+
+#define atomic_exchange_acq(mem, newvalue) \
+  ({ __typeof (*(mem)) __result = *(mem);				      \
+     if (sizeof (*(mem)) == 1)						      \
+       __asm __volatile ("1: cas%.b %0,%2,%1;"				      \
+			 "   jbne 1b"					      \
+			 : "=d" (__result), "+m" (*(mem))		      \
+			 : "d" (newvalue), "0" (__result));		      \
+     else if (sizeof (*(mem)) == 2)					      \
+       __asm __volatile ("1: cas%.w %0,%2,%1;"				      \
+			 "   jbne 1b"					      \
+			 : "=d" (__result), "+m" (*(mem))		      \
+			 : "d" (newvalue), "0" (__result));		      \
+     else if (sizeof (*(mem)) == 4)					      \
+       __asm __volatile ("1: cas%.l %0,%2,%1;"				      \
+			 "   jbne 1b"					      \
+			 : "=d" (__result), "+m" (*(mem))		      \
+			 : "d" (newvalue), "0" (__result));		      \
+     else								      \
+       {								      \
+	 __typeof (mem) __memp = (mem);					      \
+	 __asm __volatile ("1: cas2%.l %0:%R0,%1:%R1,(%2):(%3);"	      \
+			   "   jbne 1b"					      \
+			   : "=d" (__result)				      \
+			   : "d" (newvalue), "r" (__memp),		      \
+			     "r" ((char *) __memp + 4), "0" (__result)	      \
+			   : "memory");					      \
+       }								      \
+     __result; })
+
+#define atomic_exchange_and_add(mem, value) \
+  ({ __typeof (*(mem)) __result = *(mem);				      \
+     __typeof (*(mem)) __temp;						      \
+     if (sizeof (*(mem)) == 1)						      \
+       __asm __volatile ("1: move%.b %0,%2;"				      \
+			 "   add%.b %3,%2;"				      \
+			 "   cas%.b %0,%2,%1;"				      \
+			 "   jbne 1b"					      \
+			 : "=d" (__result), "+m" (*(mem)),		      \
+			   "=&d" (__temp)				      \
+			 : "d" (value), "0" (__result));		      \
+     else if (sizeof (*(mem)) == 2)					      \
+       __asm __volatile ("1: move%.w %0,%2;"				      \
+			 "   add%.w %3,%2;"				      \
+			 "   cas%.w %0,%2,%1;"				      \
+			 "   jbne 1b"					      \
+			 : "=d" (__result), "+m" (*(mem)),		      \
+			   "=&d" (__temp)				      \
+			 : "d" (value), "0" (__result));		      \
+     else if (sizeof (*(mem)) == 4)					      \
+       __asm __volatile ("1: move%.l %0,%2;"				      \
+			 "   add%.l %3,%2;"				      \
+			 "   cas%.l %0,%2,%1;"				      \
+			 "   jbne 1b"					      \
+			 : "=d" (__result), "+m" (*(mem)),		      \
+			   "=&d" (__temp)				      \
+			 : "d" (value), "0" (__result));		      \
+     else								      \
+       {								      \
+	 __typeof (mem) __memp = (mem);					      \
+	 __asm __volatile ("1: move%.l %0,%1;"				      \
+			   "   move%.l %R0,%R1;"			      \
+			   "   add%.l %2,%1;"				      \
+			   "   addx%.l %R2,%R1;"			      \
+			   "   cas2%.l %0:%R0,%1:%R1,(%3):(%4);"	      \
+			   "   jbne 1b"					      \
+			   : "=d" (__result), "=&d" (__temp)		      \
+			   : "d" (value), "r" (__memp),			      \
+			     "r" ((char *) __memp + 4), "0" (__result)	      \
+			   : "memory");					      \
+       }								      \
+     __result; })
+
+#define atomic_add(mem, value) \
+  (void) ({ if (sizeof (*(mem)) == 1)					      \
+	      __asm __volatile ("add%.b %1,%0"				      \
+				: "+m" (*(mem))				      \
+				: "id" (value));			      \
+	    else if (sizeof (*(mem)) == 2)				      \
+	      __asm __volatile ("add%.w %1,%0"				      \
+				: "+m" (*(mem))				      \
+				: "id" (value));			      \
+	    else if (sizeof (*(mem)) == 4)				      \
+	      __asm __volatile ("add%.l %1,%0"				      \
+				: "+m" (*(mem))				      \
+				: "id" (value));			      \
+	    else							      \
+	      {								      \
+		__typeof (mem) __memp = (mem);				      \
+		__typeof (*(mem)) __oldval = *__memp;			      \
+		__typeof (*(mem)) __temp;				      \
+		__asm __volatile ("1: move%.l %0,%1;"			      \
+				  "   move%.l %R0,%R1;"			      \
+				  "   add%.l %2,%1;"			      \
+				  "   addx%.l %R2,%R1;"			      \
+				  "   cas2%.l %0:%R0,%1:%R1,(%3):(%4);"	      \
+				  "   jbne 1b"				      \
+				  : "=d" (__oldval), "=&d" (__temp)	      \
+				  : "d" (value), "r" (__memp),		      \
+				    "r" ((char *) __memp + 4), "0" (__oldval) \
+				  : "memory");				      \
+	      }								      \
+	    })
+
+#define atomic_increment_and_test(mem) \
+  ({ char __result;							      \
+     if (sizeof (*(mem)) == 1)						      \
+       __asm __volatile ("addq%.b %#1,%1; seq %0"			      \
+			 : "=dm" (__result), "+m" (*(mem)));		      \
+     else if (sizeof (*(mem)) == 2)					      \
+       __asm __volatile ("addq%.w %#1,%1; seq %0"			      \
+			 : "=dm" (__result), "+m" (*(mem)));		      \
+     else if (sizeof (*(mem)) == 4)					      \
+       __asm __volatile ("addq%.l %#1,%1; seq %0"			      \
+			 : "=dm" (__result), "+m" (*(mem)));		      \
+     else								      \
+       {								      \
+	 __typeof (mem) __memp = (mem);					      \
+	 __typeof (*(mem)) __oldval = *__memp;				      \
+	 __typeof (*(mem)) __temp;					      \
+	 __asm __volatile ("1: move%.l %1,%2;"				      \
+			   "   move%.l %R1,%R2;"			      \
+			   "   addq%.l %#1,%2;"				      \
+			   "   addx%.l %5,%R2;"				      \
+			   "   seq %0;"					      \
+			   "   cas2%.l %1:%R1,%2:%R2,(%3):(%4);"	      \
+			   "   jbne 1b"					      \
+			   : "=&dm" (__result), "=d" (__oldval),	      \
+			     "=&d" (__temp)				      \
+			   : "r" (__memp), "r" ((char *) __memp + 4),	      \
+			     "d" (0), "1" (__oldval)			      \
+			   : "memory");					      \
+       }								      \
+     __result; })
+
+#define atomic_decrement_and_test(mem) \
+  ({ char __result;							      \
+     if (sizeof (*(mem)) == 1)						      \
+       __asm __volatile ("subq%.b %#1,%1; seq %0"			      \
+			 : "=dm" (__result), "+m" (*(mem)));		      \
+     else if (sizeof (*(mem)) == 2)					      \
+       __asm __volatile ("subq%.w %#1,%1; seq %0"			      \
+			 : "=dm" (__result), "+m" (*(mem)));		      \
+     else if (sizeof (*(mem)) == 4)					      \
+       __asm __volatile ("subq%.l %#1,%1; seq %0"			      \
+			 : "=dm" (__result), "+m" (*(mem)));		      \
+     else								      \
+       {								      \
+	 __typeof (mem) __memp = (mem);					      \
+	 __typeof (*(mem)) __oldval = *__memp;				      \
+	 __typeof (*(mem)) __temp;					      \
+	 __asm __volatile ("1: move%.l %1,%2;"				      \
+			   "   move%.l %R1,%R2;"			      \
+			   "   subq%.l %#1,%2;"				      \
+			   "   subx%.l %5,%R2;"				      \
+			   "   seq %0;"					      \
+			   "   cas2%.l %1:%R1,%2:%R2,(%3):(%4);"	      \
+			   "   jbne 1b"					      \
+			   : "=&dm" (__result), "=d" (__oldval),	      \
+			     "=&d" (__temp)				      \
+			   : "r" (__memp), "r" ((char *) __memp + 4),	      \
+			     "d" (0), "1" (__oldval)			      \
+			   : "memory");					      \
+       }								      \
+     __result; })
+
+#define atomic_bit_set(mem, bit) \
+  __asm __volatile ("bfset %0{%1,#1}"					      \
+		    : "+m" (*(mem))					      \
+		    : "di" (sizeof (*(mem)) * 8 - (bit) - 1))
+
+#define atomic_bit_test_set(mem, bit) \
+  ({ char __result;							      \
+     __asm __volatile ("bfset %1{%2,#1}; sne %0"			      \
+		       : "=dm" (__result), "+m" (*(mem))		      \
+		       : "di" (sizeof (*(mem)) * 8 - (bit) - 1));	      \
+     __result; })
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/m68020/bits/string.h glibc-ports-2.5-cs/sysdeps/m68k/m680x0/m68020/bits/string.h
--- glibc-ports-2.5/sysdeps/m68k/m680x0/m68020/bits/string.h	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/m68020/bits/string.h	2007-03-27 15:01:15.000000000 +0200
@@ -0,0 +1,26 @@
+/* Optimized, inlined string functions.  m680x0 version, x >= 2.
+   Copyright (C) 1997 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#ifndef _STRING_H
+# error "Never use <bits/string.h> directly; include <string.h> instead."
+#endif
+
+/* Currently the only purpose of this file is to tell the generic inline
+   macros that unaligned memory access is possible.  */
+#define _STRING_ARCH_unaligned	1
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/m68020/Makefile glibc-ports-2.5-cs/sysdeps/m68k/m680x0/m68020/Makefile
--- glibc-ports-2.5/sysdeps/m68k/m680x0/m68020/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/m68020/Makefile	2007-03-27 15:01:16.000000000 +0200
@@ -0,0 +1,3 @@
+ifeq ($(subdir),db2)
+CPPFLAGS += -DHAVE_SPINLOCKS=1 -DHAVE_ASSEM_MC68020_GCC=1
+endif
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/m68020/mul_1.S glibc-ports-2.5-cs/sysdeps/m68k/m680x0/m68020/mul_1.S
--- glibc-ports-2.5/sysdeps/m68k/m680x0/m68020/mul_1.S	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/m68020/mul_1.S	2007-03-27 15:01:16.000000000 +0200
@@ -0,0 +1,87 @@
+/* mc68020 __mpn_mul_1 -- Multiply a limb vector with a limb and store
+   the result in a second limb vector.
+
+Copyright (C) 1992, 1994, 1996, 1998 Free Software Foundation, Inc.
+
+This file is part of the GNU MP Library.
+
+The GNU MP Library is free software; you can redistribute it and/or modify
+it under the terms of the GNU Lesser General Public License as published by
+the Free Software Foundation; either version 2.1 of the License, or (at your
+option) any later version.
+
+The GNU MP Library is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
+License for more details.
+
+You should have received a copy of the GNU Lesser General Public License
+along with the GNU MP Library; see the file COPYING.LIB.  If not, write to
+the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
+MA 02111-1307, USA. */
+
+/*
+  INPUT PARAMETERS
+  res_ptr	(sp + 4)
+  s1_ptr	(sp + 8)
+  s1_size	(sp + 12)
+  s2_limb	(sp + 16)
+*/
+
+#include "sysdep.h"
+#include "asm-syntax.h"
+
+	TEXT
+ENTRY(__mpn_mul_1)
+
+#define res_ptr a0
+#define s1_ptr a1
+#define s1_size d2
+#define s2_limb d4
+
+/* Save used registers on the stack.  */
+	moveml	R(d2)-R(d4),MEM_PREDEC(sp)
+#if 0
+	movel	R(d2),MEM_PREDEC(sp)
+	movel	R(d3),MEM_PREDEC(sp)
+	movel	R(d4),MEM_PREDEC(sp)
+#endif
+
+/* Copy the arguments to registers.  Better use movem?  */
+	movel	MEM_DISP(sp,16),R(res_ptr)
+	movel	MEM_DISP(sp,20),R(s1_ptr)
+	movel	MEM_DISP(sp,24),R(s1_size)
+	movel	MEM_DISP(sp,28),R(s2_limb)
+
+	eorw	#1,R(s1_size)
+	clrl	R(d1)
+	lsrl	#1,R(s1_size)
+	bcc	L(L1)
+	subql	#1,R(s1_size)
+	subl	R(d0),R(d0)	/* (d0,cy) <= (0,0) */
+
+L(Loop:)
+	movel	MEM_POSTINC(s1_ptr),R(d3)
+	mulul	R(s2_limb),R(d1):R(d3)
+	addxl	R(d0),R(d3)
+	movel	R(d3),MEM_POSTINC(res_ptr)
+L(L1:)	movel	MEM_POSTINC(s1_ptr),R(d3)
+	mulul	R(s2_limb),R(d0):R(d3)
+	addxl	R(d1),R(d3)
+	movel	R(d3),MEM_POSTINC(res_ptr)
+
+	dbf	R(s1_size),L(Loop)
+	clrl	R(d3)
+	addxl	R(d3),R(d0)
+	subl	#0x10000,R(s1_size)
+	bcc	L(Loop)
+
+/* Restore used registers from stack frame.  */
+	moveml	MEM_POSTINC(sp),R(d2)-R(d4)
+#if 0
+	movel	MEM_POSTINC(sp),R(d4)
+	movel	MEM_POSTINC(sp),R(d3)
+	movel	MEM_POSTINC(sp),R(d2)
+#endif
+	rts
+END(__mpn_mul_1)
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/m68020/submul_1.S glibc-ports-2.5-cs/sysdeps/m68k/m680x0/m68020/submul_1.S
--- glibc-ports-2.5/sysdeps/m68k/m680x0/m68020/submul_1.S	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/m68020/submul_1.S	2007-03-27 15:01:16.000000000 +0200
@@ -0,0 +1,80 @@
+/* mc68020 __mpn_submul_1 -- Multiply a limb vector with a limb and subtract
+   the result from a second limb vector.
+
+Copyright (C) 1992, 1994, 1996, 1998 Free Software Foundation, Inc.
+
+This file is part of the GNU MP Library.
+
+The GNU MP Library is free software; you can redistribute it and/or modify
+it under the terms of the GNU Lesser General Public License as published by
+the Free Software Foundation; either version 2.1 of the License, or (at your
+option) any later version.
+
+The GNU MP Library is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
+License for more details.
+
+You should have received a copy of the GNU Lesser General Public License
+along with the GNU MP Library; see the file COPYING.LIB.  If not, write to
+the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
+MA 02111-1307, USA. */
+
+/*
+  INPUT PARAMETERS
+  res_ptr	(sp + 4)
+  s1_ptr	(sp + 8)
+  s1_size	(sp + 12)
+  s2_limb	(sp + 16)
+*/
+
+#include "sysdep.h"
+#include "asm-syntax.h"
+
+	TEXT
+ENTRY(__mpn_submul_1)
+
+#define res_ptr a0
+#define s1_ptr a1
+#define s1_size d2
+#define s2_limb d4
+
+/* Save used registers on the stack.  */
+	moveml	R(d2)-R(d5),MEM_PREDEC(sp)
+
+/* Copy the arguments to registers.  Better use movem?  */
+	movel	MEM_DISP(sp,20),R(res_ptr)
+	movel	MEM_DISP(sp,24),R(s1_ptr)
+	movel	MEM_DISP(sp,28),R(s1_size)
+	movel	MEM_DISP(sp,32),R(s2_limb)
+
+	eorw	#1,R(s1_size)
+	clrl	R(d1)
+	clrl	R(d5)
+	lsrl	#1,R(s1_size)
+	bcc	L(L1)
+	subql	#1,R(s1_size)
+	subl	R(d0),R(d0)	/* (d0,cy) <= (0,0) */
+
+L(Loop:)
+	movel	MEM_POSTINC(s1_ptr),R(d3)
+	mulul	R(s2_limb),R(d1):R(d3)
+	addxl	R(d0),R(d3)
+	addxl	R(d5),R(d1)
+	subl	R(d3),MEM_POSTINC(res_ptr)
+L(L1:)	movel	MEM_POSTINC(s1_ptr),R(d3)
+	mulul	R(s2_limb),R(d0):R(d3)
+	addxl	R(d1),R(d3)
+	addxl	R(d5),R(d0)
+	subl	R(d3),MEM_POSTINC(res_ptr)
+
+	dbf	R(s1_size),L(Loop)
+	addxl	R(d5),R(d0)
+	subl	#0x10000,R(s1_size)
+	bcc	L(Loop)
+
+/* Restore used registers from stack frame.  */
+	moveml	MEM_POSTINC(sp),R(d2)-R(d5)
+
+	rts
+END(__mpn_submul_1)
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/m68020/wordcopy.S glibc-ports-2.5-cs/sysdeps/m68k/m680x0/m68020/wordcopy.S
--- glibc-ports-2.5/sysdeps/m68k/m680x0/m68020/wordcopy.S	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/m68020/wordcopy.S	2007-03-27 15:01:16.000000000 +0200
@@ -0,0 +1 @@
+/* Empty, not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/Makefile glibc-ports-2.5-cs/sysdeps/m68k/m680x0/Makefile
--- glibc-ports-2.5/sysdeps/m68k/m680x0/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/Makefile	2007-03-27 15:01:16.000000000 +0200
@@ -0,0 +1,2 @@
+# The 68k `long double' is a distinct type we support.
+long-double-fcts = yes
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/printf_fphex.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/printf_fphex.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/printf_fphex.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/printf_fphex.c	2007-03-27 15:01:16.000000000 +0200
@@ -0,0 +1,2 @@
+#define LONG_DOUBLE_DENORM_BIAS IEEE854_LONG_DOUBLE_BIAS
+#include <sysdeps/ieee754/ldbl-96/printf_fphex.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/rshift.S glibc-ports-2.5-cs/sysdeps/m68k/m680x0/rshift.S
--- glibc-ports-2.5/sysdeps/m68k/m680x0/rshift.S	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/rshift.S	2007-03-27 15:01:16.000000000 +0200
@@ -0,0 +1,146 @@
+/* mc68020 __mpn_rshift -- Shift right a low-level natural-number integer.
+
+Copyright (C) 1996, 1998 Free Software Foundation, Inc.
+
+This file is part of the GNU MP Library.
+
+The GNU MP Library is free software; you can redistribute it and/or modify
+it under the terms of the GNU Lesser General Public License as published by
+the Free Software Foundation; either version 2.1 of the License, or (at your
+option) any later version.
+
+The GNU MP Library is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
+License for more details.
+
+You should have received a copy of the GNU Lesser General Public License
+along with the GNU MP Library; see the file COPYING.LIB.  If not, write to
+the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
+MA 02111-1307, USA. */
+
+/*
+  INPUT PARAMETERS
+  res_ptr	(sp + 4)
+  s_ptr		(sp + 8)
+  s_size	(sp + 16)
+  cnt		(sp + 12)
+*/
+
+#include "sysdep.h"
+#include "asm-syntax.h"
+
+#define res_ptr a1
+#define s_ptr a0
+#define s_size d6
+#define cnt d4
+
+	TEXT
+ENTRY(__mpn_rshift)
+/* Save used registers on the stack.  */
+	moveml	R(d2)-R(d6)/R(a2),MEM_PREDEC(sp)
+
+/* Copy the arguments to registers.  */
+	movel	MEM_DISP(sp,28),R(res_ptr)
+	movel	MEM_DISP(sp,32),R(s_ptr)
+	movel	MEM_DISP(sp,36),R(s_size)
+	movel	MEM_DISP(sp,40),R(cnt)
+
+	moveql	#1,R(d5)
+	cmpl	R(d5),R(cnt)
+	bne	L(Lnormal)
+	cmpl	R(res_ptr),R(s_ptr)
+	bls	L(Lspecial)		/* jump if res_ptr >= s_ptr */
+#if (defined (__mc68020__) || defined (__NeXT__) || defined(mc68020))
+	lea	MEM_INDX1(res_ptr,s_size,l,4),R(a2)
+#else /* not mc68020 */
+	movel	R(s_size),R(d0)
+	asll	#2,R(d0)
+	lea	MEM_INDX(res_ptr,d0,l),R(a2)
+#endif
+	cmpl	R(s_ptr),R(a2)
+	bls	L(Lspecial)		/* jump if s_ptr >= res_ptr + s_size */
+
+L(Lnormal:)
+	moveql	#32,R(d5)
+	subl	R(cnt),R(d5)
+	movel	MEM_POSTINC(s_ptr),R(d2)
+	movel	R(d2),R(d0)
+	lsll	R(d5),R(d0)		/* compute carry limb */
+
+	lsrl	R(cnt),R(d2)
+	movel	R(d2),R(d1)
+	subql	#1,R(s_size)
+	beq	L(Lend)
+	lsrl	#1,R(s_size)
+	bcs	L(L1)
+	subql	#1,R(s_size)
+
+L(Loop:)
+	movel	MEM_POSTINC(s_ptr),R(d2)
+	movel	R(d2),R(d3)
+	lsll	R(d5),R(d3)
+	orl	R(d3),R(d1)
+	movel	R(d1),MEM_POSTINC(res_ptr)
+	lsrl	R(cnt),R(d2)
+L(L1:)
+	movel	MEM_POSTINC(s_ptr),R(d1)
+	movel	R(d1),R(d3)
+	lsll	R(d5),R(d3)
+	orl	R(d3),R(d2)
+	movel	R(d2),MEM_POSTINC(res_ptr)
+	lsrl	R(cnt),R(d1)
+
+	dbf	R(s_size),L(Loop)
+	subl	#0x10000,R(s_size)
+	bcc	L(Loop)
+
+L(Lend:)
+	movel	R(d1),MEM(res_ptr) /* store most significant limb */
+
+/* Restore used registers from stack frame.  */
+	moveml	MEM_POSTINC(sp),R(d2)-R(d6)/R(a2)
+	rts
+
+/* We loop from most significant end of the arrays, which is only
+   permissible if the source and destination don't overlap, since the
+   function is documented to work for overlapping source and destination.  */
+
+L(Lspecial:)
+#if (defined (__mc68020__) || defined (__NeXT__) || defined(mc68020))
+	lea	MEM_INDX1(s_ptr,s_size,l,4),R(s_ptr)
+	lea	MEM_INDX1(res_ptr,s_size,l,4),R(res_ptr)
+#else /* not mc68000 */
+	movel	R(s_size),R(d0)
+	asll	#2,R(d0)
+	addl	R(s_size),R(s_ptr)
+	addl	R(s_size),R(res_ptr)
+#endif
+
+	clrl	R(d0)			/* initialize carry */
+	eorw	#1,R(s_size)
+	lsrl	#1,R(s_size)
+	bcc	L(LL1)
+	subql	#1,R(s_size)
+
+L(LLoop:)
+	movel	MEM_PREDEC(s_ptr),R(d2)
+	roxrl	#1,R(d2)
+	movel	R(d2),MEM_PREDEC(res_ptr)
+L(LL1:)
+	movel	MEM_PREDEC(s_ptr),R(d2)
+	roxrl	#1,R(d2)
+	movel	R(d2),MEM_PREDEC(res_ptr)
+
+	dbf	R(s_size),L(LLoop)
+	roxrl	#1,R(d0)		/* save cy in msb */
+	subl	#0x10000,R(s_size)
+	bcs	L(LLend)
+	addl	R(d0),R(d0)		/* restore cy */
+	bra	L(LLoop)
+
+L(LLend:)
+/* Restore used registers from stack frame.  */
+	moveml	MEM_POSTINC(sp),R(d2)-R(d6)/R(a2)
+	rts
+END(__mpn_rshift)
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/s_isinfl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/s_isinfl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/s_isinfl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/s_isinfl.c	2007-03-27 15:01:16.000000000 +0200
@@ -0,0 +1,42 @@
+/* Copyright (C) 1991, 1992, 1995, 1997, 2002 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <math.h>
+#include "ieee754.h"
+
+/* Return 0 if VALUE is finite or NaN, +1 if it
+   is +Infinity, -1 if it is -Infinity.  */
+int
+__isinfl (long double value)
+{
+  union ieee854_long_double u;
+
+  u.d = value;
+
+  /* An IEEE 854 infinity has an exponent with the
+     maximum possible value and a zero mantissa.
+     In Motorola's interpretation the integer bit is ignored.  */
+  if ((u.ieee.exponent & 0x7fff) == 0x7fff &&
+      (u.ieee.mantissa0 & 0x7fffffff) == 0 && u.ieee.mantissa1 == 0)
+    return u.ieee.negative ? -1 : 1;
+
+  return 0;
+}
+
+hidden_def (__isinfl)
+weak_alias (__isinfl, isinfl);
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/s_isnanl.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/s_isnanl.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/s_isnanl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/s_isnanl.c	2007-03-27 15:01:16.000000000 +0200
@@ -0,0 +1,38 @@
+/* Copyright (C) 1991, 1992, 1995, 1997, 2002 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <math.h>
+#include "ieee754.h"
+
+/* Return nonzero if VALUE is not a number.  */
+int
+__isnanl (long double value)
+{
+  union ieee854_long_double u;
+
+  u.d = value;
+
+  /* IEEE 854 NaN's have the maximum possible
+     exponent and a nonzero mantissa.  In Motorola's
+     interpretation the integer bit is ignored.  */
+  return ((u.ieee.exponent & 0x7fff) == 0x7fff &&
+	  ((u.ieee.mantissa0 & 0x7fffffff) != 0 || u.ieee.mantissa1 != 0));
+}
+
+hidden_def (__isnanl)
+weak_alias (__isnanl, isnanl);
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/strtold_l.c glibc-ports-2.5-cs/sysdeps/m68k/m680x0/strtold_l.c
--- glibc-ports-2.5/sysdeps/m68k/m680x0/strtold_l.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/strtold_l.c	2007-03-27 15:01:16.000000000 +0200
@@ -0,0 +1,2 @@
+#define DENORM_EXP (MIN_EXP - 1)
+#include <sysdeps/ieee754/ldbl-96/strtold_l.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/m680x0/sub_n.S glibc-ports-2.5-cs/sysdeps/m68k/m680x0/sub_n.S
--- glibc-ports-2.5/sysdeps/m68k/m680x0/sub_n.S	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/m680x0/sub_n.S	2007-03-27 15:01:16.000000000 +0200
@@ -0,0 +1,76 @@
+/* mc68020 __mpn_sub_n -- Subtract two limb vectors of the same length > 0 and
+   store difference in a third limb vector.
+
+Copyright (C) 1992, 1994, 1996, 1998 Free Software Foundation, Inc.
+
+This file is part of the GNU MP Library.
+
+The GNU MP Library is free software; you can redistribute it and/or modify
+it under the terms of the GNU Lesser General Public License as published by
+the Free Software Foundation; either version 2.1 of the License, or (at your
+option) any later version.
+
+The GNU MP Library is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
+License for more details.
+
+You should have received a copy of the GNU Lesser General Public License
+along with the GNU MP Library; see the file COPYING.LIB.  If not, write to
+the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
+MA 02111-1307, USA. */
+
+/*
+  INPUT PARAMETERS
+  res_ptr	(sp + 4)
+  s1_ptr	(sp + 8)
+  s2_ptr	(sp + 16)
+  size		(sp + 12)
+*/
+
+#include "sysdep.h"
+#include "asm-syntax.h"
+
+	TEXT
+ENTRY(__mpn_sub_n)
+/* Save used registers on the stack.  */
+	movel	R(d2),MEM_PREDEC(sp)
+	movel	R(a2),MEM_PREDEC(sp)
+
+/* Copy the arguments to registers.  Better use movem?  */
+	movel	MEM_DISP(sp,12),R(a2)
+	movel	MEM_DISP(sp,16),R(a0)
+	movel	MEM_DISP(sp,20),R(a1)
+	movel	MEM_DISP(sp,24),R(d2)
+
+	eorw	#1,R(d2)
+	lsrl	#1,R(d2)
+	bcc	L(L1)
+	subql	#1,R(d2)	/* clears cy as side effect */
+
+L(Loop:)
+	movel	MEM_POSTINC(a0),R(d0)
+	movel	MEM_POSTINC(a1),R(d1)
+	subxl	R(d1),R(d0)
+	movel	R(d0),MEM_POSTINC(a2)
+L(L1:)	movel	MEM_POSTINC(a0),R(d0)
+	movel	MEM_POSTINC(a1),R(d1)
+	subxl	R(d1),R(d0)
+	movel	R(d0),MEM_POSTINC(a2)
+
+	dbf	R(d2),L(Loop)		/* loop until 16 lsb of %4 == -1 */
+	subxl	R(d0),R(d0)	/* d0 <= -cy; save cy as 0 or -1 in d0 */
+	subl	#0x10000,R(d2)
+	bcs	L(L2)
+	addl	R(d0),R(d0)	/* restore cy */
+	bra	L(Loop)
+
+L(L2:)
+	negl	R(d0)
+
+/* Restore used registers from stack frame.  */
+	movel	MEM_POSTINC(sp),R(a2)
+	movel	MEM_POSTINC(sp),R(d2)
+
+	rts
+END(__mpn_sub_n)
diff -Naur glibc-ports-2.5/sysdeps/m68k/Makefile glibc-ports-2.5-cs/sysdeps/m68k/Makefile
--- glibc-ports-2.5/sysdeps/m68k/Makefile	2003-07-10 11:22:13.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/Makefile	2007-03-27 15:01:23.000000000 +0200
@@ -30,9 +30,6 @@
 # Make sure setjmp.c is compiled with a frame pointer
 CFLAGS-setjmp.c := -fno-omit-frame-pointer
 
-# The 68k `long double' is a distinct type we support.
-long-double-fcts = yes
-
 ifeq ($(subdir),elf)
 CFLAGS-rtld.c += -Wno-uninitialized -Wno-unused
 endif
diff -Naur glibc-ports-2.5/sysdeps/m68k/memchr.S glibc-ports-2.5-cs/sysdeps/m68k/memchr.S
--- glibc-ports-2.5/sysdeps/m68k/memchr.S	2003-04-30 00:47:19.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/memchr.S	2007-03-27 15:01:23.000000000 +0200
@@ -26,7 +26,13 @@
 	TEXT
 ENTRY(__memchr)
 	/* Save the callee-saved registers we use.  */
+#ifdef __mcoldfire__
+	movel	R(d2),MEM_PREDEC(sp)
+	movel	R(d3),MEM_PREDEC(sp)
+	movel	R(d4),MEM_PREDEC(sp)
+#else
 	moveml	R(d2)-R(d4),MEM_PREDEC(sp)
+#endif
 
 	/* Get string pointer, character and length.  */
 	movel	MEM_DISP(sp,16),R(a0)
@@ -34,9 +40,15 @@
 	movel	MEM_DISP(sp,24),R(d4)
 
 	/* Check if at least four bytes left to search.  */
+#ifdef __mcoldfire__
+	subql	#4,R(d4)
+	bcs	L(L6)
+	addql	#4,R(d4)
+#else
 	moveql	#4,R(d1)
 	cmpl	R(d1),R(d4)
 	bcs	L(L6)
+#endif
 
 	/* Distribute the character to all bytes of a longword.  */
 	movel	R(d0),R(d1)
@@ -49,7 +61,11 @@
 	/* First search for the character one byte at a time until the
 	   pointer is aligned to a longword boundary.  */
 	movel	R(a0),R(d1)
+#ifdef __mcoldfire__
+	andl	#3,R(d1)
+#else
 	andw	#3,R(d1)
+#endif
 	beq	L(L1)
 	cmpb	MEM(a0),R(d0)
 	beq	L(L9)
@@ -57,8 +73,11 @@
 	subql	#1,R(d4)
 	beq	L(L7)
 
-	movel	R(a0),R(d1)
-	andw	#3,R(d1)
+#ifdef __mcoldfire__
+	subql	#3,R(d1)
+#else
+	subqw	#3,R(d1)
+#endif
 	beq	L(L1)
 	cmpb	MEM(a0),R(d0)
 	beq	L(L9)
@@ -66,8 +85,11 @@
 	subql	#1,R(d4)
 	beq	L(L7)
 
-	movel	R(a0),R(d1)
-	andw	#3,R(d1)
+#ifdef __mcoldfire__
+	addql	#1,R(d1)
+#else
+	addqw	#1,R(d1)
+#endif
 	beq	L(L1)
 	cmpb	MEM(a0),R(d0)
 	beq	L(L9)
@@ -177,19 +199,31 @@
 
 L(L6:)
 	/* Search one byte at a time in the remaining less than 4 bytes.  */
+#ifdef __mcoldfire__
+	addql	#4,R(d4)
+#else
 	andw	#3,R(d4)
+#endif
 	beq	L(L7)
 	cmpb	MEM(a0),R(d0)
 	beq	L(L9)
 	addql	#1,R(a0)
 
+#ifdef __mcoldfire__
+	subql	#1,R(d4)
+#else
 	subqw	#1,R(d4)
+#endif
 	beq	L(L7)
 	cmpb	MEM(a0),R(d0)
 	beq	L(L9)
 	addql	#1,R(a0)
 
+#ifdef __mcoldfire__
+	subql	#1,R(d4)
+#else
 	subqw	#1,R(d4)
+#endif
 	beq	L(L7)
 	cmpb	MEM(a0),R(d0)
 	beq	L(L9)
@@ -198,7 +232,13 @@
 	/* Return NULL.  */
 	clrl	R(d0)
 	movel	R(d0),R(a0)
+#ifdef __mcoldfire__
+	movel	MEM_POSTINC(sp),R(d4)
+	movel	MEM_POSTINC(sp),R(d3)
+	movel	MEM_POSTINC(sp),R(d2)
+#else
 	moveml	MEM_POSTINC(sp),R(d2)-R(d4)
+#endif
 	rts
 
 L(L8:)
@@ -221,7 +261,13 @@
 	/* Otherwise the fourth byte must equal C.  */
 L(L9:)
 	movel	R(a0),R(d0)
+#ifdef __mcoldfire__
+	movel	MEM_POSTINC(sp),R(d4)
+	movel	MEM_POSTINC(sp),R(d3)
+	movel	MEM_POSTINC(sp),R(d2)
+#else
 	moveml	MEM_POSTINC(sp),R(d2)-R(d4)
+#endif
 	rts
 END(__memchr)
 
diff -Naur glibc-ports-2.5/sysdeps/m68k/preconfigure glibc-ports-2.5-cs/sysdeps/m68k/preconfigure
--- glibc-ports-2.5/sysdeps/m68k/preconfigure	2006-02-28 11:10:56.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/preconfigure	2007-03-27 15:01:23.000000000 +0200
@@ -1,6 +1,17 @@
 # This fragment canonicalizes the machine names for m68k variants.
 
 case "$machine" in
-m680?0)		base_machine=m68k machine=m68k/$machine ;;
-m68k)		base_machine=m68k machine=m68k/m68020 ;;
+m680?0)		base_machine=m68k machine=m68k/m680x0/$machine ;;
+m68k)		variant=`(echo "#ifdef __mcoldfire__"
+			  echo "coldfire"
+			  echo "#else"
+			  echo "m680x0/m68020"
+			  echo "#endif") |
+			 $CC $CFLAGS $CPPFLAGS -E - |
+			 grep '^[a-z]'`
+		if test -z "$variant"; then
+		  echo >&2 "Cannot determine m68k processor variant"
+		  exit 1
+		fi
+		base_machine=m68k machine=m68k/$variant ;;
 esac
diff -Naur glibc-ports-2.5/sysdeps/m68k/printf_fphex.c glibc-ports-2.5-cs/sysdeps/m68k/printf_fphex.c
--- glibc-ports-2.5/sysdeps/m68k/printf_fphex.c	1999-07-14 02:28:28.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/printf_fphex.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define LONG_DOUBLE_DENORM_BIAS IEEE854_LONG_DOUBLE_BIAS
-#include <sysdeps/ieee754/ldbl-96/printf_fphex.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/rawmemchr.S glibc-ports-2.5-cs/sysdeps/m68k/rawmemchr.S
--- glibc-ports-2.5/sysdeps/m68k/rawmemchr.S	2002-08-03 08:41:33.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/rawmemchr.S	2007-03-27 15:01:23.000000000 +0200
@@ -43,21 +43,31 @@
 	/* First search for the character one byte at a time until the
 	   pointer is aligned to a longword boundary.  */
 	movel	R(a0),R(d1)
+#ifdef __mcoldfire__
+	andl	#3,R(d1)
+#else
 	andw	#3,R(d1)
+#endif
 	beq	L(L1)
 	cmpb	MEM(a0),R(d0)
 	beq	L(L9)
 	addql	#1,R(a0)
 
-	movel	R(a0),R(d1)
-	andw	#3,R(d1)
+#ifdef __mcoldfire__
+	subql	#3,R(d1)
+#else
+	subqw	#3,R(d1)
+#endif
 	beq	L(L1)
 	cmpb	MEM(a0),R(d0)
 	beq	L(L9)
 	addql	#1,R(a0)
 
-	movel	R(a0),R(d1)
-	andw	#3,R(d1)
+#ifdef __mcoldfire__
+	addql	#1,R(d1)
+#else
+	addqw	#1,R(d1)
+#endif
 	beq	L(L1)
 	cmpb	MEM(a0),R(d0)
 	beq	L(L9)
diff -Naur glibc-ports-2.5/sysdeps/m68k/rshift.S glibc-ports-2.5-cs/sysdeps/m68k/rshift.S
--- glibc-ports-2.5/sysdeps/m68k/rshift.S	2001-07-07 12:13:13.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/rshift.S	1970-01-01 01:00:00.000000000 +0100
@@ -1,146 +0,0 @@
-/* mc68020 __mpn_rshift -- Shift right a low-level natural-number integer.
-
-Copyright (C) 1996, 1998 Free Software Foundation, Inc.
-
-This file is part of the GNU MP Library.
-
-The GNU MP Library is free software; you can redistribute it and/or modify
-it under the terms of the GNU Lesser General Public License as published by
-the Free Software Foundation; either version 2.1 of the License, or (at your
-option) any later version.
-
-The GNU MP Library is distributed in the hope that it will be useful, but
-WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
-or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
-License for more details.
-
-You should have received a copy of the GNU Lesser General Public License
-along with the GNU MP Library; see the file COPYING.LIB.  If not, write to
-the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
-MA 02111-1307, USA. */
-
-/*
-  INPUT PARAMETERS
-  res_ptr	(sp + 4)
-  s_ptr		(sp + 8)
-  s_size	(sp + 16)
-  cnt		(sp + 12)
-*/
-
-#include "sysdep.h"
-#include "asm-syntax.h"
-
-#define res_ptr a1
-#define s_ptr a0
-#define s_size d6
-#define cnt d4
-
-	TEXT
-ENTRY(__mpn_rshift)
-/* Save used registers on the stack.  */
-	moveml	R(d2)-R(d6)/R(a2),MEM_PREDEC(sp)
-
-/* Copy the arguments to registers.  */
-	movel	MEM_DISP(sp,28),R(res_ptr)
-	movel	MEM_DISP(sp,32),R(s_ptr)
-	movel	MEM_DISP(sp,36),R(s_size)
-	movel	MEM_DISP(sp,40),R(cnt)
-
-	moveql	#1,R(d5)
-	cmpl	R(d5),R(cnt)
-	bne	L(Lnormal)
-	cmpl	R(res_ptr),R(s_ptr)
-	bls	L(Lspecial)		/* jump if res_ptr >= s_ptr */
-#if (defined (__mc68020__) || defined (__NeXT__) || defined(mc68020))
-	lea	MEM_INDX1(res_ptr,s_size,l,4),R(a2)
-#else /* not mc68020 */
-	movel	R(s_size),R(d0)
-	asll	#2,R(d0)
-	lea	MEM_INDX(res_ptr,d0,l),R(a2)
-#endif
-	cmpl	R(s_ptr),R(a2)
-	bls	L(Lspecial)		/* jump if s_ptr >= res_ptr + s_size */
-
-L(Lnormal:)
-	moveql	#32,R(d5)
-	subl	R(cnt),R(d5)
-	movel	MEM_POSTINC(s_ptr),R(d2)
-	movel	R(d2),R(d0)
-	lsll	R(d5),R(d0)		/* compute carry limb */
-
-	lsrl	R(cnt),R(d2)
-	movel	R(d2),R(d1)
-	subql	#1,R(s_size)
-	beq	L(Lend)
-	lsrl	#1,R(s_size)
-	bcs	L(L1)
-	subql	#1,R(s_size)
-
-L(Loop:)
-	movel	MEM_POSTINC(s_ptr),R(d2)
-	movel	R(d2),R(d3)
-	lsll	R(d5),R(d3)
-	orl	R(d3),R(d1)
-	movel	R(d1),MEM_POSTINC(res_ptr)
-	lsrl	R(cnt),R(d2)
-L(L1:)
-	movel	MEM_POSTINC(s_ptr),R(d1)
-	movel	R(d1),R(d3)
-	lsll	R(d5),R(d3)
-	orl	R(d3),R(d2)
-	movel	R(d2),MEM_POSTINC(res_ptr)
-	lsrl	R(cnt),R(d1)
-
-	dbf	R(s_size),L(Loop)
-	subl	#0x10000,R(s_size)
-	bcc	L(Loop)
-
-L(Lend:)
-	movel	R(d1),MEM(res_ptr) /* store most significant limb */
-
-/* Restore used registers from stack frame.  */
-	moveml	MEM_POSTINC(sp),R(d2)-R(d6)/R(a2)
-	rts
-
-/* We loop from most significant end of the arrays, which is only
-   permissible if the source and destination don't overlap, since the
-   function is documented to work for overlapping source and destination.  */
-
-L(Lspecial:)
-#if (defined (__mc68020__) || defined (__NeXT__) || defined(mc68020))
-	lea	MEM_INDX1(s_ptr,s_size,l,4),R(s_ptr)
-	lea	MEM_INDX1(res_ptr,s_size,l,4),R(res_ptr)
-#else /* not mc68000 */
-	movel	R(s_size),R(d0)
-	asll	#2,R(d0)
-	addl	R(s_size),R(s_ptr)
-	addl	R(s_size),R(res_ptr)
-#endif
-
-	clrl	R(d0)			/* initialize carry */
-	eorw	#1,R(s_size)
-	lsrl	#1,R(s_size)
-	bcc	L(LL1)
-	subql	#1,R(s_size)
-
-L(LLoop:)
-	movel	MEM_PREDEC(s_ptr),R(d2)
-	roxrl	#1,R(d2)
-	movel	R(d2),MEM_PREDEC(res_ptr)
-L(LL1:)
-	movel	MEM_PREDEC(s_ptr),R(d2)
-	roxrl	#1,R(d2)
-	movel	R(d2),MEM_PREDEC(res_ptr)
-
-	dbf	R(s_size),L(LLoop)
-	roxrl	#1,R(d0)		/* save cy in msb */
-	subl	#0x10000,R(s_size)
-	bcs	L(LLend)
-	addl	R(d0),R(d0)		/* restore cy */
-	bra	L(LLoop)
-
-L(LLend:)
-/* Restore used registers from stack frame.  */
-	moveml	MEM_POSTINC(sp),R(d2)-R(d6)/R(a2)
-	rts
-END(__mpn_rshift)
diff -Naur glibc-ports-2.5/sysdeps/m68k/setjmp.c glibc-ports-2.5-cs/sysdeps/m68k/setjmp.c
--- glibc-ports-2.5/sysdeps/m68k/setjmp.c	2003-09-15 10:43:12.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/setjmp.c	2007-03-27 15:01:23.000000000 +0200
@@ -1,4 +1,4 @@
-/* Copyright (C) 1991, 1992, 1994, 1997, 2001 Free Software Foundation, Inc.
+/* Copyright (C) 1991, 1992, 1994, 1997, 2001, 2006 Free Software Foundation, Inc.
    This file is part of the GNU C Library.
 
    The GNU C Library is free software; you can redistribute it and/or
@@ -37,27 +37,35 @@
 		: : "m" (env[0].__jmpbuf[0].__dregs[0]));
 
   /* Save return address in place of register A0.  */
-  env[0].__jmpbuf[0].__aregs[0] = ((void **) &env)[-1];
+  env[0].__jmpbuf[0].__aregs[0] = __builtin_return_address (0);
 
   /* Save address registers A1 through A5.  */
   asm volatile ("movem%.l %/a1-%/a5, %0"
 		: : "m" (env[0].__jmpbuf[0].__aregs[1]));
 
   /* Save caller's FP, not our own.  */
-  env[0].__jmpbuf[0].__fp = ((void **) &env)[-2];
+  env[0].__jmpbuf[0].__fp = *(int **) __builtin_frame_address (0);
 
   /* Save caller's SP, not our own.  */
-  env[0].__jmpbuf[0].__sp = (void *) &env;
+  env[0].__jmpbuf[0].__sp = (int *) __builtin_frame_address (0) + 2;
 
 #if defined __HAVE_68881__ || defined __HAVE_FPU__
   /* Save floating-point (68881) registers FP0 through FP7.  */
   asm volatile ("fmovem%.x %/fp0-%/fp7, %0"
 		: : "m" (env[0].__jmpbuf[0].__fpregs[0]));
+#elif defined (__mcffpu__)
+  asm volatile ("fmovem %/fp0-%/fp7, %0"
+		: : "m" (env[0].__jmpbuf[0].__fpregs[0]));
 #endif
 
+#if defined NOT_IN_libc && defined IS_IN_rtld
+  /* In ld.so we never save the signal mask.  */
+  return 0;
+#else
   /* Save the signal mask if requested.  */
   return __sigjmp_save (env, savemask);
+#endif
 }
 #if !defined BSD_SETJMP && !defined BSD__SETJMP
-hidden_def (__sigsetjmp)
+libc_hidden_def (__sigsetjmp)
 #endif
diff -Naur glibc-ports-2.5/sysdeps/m68k/s_isinfl.c glibc-ports-2.5-cs/sysdeps/m68k/s_isinfl.c
--- glibc-ports-2.5/sysdeps/m68k/s_isinfl.c	2002-09-10 03:05:50.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/s_isinfl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,42 +0,0 @@
-/* Copyright (C) 1991, 1992, 1995, 1997, 2002 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <math.h>
-#include "ieee754.h"
-
-/* Return 0 if VALUE is finite or NaN, +1 if it
-   is +Infinity, -1 if it is -Infinity.  */
-int
-__isinfl (long double value)
-{
-  union ieee854_long_double u;
-
-  u.d = value;
-
-  /* An IEEE 854 infinity has an exponent with the
-     maximum possible value and a zero mantissa.
-     In Motorola's interpretation the integer bit is ignored.  */
-  if ((u.ieee.exponent & 0x7fff) == 0x7fff &&
-      (u.ieee.mantissa0 & 0x7fffffff) == 0 && u.ieee.mantissa1 == 0)
-    return u.ieee.negative ? -1 : 1;
-
-  return 0;
-}
-
-hidden_def (__isinfl)
-weak_alias (__isinfl, isinfl);
diff -Naur glibc-ports-2.5/sysdeps/m68k/s_isnanl.c glibc-ports-2.5-cs/sysdeps/m68k/s_isnanl.c
--- glibc-ports-2.5/sysdeps/m68k/s_isnanl.c	2002-09-10 03:14:47.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/s_isnanl.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,38 +0,0 @@
-/* Copyright (C) 1991, 1992, 1995, 1997, 2002 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#include <math.h>
-#include "ieee754.h"
-
-/* Return nonzero if VALUE is not a number.  */
-int
-__isnanl (long double value)
-{
-  union ieee854_long_double u;
-
-  u.d = value;
-
-  /* IEEE 854 NaN's have the maximum possible
-     exponent and a nonzero mantissa.  In Motorola's
-     interpretation the integer bit is ignored.  */
-  return ((u.ieee.exponent & 0x7fff) == 0x7fff &&
-	  ((u.ieee.mantissa0 & 0x7fffffff) != 0 || u.ieee.mantissa1 != 0));
-}
-
-hidden_def (__isnanl)
-weak_alias (__isnanl, isnanl);
diff -Naur glibc-ports-2.5/sysdeps/m68k/strchrnul.S glibc-ports-2.5-cs/sysdeps/m68k/strchrnul.S
--- glibc-ports-2.5/sysdeps/m68k/strchrnul.S	2001-07-06 06:55:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/strchrnul.S	2007-03-27 15:01:23.000000000 +0200
@@ -44,32 +44,42 @@
 	/* First search for the character one byte at a time until the
 	   pointer is aligned to a longword boundary.  */
 	movel	R(a0),R(d1)
+#ifdef __mcoldfire__
+	andl	#3,R(d1)
+#else
 	andw	#3,R(d1)
+#endif
 	beq	L(L1)
-	moveb	MEM(a0),R(d1)
-	cmpb	R(d0),R(d1)
+	moveb	MEM(a0),R(d2)
+	cmpb	R(d0),R(d2)
 	beq	L(L9)
-	tstb	R(d1)
+	tstb	R(d2)
 	beq	L(L9)
 	addql	#1,R(a0)
 
-	movel	R(a0),R(d1)
-	andw	#3,R(d1)
+#ifdef __mcoldfire__
+	subql	#3,R(d1)
+#else
+	subqw	#3,R(d1)
+#endif
 	beq	L(L1)
-	moveb	MEM(a0),R(d1)
-	cmpb	R(d0),R(d1)
+	moveb	MEM(a0),R(d2)
+	cmpb	R(d0),R(d2)
 	beq	L(L9)
-	tstb	R(d1)
+	tstb	R(d2)
 	beq	L(L9)
 	addql	#1,R(a0)
 
-	movel	R(a0),R(d1)
-	andw	#3,R(d1)
+#ifdef __mcoldfire__
+	addql	#1,R(d1)
+#else
+	addqw	#1,R(d1)
+#endif
 	beq	L(L1)
-	moveb	MEM(a0),R(d1)
-	cmpb	R(d0),R(d1)
+	moveb	MEM(a0),R(d2)
+	cmpb	R(d0),R(d2)
 	beq	L(L9)
-	tstb	R(d1)
+	tstb	R(d2)
 	beq	L(L9)
 	addql	#1,R(a0)
 
diff -Naur glibc-ports-2.5/sysdeps/m68k/strchr.S glibc-ports-2.5-cs/sysdeps/m68k/strchr.S
--- glibc-ports-2.5/sysdeps/m68k/strchr.S	2003-04-30 00:47:19.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/strchr.S	2007-03-27 15:01:23.000000000 +0200
@@ -43,32 +43,42 @@
 	/* First search for the character one byte at a time until the
 	   pointer is aligned to a longword boundary.  */
 	movel	R(a0),R(d1)
+#ifdef __mcoldfire__
+	andl	#3,R(d1)
+#else
 	andw	#3,R(d1)
+#endif
 	beq	L(L1)
-	moveb	MEM(a0),R(d1)
-	cmpb	R(d0),R(d1)
+	moveb	MEM(a0),R(d2)
+	cmpb	R(d0),R(d2)
 	beq	L(L9)
-	tstb	R(d1)
+	tstb	R(d2)
 	beq	L(L3)
 	addql	#1,R(a0)
 
-	movel	R(a0),R(d1)
-	andw	#3,R(d1)
+#ifdef __mcoldfire__
+	subql	#3,R(d1)
+#else
+	subqw	#3,R(d1)
+#endif
 	beq	L(L1)
-	moveb	MEM(a0),R(d1)
-	cmpb	R(d0),R(d1)
+	moveb	MEM(a0),R(d2)
+	cmpb	R(d0),R(d2)
 	beq	L(L9)
-	tstb	R(d1)
+	tstb	R(d2)
 	beq	L(L3)
 	addql	#1,R(a0)
 
-	movel	R(a0),R(d1)
-	andw	#3,R(d1)
+#ifdef __mcoldfire__
+	addql	#1,R(d1)
+#else
+	addqw	#1,R(d1)
+#endif
 	beq	L(L1)
-	moveb	MEM(a0),R(d1)
-	cmpb	R(d0),R(d1)
+	moveb	MEM(a0),R(d2)
+	cmpb	R(d0),R(d2)
 	beq	L(L9)
-	tstb	R(d1)
+	tstb	R(d2)
 	beq	L(L3)
 	addql	#1,R(a0)
 
diff -Naur glibc-ports-2.5/sysdeps/m68k/strtold_l.c glibc-ports-2.5-cs/sysdeps/m68k/strtold_l.c
--- glibc-ports-2.5/sysdeps/m68k/strtold_l.c	2004-03-14 22:01:14.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/strtold_l.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-#define DENORM_EXP (MIN_EXP - 1)
-#include <sysdeps/ieee754/ldbl-96/strtold_l.c>
diff -Naur glibc-ports-2.5/sysdeps/m68k/sub_n.S glibc-ports-2.5-cs/sysdeps/m68k/sub_n.S
--- glibc-ports-2.5/sysdeps/m68k/sub_n.S	2001-07-07 12:13:13.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/m68k/sub_n.S	1970-01-01 01:00:00.000000000 +0100
@@ -1,76 +0,0 @@
-/* mc68020 __mpn_sub_n -- Subtract two limb vectors of the same length > 0 and
-   store difference in a third limb vector.
-
-Copyright (C) 1992, 1994, 1996, 1998 Free Software Foundation, Inc.
-
-This file is part of the GNU MP Library.
-
-The GNU MP Library is free software; you can redistribute it and/or modify
-it under the terms of the GNU Lesser General Public License as published by
-the Free Software Foundation; either version 2.1 of the License, or (at your
-option) any later version.
-
-The GNU MP Library is distributed in the hope that it will be useful, but
-WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
-or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
-License for more details.
-
-You should have received a copy of the GNU Lesser General Public License
-along with the GNU MP Library; see the file COPYING.LIB.  If not, write to
-the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
-MA 02111-1307, USA. */
-
-/*
-  INPUT PARAMETERS
-  res_ptr	(sp + 4)
-  s1_ptr	(sp + 8)
-  s2_ptr	(sp + 16)
-  size		(sp + 12)
-*/
-
-#include "sysdep.h"
-#include "asm-syntax.h"
-
-	TEXT
-ENTRY(__mpn_sub_n)
-/* Save used registers on the stack.  */
-	movel	R(d2),MEM_PREDEC(sp)
-	movel	R(a2),MEM_PREDEC(sp)
-
-/* Copy the arguments to registers.  Better use movem?  */
-	movel	MEM_DISP(sp,12),R(a2)
-	movel	MEM_DISP(sp,16),R(a0)
-	movel	MEM_DISP(sp,20),R(a1)
-	movel	MEM_DISP(sp,24),R(d2)
-
-	eorw	#1,R(d2)
-	lsrl	#1,R(d2)
-	bcc	L(L1)
-	subql	#1,R(d2)	/* clears cy as side effect */
-
-L(Loop:)
-	movel	MEM_POSTINC(a0),R(d0)
-	movel	MEM_POSTINC(a1),R(d1)
-	subxl	R(d1),R(d0)
-	movel	R(d0),MEM_POSTINC(a2)
-L(L1:)	movel	MEM_POSTINC(a0),R(d0)
-	movel	MEM_POSTINC(a1),R(d1)
-	subxl	R(d1),R(d0)
-	movel	R(d0),MEM_POSTINC(a2)
-
-	dbf	R(d2),L(Loop)		/* loop until 16 lsb of %4 == -1 */
-	subxl	R(d0),R(d0)	/* d0 <= -cy; save cy as 0 or -1 in d0 */
-	subl	#0x10000,R(d2)
-	bcs	L(L2)
-	addl	R(d0),R(d0)	/* restore cy */
-	bra	L(Loop)
-
-L(L2:)
-	negl	R(d0)
-
-/* Restore used registers from stack frame.  */
-	movel	MEM_POSTINC(sp),R(a2)
-	movel	MEM_POSTINC(sp),R(d2)
-
-	rts
-END(__mpn_sub_n)
diff -Naur glibc-ports-2.5/sysdeps/m68k/sysdep.h glibc-ports-2.5-cs/sysdeps/m68k/sysdep.h
--- glibc-ports-2.5/sysdeps/m68k/sysdep.h	2003-01-10 15:08:16.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/sysdep.h	2007-03-27 15:01:22.000000000 +0200
@@ -97,4 +97,26 @@
 #  define JUMPTARGET(name)	name
 # endif
 
+/* Perform operation OP with PC-relative SRC as the first operand and
+   DST as the second.  TMP is available as a temporary if needed.  */
+#ifdef __mcoldfire__
+#define PCREL_OP(OP, SRC, DST, TMP) \
+  move.l &SRC - ., TMP; OP (-8, %pc, TMP), DST
+#else
+#define PCREL_OP(OP, SRC, DST, TMP) \
+  OP SRC(%pc), DST
+#endif
+
+#else
+
+/* As above, but PC is the spelling of the PC register.  We need this
+   so that the macro can be used in both normal and extended asms.  */
+#ifdef __mcoldfire__
+#define PCREL_OP(OP, SRC, DST, TMP, PC) \
+  "move.l #" SRC " - ., " TMP "\n\t" OP " (-8, " PC ", " TMP "), " DST
+#else
+#define PCREL_OP(OP, SRC, DST, TMP, PC) \
+  OP " " SRC "(" PC "), " DST
+#endif
+
 #endif	/* __ASSEMBLER__ */
diff -Naur glibc-ports-2.5/sysdeps/m68k/tst-audit.h glibc-ports-2.5-cs/sysdeps/m68k/tst-audit.h
--- glibc-ports-2.5/sysdeps/m68k/tst-audit.h	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/tst-audit.h	2007-03-27 15:01:23.000000000 +0200
@@ -0,0 +1,25 @@
+/* Definitions for testing PLT entry/exit auditing.  m68k version.
+   Copyright (C) 2006 Free Software Foundation, Inc.
+
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#define pltenter la_m68k_gnu_pltenter
+#define pltexit la_m68k_gnu_pltexit
+#define La_regs La_m68k_regs
+#define La_retval La_m68k_retval
+#define int_retval lrv_d0
diff -Naur glibc-ports-2.5/sysdeps/m68k/wcpcpy.c glibc-ports-2.5-cs/sysdeps/m68k/wcpcpy.c
--- glibc-ports-2.5/sysdeps/m68k/wcpcpy.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/wcpcpy.c	2007-03-27 15:01:22.000000000 +0200
@@ -0,0 +1,37 @@
+/* Copyright (C) 1996, 1997, 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Ulrich Drepper <drepper@gnu.ai.mit.edu>, 1996.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+/* The generic version of this file assumes that __alignof__(wchar_t) ==
+   sizeof (wchar_t).  We therefore use this port-specific implementation
+   instead.  */
+#include <wchar.h>
+
+/* Copy SRC to DEST, returning the address of the terminating L'\0' in
+   DEST.  */
+wchar_t *
+__wcpcpy (wchar_t *dest, const wchar_t *src)
+{
+  do
+    ;
+  while ((*dest++ = *src++));
+
+  return dest - 1;
+}
+
+weak_alias (__wcpcpy, wcpcpy)
diff -Naur glibc-ports-2.5/sysdeps/m68k/wcpcpy_chk.c glibc-ports-2.5-cs/sysdeps/m68k/wcpcpy_chk.c
--- glibc-ports-2.5/sysdeps/m68k/wcpcpy_chk.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/m68k/wcpcpy_chk.c	2007-03-27 15:01:23.000000000 +0200
@@ -0,0 +1,36 @@
+/* Copyright (C) 1996, 1997, 2005, 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Ulrich Drepper <drepper@gnu.ai.mit.edu>, 1996.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+/* The generic version of this file assumes that __alignof__(wchar_t) ==
+   sizeof (wchar_t).  We therefore use this port-specific implementation
+   instead.  */
+#include <wchar.h>
+
+/* Copy SRC to DEST, returning the address of the terminating L'\0' in
+   DEST.  Check for overflows.  */
+wchar_t *
+__wcpcpy_chk (wchar_t *dest, const wchar_t *src, size_t destlen)
+{
+  do
+    if (destlen-- == 0)
+      __chk_fail ();
+  while ((*dest++ = *src++));
+
+  return dest - 1;
+}
diff -Naur glibc-ports-2.5/sysdeps/mips/bits/mathdef.h glibc-ports-2.5-cs/sysdeps/mips/bits/mathdef.h
--- glibc-ports-2.5/sysdeps/mips/bits/mathdef.h	2006-02-01 03:59:58.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/mips/bits/mathdef.h	2007-03-27 15:02:17.000000000 +0200
@@ -1,4 +1,4 @@
-/* Copyright (C) 1997, 1998, 1999, 2000, 2002, 2003, 2004
+/* Copyright (C) 1997, 1998, 1999, 2000, 2002, 2003, 2004, 2007
 	Free Software Foundation, Inc.
    This file is part of the GNU C Library.
 
@@ -26,10 +26,9 @@
 #if defined  __USE_ISOC99 && defined _MATH_H && !defined _MATH_H_MATHDEF
 # define _MATH_H_MATHDEF	1
 
-/* Normally, there is no long double type and the `float' and `double'
-   expressions are evaluated as `double'.  */
-typedef double float_t;		/* `float' expressions are evaluated as
-				   `double'.  */
+/* MIPS has `float' and `double' operations.  */
+typedef float float_t;		/* `float' expressions are evaluated as
+				   `float'.  */
 typedef double double_t;	/* `double' expressions are evaluated as
 				   `double'.  */
 
diff -Naur glibc-ports-2.5/sysdeps/mips/dl-machine.h glibc-ports-2.5-cs/sysdeps/mips/dl-machine.h
--- glibc-ports-2.5/sysdeps/mips/dl-machine.h	2006-03-03 02:06:47.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/mips/dl-machine.h	2007-03-27 15:02:21.000000000 +0200
@@ -282,9 +282,6 @@
 	".previous"\
 );
 
-/* The MIPS never uses Elfxx_Rela relocations.  */
-#define ELF_MACHINE_NO_RELA 1
-
 /* Names of the architecture-specific auditing callback functions.  */
 # if _MIPS_SIM == _ABIO32
 #  define ARCH_LA_PLTENTER mips_o32_gnu_pltenter
@@ -301,16 +298,18 @@
 
 #ifdef RESOLVE_MAP
 
-/* Perform the relocation specified by RELOC and SYM (which is fully resolved).
+/* Perform a relocation described by R_INFO at the location pointed to
+   by RELOC_ADDR.  SYM is the relocation symbol specified by R_INFO and
    MAP is the object containing the reloc.  */
 
 auto inline void
 __attribute__ ((always_inline))
-elf_machine_rel (struct link_map *map, const ElfW(Rel) *reloc,
-		 const ElfW(Sym) *sym, const struct r_found_version *version,
-		 void *const reloc_addr)
+elf_machine_reloc (struct link_map *map, ElfW(Addr) r_info,
+		   const ElfW(Sym) *sym, const struct r_found_version *version,
+		   void *reloc_addr, ElfW(Addr) r_addend, int inplace_p)
 {
-  const unsigned long int r_type = ELFW(R_TYPE) (reloc->r_info);
+  const unsigned long int r_type = ELFW(R_TYPE) (r_info);
+  ElfW(Addr) *addr_field = (ElfW(Addr) *) reloc_addr;
 
 #if !defined RTLD_BOOTSTRAP && !defined SHARED
   /* This is defined in rtld.c, but nowhere in the static libc.a;
@@ -342,18 +341,28 @@
 	  case R_MIPS_TLS_DTPMOD64:
 	  case R_MIPS_TLS_DTPMOD32:
 	    if (sym_map)
-	      *(ElfW(Addr) *)reloc_addr = sym_map->l_tls_modid;
+	      *addr_field = sym_map->l_tls_modid;
 	    break;
 
 	  case R_MIPS_TLS_DTPREL64:
 	  case R_MIPS_TLS_DTPREL32:
-	    *(ElfW(Addr) *)reloc_addr += TLS_DTPREL_VALUE (sym);
+	    if (sym)
+	      {
+		if (inplace_p)
+		  r_addend = *addr_field;
+		*addr_field = r_addend + TLS_DTPREL_VALUE (sym);
+	      }
 	    break;
 
 	  case R_MIPS_TLS_TPREL32:
 	  case R_MIPS_TLS_TPREL64:
-	    CHECK_STATIC_TLS (map, sym_map);
-	    *(ElfW(Addr) *)reloc_addr += TLS_TPREL_VALUE (sym_map, sym);
+	    if (sym)
+	      {
+		CHECK_STATIC_TLS (map, sym_map);
+		if (inplace_p)
+		  r_addend = *addr_field;
+		*addr_field = r_addend + TLS_TPREL_VALUE (sym_map, sym);
+	      }
 	    break;
 	  }
 
@@ -367,13 +376,14 @@
     case R_MIPS_REL32:
 #endif
       {
-	int symidx = ELFW(R_SYM) (reloc->r_info);
+	int symidx = ELFW(R_SYM) (r_info);
 	ElfW(Addr) reloc_value;
 
-	/* Support relocations on mis-aligned offsets.  Should we ever
-	   implement RELA, this should be replaced with an assignment
-	   from reloc->r_addend.  */
-	__builtin_memcpy (&reloc_value, reloc_addr, sizeof (reloc_value));
+	if (inplace_p)
+	  /* Support relocations on mis-aligned offsets.  */
+	  __builtin_memcpy (&reloc_value, reloc_addr, sizeof (reloc_value));
+	else
+	  reloc_value = r_addend;
 
 	if (symidx)
 	  {
@@ -424,6 +434,31 @@
 	__builtin_memcpy (reloc_addr, &reloc_value, sizeof (reloc_value));
       }
       break;
+#ifndef RTLD_BOOTSTRAP
+#if _MIPS_SIM == _ABI64
+    case (R_MIPS_64 << 8) | R_MIPS_GLOB_DAT:
+#else
+    case R_MIPS_GLOB_DAT:
+#endif
+      {
+	int symidx = ELFW(R_SYM) (r_info);
+	const ElfW(Word) gotsym
+	  = (const ElfW(Word)) map->l_info[DT_MIPS (GOTSYM)]->d_un.d_val;
+
+	if (__builtin_expect ((ElfW(Word)) symidx >= gotsym, 1))
+	  {
+	    const ElfW(Addr) *got
+	      = (const ElfW(Addr) *) D_PTR (map, l_info[DT_PLTGOT]);
+	    const ElfW(Word) local_gotno
+	      = ((const ElfW(Word))
+		 map->l_info[DT_MIPS (LOCAL_GOTNO)]->d_un.d_val);
+
+	    ElfW(Addr) reloc_value = got[symidx + local_gotno - gotsym];
+	    __builtin_memcpy (reloc_addr, &reloc_value, sizeof (reloc_value));
+	  }
+      }
+      break;
+#endif
     case R_MIPS_NONE:		/* Alright, Wilbur.  */
       break;
 #if _MIPS_SIM == _ABI64
@@ -436,7 +471,7 @@
 	 itself.  For ABI compliance, we ignore such _64 dummy
 	 relocations.  For RELA, this may be simply removed, since
 	 it's totally unnecessary.  */
-      if (ELFW(R_SYM) (reloc->r_info) == 0)
+      if (ELFW(R_SYM) (r_info) == 0)
 	break;
       /* Fall through.  */
 #endif
@@ -446,6 +481,19 @@
     }
 }
 
+/* Perform the relocation specified by RELOC and SYM (which is fully resolved).
+   MAP is the object containing the reloc.  */
+
+auto inline void
+__attribute__ ((always_inline))
+elf_machine_rel (struct link_map *map, const ElfW(Rel) *reloc,
+		 const ElfW(Sym) *sym, const struct r_found_version *version,
+		 void *const reloc_addr)
+{
+  elf_machine_reloc (map, (ElfW(Addr)) reloc->r_info,
+		     sym, version, reloc_addr, 0, 1);
+}
+
 auto inline void
 __attribute__((always_inline))
 elf_machine_rel_relative (ElfW(Addr) l_addr, const ElfW(Rel) *reloc,
@@ -457,7 +505,7 @@
 auto inline void
 __attribute__((always_inline))
 elf_machine_lazy_rel (struct link_map *map,
-		      ElfW(Addr) l_addr, const ElfW(Rel) *reloc)
+		      ElfW(Addr) l_addr, const ElfW(Rela) *reloc)
 {
   /* Do nothing.  */
 }
@@ -468,6 +516,8 @@
 		  const ElfW(Sym) *sym, const struct r_found_version *version,
 		 void *const reloc_addr)
 {
+  elf_machine_reloc (map, (ElfW(Addr)) reloc->r_info, sym, version,
+		     reloc_addr, reloc->r_addend, 0);
 }
 
 auto inline void
diff -Naur glibc-ports-2.5/sysdeps/mips/elf/ldsodefs.h glibc-ports-2.5-cs/sysdeps/mips/elf/ldsodefs.h
--- glibc-ports-2.5/sysdeps/mips/elf/ldsodefs.h	2003-03-22 16:07:05.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/mips/elf/ldsodefs.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,109 +0,0 @@
-/* Run-time dynamic linker data structures for loaded ELF shared objects.
-   Copyright (C) 2000, 2002, 2003 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#ifndef _MIPS_LDSODEFS_H
-#define _MIPS_LDSODEFS_H
-
-/* The MIPS ABI specifies that the dynamic section has to be read-only.  */
-
-#define DL_RO_DYN_SECTION 1
-
-#include_next <ldsodefs.h>
-
-/* The 64-bit MIPS ELF ABI uses an unusual reloc format.  Each
-   relocation entry specifies up to three actual relocations, all at
-   the same address.  The first relocation which required a symbol
-   uses the symbol in the r_sym field.  The second relocation which
-   requires a symbol uses the symbol in the r_ssym field.  If all
-   three relocations require a symbol, the third one uses a zero
-   value.
-
-   We define these structures in internal headers because we're not
-   sure we want to make them part of the ABI yet.  Eventually, some of
-   this may move into elf/elf.h.  */
-
-/* An entry in a 64 bit SHT_REL section.  */
-
-typedef struct
-{
-  Elf32_Word    r_sym;		/* Symbol index */
-  unsigned char r_ssym;		/* Special symbol for 2nd relocation */
-  unsigned char r_type3;	/* 3rd relocation type */
-  unsigned char r_type2;	/* 2nd relocation type */
-  unsigned char r_type1;	/* 1st relocation type */
-} _Elf64_Mips_R_Info;
-
-typedef union
-{
-  Elf64_Xword	r_info_number;
-  _Elf64_Mips_R_Info r_info_fields;
-} _Elf64_Mips_R_Info_union;
-
-typedef struct
-{
-  Elf64_Addr	r_offset;		/* Address */
-  _Elf64_Mips_R_Info_union r_info;	/* Relocation type and symbol index */
-} Elf64_Mips_Rel;
-
-typedef struct
-{
-  Elf64_Addr	r_offset;		/* Address */
-  _Elf64_Mips_R_Info_union r_info;	/* Relocation type and symbol index */
-  Elf64_Sxword	r_addend;		/* Addend */
-} Elf64_Mips_Rela;
-
-#define ELF64_MIPS_R_SYM(i) \
-  ((__extension__ (_Elf64_Mips_R_Info_union)(i)).r_info_fields.r_sym)
-#define ELF64_MIPS_R_TYPE(i) \
-  (((_Elf64_Mips_R_Info_union)(i)).r_info_fields.r_type1 \
-   | ((Elf32_Word)(__extension__ (_Elf64_Mips_R_Info_union)(i) \
-		   ).r_info_fields.r_type2 << 8) \
-   | ((Elf32_Word)(__extension__ (_Elf64_Mips_R_Info_union)(i) \
-		   ).r_info_fields.r_type3 << 16) \
-   | ((Elf32_Word)(__extension__ (_Elf64_Mips_R_Info_union)(i) \
-		   ).r_info_fields.r_ssym << 24))
-#define ELF64_MIPS_R_INFO(sym, type) \
-  (__extension__ (_Elf64_Mips_R_Info_union) \
-   (__extension__ (_Elf64_Mips_R_Info) \
-   { (sym), ELF64_MIPS_R_SSYM (type), \
-       ELF64_MIPS_R_TYPE3 (type), \
-       ELF64_MIPS_R_TYPE2 (type), \
-       ELF64_MIPS_R_TYPE1 (type) \
-   }).r_info_number)
-/* These macros decompose the value returned by ELF64_MIPS_R_TYPE, and
-   compose it back into a value that it can be used as an argument to
-   ELF64_MIPS_R_INFO.  */
-#define ELF64_MIPS_R_SSYM(i) (((i) >> 24) & 0xff)
-#define ELF64_MIPS_R_TYPE3(i) (((i) >> 16) & 0xff)
-#define ELF64_MIPS_R_TYPE2(i) (((i) >> 8) & 0xff)
-#define ELF64_MIPS_R_TYPE1(i) ((i) & 0xff)
-#define ELF64_MIPS_R_TYPEENC(type1, type2, type3, ssym) \
-  ((type1) \
-   | ((Elf32_Word)(type2) << 8) \
-   | ((Elf32_Word)(type3) << 16) \
-   | ((Elf32_Word)(ssym) << 24))
-
-#undef ELF64_R_SYM
-#define ELF64_R_SYM(i) ELF64_MIPS_R_SYM (i)
-#undef ELF64_R_TYPE
-#define ELF64_R_TYPE(i) ELF64_MIPS_R_TYPE (i)
-#undef ELF64_R_INFO
-#define ELF64_R_INFO(sym, type) ELF64_MIPS_R_INFO ((sym), (type))
-
-#endif
diff -Naur glibc-ports-2.5/sysdeps/mips/ldsodefs.h glibc-ports-2.5-cs/sysdeps/mips/ldsodefs.h
--- glibc-ports-2.5/sysdeps/mips/ldsodefs.h	2006-05-08 21:19:56.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/mips/ldsodefs.h	2007-03-27 15:02:20.000000000 +0200
@@ -1,5 +1,5 @@
 /* Run-time dynamic linker data structures for loaded ELF shared objects.
-   Copyright (C) 2006 Free Software Foundation, Inc.
+   Copyright (C) 2000, 2002, 2003, 2006, 2007 Free Software Foundation, Inc.
    This file is part of the GNU C Library.
 
    The GNU C Library is free software; you can redistribute it and/or
@@ -17,7 +17,7 @@
    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
    02111-1307 USA.  */
 
-#ifndef __LDSODEFS_H \
+#ifndef _MIPS_LDSODEFS_H
 #define _MIPS_LDSODEFS_H 1
 
 #include <elf.h>
@@ -61,6 +61,90 @@
 					  struct La_mips_64_retval *,	    \
 					  const char *);
 
+/* The MIPS ABI specifies that the dynamic section has to be read-only.  */
+
+#define DL_RO_DYN_SECTION 1
+
 #include_next <ldsodefs.h>
 
+/* The 64-bit MIPS ELF ABI uses an unusual reloc format.  Each
+   relocation entry specifies up to three actual relocations, all at
+   the same address.  The first relocation which required a symbol
+   uses the symbol in the r_sym field.  The second relocation which
+   requires a symbol uses the symbol in the r_ssym field.  If all
+   three relocations require a symbol, the third one uses a zero
+   value.
+
+   We define these structures in internal headers because we're not
+   sure we want to make them part of the ABI yet.  Eventually, some of
+   this may move into elf/elf.h.  */
+
+/* An entry in a 64 bit SHT_REL section.  */
+
+typedef struct
+{
+  Elf32_Word    r_sym;		/* Symbol index */
+  unsigned char r_ssym;		/* Special symbol for 2nd relocation */
+  unsigned char r_type3;	/* 3rd relocation type */
+  unsigned char r_type2;	/* 2nd relocation type */
+  unsigned char r_type1;	/* 1st relocation type */
+} _Elf64_Mips_R_Info;
+
+typedef union
+{
+  Elf64_Xword	r_info_number;
+  _Elf64_Mips_R_Info r_info_fields;
+} _Elf64_Mips_R_Info_union;
+
+typedef struct
+{
+  Elf64_Addr	r_offset;		/* Address */
+  _Elf64_Mips_R_Info_union r_info;	/* Relocation type and symbol index */
+} Elf64_Mips_Rel;
+
+typedef struct
+{
+  Elf64_Addr	r_offset;		/* Address */
+  _Elf64_Mips_R_Info_union r_info;	/* Relocation type and symbol index */
+  Elf64_Sxword	r_addend;		/* Addend */
+} Elf64_Mips_Rela;
+
+#define ELF64_MIPS_R_SYM(i) \
+  ((__extension__ (_Elf64_Mips_R_Info_union)(i)).r_info_fields.r_sym)
+#define ELF64_MIPS_R_TYPE(i) \
+  (((_Elf64_Mips_R_Info_union)(i)).r_info_fields.r_type1 \
+   | ((Elf32_Word)(__extension__ (_Elf64_Mips_R_Info_union)(i) \
+		   ).r_info_fields.r_type2 << 8) \
+   | ((Elf32_Word)(__extension__ (_Elf64_Mips_R_Info_union)(i) \
+		   ).r_info_fields.r_type3 << 16) \
+   | ((Elf32_Word)(__extension__ (_Elf64_Mips_R_Info_union)(i) \
+		   ).r_info_fields.r_ssym << 24))
+#define ELF64_MIPS_R_INFO(sym, type) \
+  (__extension__ (_Elf64_Mips_R_Info_union) \
+   (__extension__ (_Elf64_Mips_R_Info) \
+   { (sym), ELF64_MIPS_R_SSYM (type), \
+       ELF64_MIPS_R_TYPE3 (type), \
+       ELF64_MIPS_R_TYPE2 (type), \
+       ELF64_MIPS_R_TYPE1 (type) \
+   }).r_info_number)
+/* These macros decompose the value returned by ELF64_MIPS_R_TYPE, and
+   compose it back into a value that it can be used as an argument to
+   ELF64_MIPS_R_INFO.  */
+#define ELF64_MIPS_R_SSYM(i) (((i) >> 24) & 0xff)
+#define ELF64_MIPS_R_TYPE3(i) (((i) >> 16) & 0xff)
+#define ELF64_MIPS_R_TYPE2(i) (((i) >> 8) & 0xff)
+#define ELF64_MIPS_R_TYPE1(i) ((i) & 0xff)
+#define ELF64_MIPS_R_TYPEENC(type1, type2, type3, ssym) \
+  ((type1) \
+   | ((Elf32_Word)(type2) << 8) \
+   | ((Elf32_Word)(type3) << 16) \
+   | ((Elf32_Word)(ssym) << 24))
+
+#undef ELF64_R_SYM
+#define ELF64_R_SYM(i) ELF64_MIPS_R_SYM (i)
+#undef ELF64_R_TYPE
+#define ELF64_R_TYPE(i) ELF64_MIPS_R_TYPE (i)
+#undef ELF64_R_INFO
+#define ELF64_R_INFO(sym, type) ELF64_MIPS_R_INFO ((sym), (type))
+
 #endif
diff -Naur glibc-ports-2.5/sysdeps/mips/mips32/Makefile glibc-ports-2.5-cs/sysdeps/mips/mips32/Makefile
--- glibc-ports-2.5/sysdeps/mips/mips32/Makefile	2008-03-08 09:51:30.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/mips/mips32/Makefile	2007-03-27 15:02:12.000000000 +0200
@@ -1,7 +1,3 @@
-ifeq ($(filter -DBOOTSTRAP_GCC,$(CFLAGS)),)
 ifeq ($(filter -mabi=32,$(CC)),)
 CC += -mabi=32
 endif
-else
-CC += -D"_MIPS_SZPTR=32"
-endif
diff -Naur glibc-ports-2.5/sysdeps/mips/mips64/n32/Implies glibc-ports-2.5-cs/sysdeps/mips/mips64/n32/Implies
--- glibc-ports-2.5/sysdeps/mips/mips64/n32/Implies	2003-09-09 22:10:22.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/mips/mips64/n32/Implies	2007-03-27 15:02:06.000000000 +0200
@@ -1,4 +1,5 @@
 ieee754/ldbl-128
+mips/mips64/soft-fp
 mips/mips64
 mips
 wordsize-32
diff -Naur glibc-ports-2.5/sysdeps/mips/mips64/n64/Implies glibc-ports-2.5-cs/sysdeps/mips/mips64/n64/Implies
--- glibc-ports-2.5/sysdeps/mips/mips64/n64/Implies	2003-09-09 22:10:22.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/mips/mips64/n64/Implies	2007-03-27 15:02:06.000000000 +0200
@@ -1,4 +1,5 @@
 ieee754/ldbl-128
+mips/mips64/soft-fp
 mips/mips64
 mips
 wordsize-64
diff -Naur glibc-ports-2.5/sysdeps/mips/mips64/soft-fp/e_sqrtl.c glibc-ports-2.5-cs/sysdeps/mips/mips64/soft-fp/e_sqrtl.c
--- glibc-ports-2.5/sysdeps/mips/mips64/soft-fp/e_sqrtl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/mips/mips64/soft-fp/e_sqrtl.c	2007-03-27 15:02:08.000000000 +0200
@@ -0,0 +1,39 @@
+/* long double square root in software floating-point emulation.
+   Copyright (C) 1997, 1999, 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Richard Henderson (rth@cygnus.com) and
+		  Jakub Jelinek (jj@ultra.linux.cz).
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <stdlib.h>
+#include <soft-fp.h>
+#include <quad.h>
+
+long double
+__ieee754_sqrtl (const long double a)
+{
+  FP_DECL_EX;
+  FP_DECL_Q(A); FP_DECL_Q(C);
+  long double c;
+
+  FP_INIT_ROUNDMODE;
+  FP_UNPACK_Q(A, a);
+  FP_SQRT_Q(C, A);
+  FP_PACK_Q(c, C);
+  FP_HANDLE_EXCEPTIONS;
+  return c;
+}
diff -Naur glibc-ports-2.5/sysdeps/mips/mips64/soft-fp/Makefile glibc-ports-2.5-cs/sysdeps/mips/mips64/soft-fp/Makefile
--- glibc-ports-2.5/sysdeps/mips/mips64/soft-fp/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/mips/mips64/soft-fp/Makefile	2007-03-27 15:02:08.000000000 +0200
@@ -0,0 +1,3 @@
+ifeq ($(subdir),math)
+CPPFLAGS += -I../soft-fp
+endif
diff -Naur glibc-ports-2.5/sysdeps/mips/mips64/soft-fp/sfp-machine.h glibc-ports-2.5-cs/sysdeps/mips/mips64/soft-fp/sfp-machine.h
--- glibc-ports-2.5/sysdeps/mips/mips64/soft-fp/sfp-machine.h	2003-03-17 16:47:12.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/mips/mips64/soft-fp/sfp-machine.h	2007-03-27 15:02:07.000000000 +0200
@@ -1,3 +1,6 @@
+#include <fenv.h>
+#include <fpu_control.h>
+
 #define _FP_W_TYPE_SIZE		64
 #define _FP_W_TYPE		unsigned long long
 #define _FP_WS_TYPE		signed long long
@@ -40,8 +43,32 @@
     R##_c = FP_CLS_NAN;						\
   } while (0)
 
-#define FP_EX_INVALID           (1 << 4)
-#define FP_EX_DIVZERO           (1 << 3)
-#define FP_EX_OVERFLOW          (1 << 2)
-#define FP_EX_UNDERFLOW         (1 << 1)
-#define FP_EX_INEXACT           (1 << 0)
+#define _FP_DECL_EX		fpu_control_t _fcw
+
+#define FP_ROUNDMODE		(_fcw & 0x3)
+
+#define FP_RND_NEAREST		FE_TONEAREST
+#define FP_RND_ZERO		FE_TOWARDZERO
+#define FP_RND_PINF		FE_UPWARD
+#define FP_RND_MINF		FE_DOWNWARD
+
+#define FP_EX_INVALID		FE_INVALID
+#define FP_EX_OVERFLOW		FE_OVERFLOW
+#define FP_EX_UNDERFLOW		FE_UNDERFLOW
+#define FP_EX_DIVZERO		FE_DIVBYZERO
+#define FP_EX_INEXACT		FE_INEXACT
+
+#ifdef __mips_hard_float
+#define FP_INIT_ROUNDMODE			\
+do {						\
+  _FPU_GETCW (_fcw);				\
+} while (0)
+
+#define FP_HANDLE_EXCEPTIONS			\
+do {						\
+  if (__builtin_expect (_fex, 0))		\
+    _FPU_SETCW (_fcw | _fex | (_fex << 10));	\
+} while (0)
+#else
+#define FP_INIT_ROUNDMODE	_fcw = FP_RND_NEAREST
+#endif
diff -Naur glibc-ports-2.5/sysdeps/powerpc/nofpu/fenv_libc.h glibc-ports-2.5-cs/sysdeps/powerpc/nofpu/fenv_libc.h
--- glibc-ports-2.5/sysdeps/powerpc/nofpu/fenv_libc.h	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/nofpu/fenv_libc.h	2007-03-27 14:58:37.000000000 +0200
@@ -0,0 +1,29 @@
+/* Internal libc stuff for floating point environment routines.
+   Copyright (C) 2007 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#ifndef _FENV_LIBC_H
+#define _FENV_LIBC_H	1
+
+/* fenv_libc.h is used in libm implementations of ldbl-128ibm.  So we
+   need this version in the soft-fp to at minimum include fenv.h to
+   get the fegetround definition.  */
+
+#include <fenv.h>
+ 
+#endif /* fenv_libc.h */
diff -Naur glibc-ports-2.5/sysdeps/powerpc/nofpu/fesetenv.c glibc-ports-2.5-cs/sysdeps/powerpc/nofpu/fesetenv.c
--- glibc-ports-2.5/sysdeps/powerpc/nofpu/fesetenv.c	2002-10-19 22:06:29.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/powerpc/nofpu/fesetenv.c	2007-03-27 14:58:37.000000000 +0200
@@ -1,5 +1,5 @@
 /* Set floating point environment (soft-float edition).
-   Copyright (C) 2002 Free Software Foundation, Inc.
+   Copyright (C) 2002, 2007 Free Software Foundation, Inc.
    Contributed by Aldy Hernandez <aldyh@redhat.com>, 2002.
    This file is part of the GNU C Library.
 
@@ -22,10 +22,6 @@
 #include "soft-supp.h"
 #include <bp-sym.h>
 
-extern int __sim_exceptions attribute_hidden;
-extern int __sim_disabled_exceptions attribute_hidden;
-extern int __sim_round_mode attribute_hidden;
-
 int
 __fesetenv (const fenv_t *envp)
 {
diff -Naur glibc-ports-2.5/sysdeps/powerpc/nofpu/libm-test-ulps glibc-ports-2.5-cs/sysdeps/powerpc/nofpu/libm-test-ulps
--- glibc-ports-2.5/sysdeps/powerpc/nofpu/libm-test-ulps	2003-03-23 01:52:10.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/nofpu/libm-test-ulps	2007-03-27 14:58:36.000000000 +0200
@@ -1,5 +1,15 @@
 # Begin of automatic generation
 
+# acos
+Test "acos (2e-17) == 1.57079632679489659923132169163975144":
+ildouble: 1
+ldouble: 1
+
+# asin
+Test "asin (0.75) == 0.848062078981481008052944338998418080":
+ildouble: 2
+ldouble: 2
+
 # atan2
 Test "atan2 (-0.75, -1.0) == -2.49809154479650885165983415456218025":
 float: 3
@@ -10,23 +20,33 @@
 Test "atan2 (1.390625, 0.9296875) == 0.981498387184244311516296577615519772":
 float: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
+Test "atan2 (-0.00756827042671106339, -.001792735857538728036) == -1.80338464113663849327153994379639112":
+ildouble: 1
+ldouble: 1
 
 # atanh
 Test "atanh (0.75) == 0.972955074527656652552676371721589865":
 float: 1
 ifloat: 1
 
+# cabs
+Test "cabs (0.75 + 1.25 i) == 1.45773797371132511771853821938639577":
+ildouble: 1
+ldouble: 1
+
 # cacosh
-Test "Real part of: cacosh (-2 - 3 i) == -1.9833870299165354323470769028940395 + 2.1414491111159960199416055713254211 i":
+Test "Real part of: cacosh (-2 - 3 i) == 1.9833870299165354323470769028940395 - 2.1414491111159960199416055713254211 i":
 double: 1
-float: 7
+float: 1
 idouble: 1
-ifloat: 7
-Test "Imaginary part of: cacosh (-2 - 3 i) == -1.9833870299165354323470769028940395 + 2.1414491111159960199416055713254211 i":
+ifloat: 1
+Test "Imaginary part of: cacosh (-2 - 3 i) == 1.9833870299165354323470769028940395 - 2.1414491111159960199416055713254211 i":
 double: 1
-float: 3
+float: 1
 idouble: 1
-ifloat: 3
+ifloat: 1
 
 # casin
 Test "Real part of: casin (0.75 + 1.25 i) == 0.453276177638793913448921196101971749 + 1.13239363160530819522266333696834467 i":
@@ -34,6 +54,11 @@
 float: 1
 idouble: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
+Test "Real part of: casin (-2 - 3 i) == -0.57065278432109940071028387968566963 - 1.9833870299165354323470769028940395 i":
+ildouble: 1
+ldouble: 1
 
 # casinh
 Test "Real part of: casinh (-2 - 3 i) == -1.9686379257930962917886650952454982 - 0.96465850440760279204541105949953237 i":
@@ -41,11 +66,15 @@
 float: 1
 idouble: 5
 ifloat: 1
+ildouble: 4
+ldouble: 4
 Test "Imaginary part of: casinh (-2 - 3 i) == -1.9686379257930962917886650952454982 - 0.96465850440760279204541105949953237 i":
 double: 3
 float: 6
 idouble: 3
 ifloat: 6
+ildouble: 1
+ldouble: 1
 Test "Real part of: casinh (0.75 + 1.25 i) == 1.03171853444778027336364058631006594 + 0.911738290968487636358489564316731207 i":
 float: 1
 ifloat: 1
@@ -59,11 +88,15 @@
 Test "Real part of: catan (-2 - 3 i) == -1.4099210495965755225306193844604208 - 0.22907268296853876629588180294200276 i":
 float: 3
 ifloat: 3
+ildouble: 1
+ldouble: 1
 Test "Imaginary part of: catan (-2 - 3 i) == -1.4099210495965755225306193844604208 - 0.22907268296853876629588180294200276 i":
 double: 1
 float: 1
 idouble: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
 Test "Real part of: catan (0.75 + 1.25 i) == 1.10714871779409050301706546017853704 + 0.549306144334054845697622618461262852 i":
 float: 4
 ifloat: 4
@@ -118,77 +151,132 @@
 float: 1
 idouble: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
 Test "Imaginary part of: ccosh (0.75 + 1.25 i) == 0.408242591877968807788852146397499084 + 0.780365930845853240391326216300863152 i":
 float: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
+ildouble: 2
+ldouble: 2
 
 # cexp
 Test "Imaginary part of: cexp (-2.0 - 3.0 i) == -0.13398091492954261346140525546115575 - 0.019098516261135196432576240858800925 i":
 float: 1
 ifloat: 1
+Test "Imaginary part of: cexp (0.75 + 1.25 i) == 0.667537446429131586942201977015932112 + 2.00900045494094876258347228145863909 i":
+ildouble: 1
+ldouble: 1
 Test "Real part of: cexp (0.75 + 1.25 i) == 0.667537446429131586942201977015932112 + 2.00900045494094876258347228145863909 i":
 float: 1
 ifloat: 1
+ildouble: 2
+ldouble: 2
 
 # clog
 Test "Imaginary part of: clog (-2 - 3 i) == 1.2824746787307683680267437207826593 - 2.1587989303424641704769327722648368 i":
 float: 3
 ifloat: 3
+ildouble: 1
+ldouble: 1
 Test "Real part of: clog (0.75 + 1.25 i) == 0.376885901188190075998919126749298416 + 1.03037682652431246378774332703115153 i":
 float: 1
 ifloat: 1
+ildouble: 2
+ldouble: 2
+Test "Imaginary part of: clog (0.75 + 1.25 i) == 0.376885901188190075998919126749298416 + 1.03037682652431246378774332703115153 i":
+ildouble: 1
+ldouble: 1
 
 # clog10
 Test "Imaginary part of: clog10 (-0 + inf i) == inf + pi/2*log10(e) i":
 float: 1
 ifloat: 1
+double: 1
+idouble: 1
 Test "Imaginary part of: clog10 (-0 - inf i) == inf - pi/2*log10(e) i":
 float: 1
 ifloat: 1
+double: 1
+idouble: 1
 Test "Imaginary part of: clog10 (-2 - 3 i) == 0.556971676153418384603252578971164214 - 0.937554462986374708541507952140189646 i":
 double: 1
 float: 5
 idouble: 1
 ifloat: 5
+ildouble: 1
+ldouble: 1
 Test "Imaginary part of: clog10 (-3 + inf i) == inf + pi/2*log10(e) i":
 float: 1
 ifloat: 1
+double: 1
+idouble: 1
+ildouble: 1
+ldouble: 1
 Test "Imaginary part of: clog10 (-3 - inf i) == inf - pi/2*log10(e) i":
 float: 1
 ifloat: 1
+double: 1
+idouble: 1
 Test "Imaginary part of: clog10 (-inf + 0 i) == inf + pi*log10(e) i":
 float: 1
 ifloat: 1
+double: 1
+idouble: 1
 Test "Imaginary part of: clog10 (-inf + 1 i) == inf + pi*log10(e) i":
 float: 1
 ifloat: 1
+double: 1
+idouble: 1
 Test "Imaginary part of: clog10 (-inf - 0 i) == inf - pi*log10(e) i":
 float: 1
 ifloat: 1
+double: 1
+idouble: 1
 Test "Imaginary part of: clog10 (-inf - 1 i) == inf - pi*log10(e) i":
 float: 1
 ifloat: 1
+double: 1
+idouble: 1
 Test "Imaginary part of: clog10 (0 + inf i) == inf + pi/2*log10(e) i":
 float: 1
 ifloat: 1
+double: 1
+idouble: 1
 Test "Imaginary part of: clog10 (0 - inf i) == inf - pi/2*log10(e) i":
 float: 1
 ifloat: 1
+double: 1
+idouble: 1
 Test "Real part of: clog10 (0.75 + 1.25 i) == 0.163679467193165171449476605077428975 + 0.447486970040493067069984724340855636 i":
 float: 1
 ifloat: 1
+ildouble: 3
+ldouble: 3
 Test "Imaginary part of: clog10 (3 + inf i) == inf + pi/2*log10(e) i":
 float: 1
 ifloat: 1
+double: 1
+idouble: 1
 Test "Imaginary part of: clog10 (3 - inf i) == inf - pi/2*log10(e) i":
 float: 1
 ifloat: 1
+double: 1
+idouble: 1
 Test "Imaginary part of: clog10 (inf + inf i) == inf + pi/4*log10(e) i":
 float: 1
 ifloat: 1
+double: 1
+idouble: 1
 Test "Imaginary part of: clog10 (inf - inf i) == inf - pi/4*log10(e) i":
 float: 1
 ifloat: 1
+double: 1
+idouble: 1
+Test "Imaginary part of: clog10 (-inf + inf i) == inf + 3/4 pi*log10(e) i":
+double: 1
+idouble: 1
 
 # cos
 Test "cos (M_PI_6l * 2.0) == 0.5":
@@ -211,19 +299,34 @@
 Test "Real part of: cpow (0.75 + 1.25 i, 0.0 + 1.0 i) == 0.331825439177608832276067945276730566 + 0.131338600281188544930936345230903032 i":
 float: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
 Test "Imaginary part of: cpow (0.75 + 1.25 i, 0.0 + 1.0 i) == 0.331825439177608832276067945276730566 + 0.131338600281188544930936345230903032 i":
 float: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
 Test "Real part of: cpow (0.75 + 1.25 i, 0.75 + 1.25 i) == 0.117506293914473555420279832210420483 + 0.346552747708338676483025352060418001 i":
 double: 1
 float: 4
 idouble: 1
 ifloat: 4
+Test "Imaginary part of: cpow (0.75 + 1.25 i, 0.75 + 1.25 i) == 0.117506293914473555420279832210420483 + 0.346552747708338676483025352060418001 i":
+ildouble: 1
+ldouble: 1
+Test "Real part of: cpow (0.75 + 1.25 i, 1.0 + 0.0 i) == 0.75 + 1.25 i":
+ildouble: 2
+ldouble: 2
 Test "Real part of: cpow (0.75 + 1.25 i, 1.0 + 1.0 i) == 0.0846958290317209430433805274189191353 + 0.513285749182902449043287190519090481 i":
 double: 2
 float: 3
 idouble: 2
 ifloat: 3
+ildouble: 1
+ldouble: 1
+Test "Real part of: cpow (2 + 0 i, 10 + 0 i) == 1024.0 + 0.0 i":
+ildouble: 1
+ldouble: 1
 Test "Real part of: cpow (2 + 3 i, 4 + 0 i) == -119.0 - 120.0 i":
 double: 1
 float: 4
@@ -232,22 +335,32 @@
 Test "Imaginary part of: cpow (2 + 3 i, 4 + 0 i) == -119.0 - 120.0 i":
 float: 2
 ifloat: 2
+ildouble: 2
+ldouble: 2
 Test "Imaginary part of: cpow (e + 0 i, 0 + 2 * M_PIl i) == 1.0 + 0.0 i":
 double: 2
 float: 2
 idouble: 2
 ifloat: 2
+ildouble: 2
+ldouble: 2
 
 # csinh
 Test "Imaginary part of: csinh (-2 - 3 i) == 3.59056458998577995201256544779481679 - 0.530921086248519805267040090660676560 i":
 double: 1
 idouble: 1
+ldouble: 1
+ildouble: 1
 Test "Real part of: csinh (0.75 + 1.25 i) == 0.259294854551162779153349830618433028 + 1.22863452409509552219214606515777594 i":
 float: 1
 ifloat: 1
+ldouble: 1
+ildouble: 1
 Test "Imaginary part of: csinh (0.75 + 1.25 i) == 0.259294854551162779153349830618433028 + 1.22863452409509552219214606515777594 i":
 float: 1
 ifloat: 1
+ldouble: 1
+ildouble: 1
 
 # csqrt
 Test "Real part of: csqrt (-2 + 3 i) == 0.89597747612983812471573375529004348 + 1.6741492280355400404480393008490519 i":
@@ -261,6 +374,9 @@
 Test "Real part of: ctan (-2 - 3 i) == 0.376402564150424829275122113032269084e-2 - 1.00323862735360980144635859782192726 i":
 double: 1
 idouble: 1
+Test "Imaginary part of: ctan (-2 - 3 i) == 0.376402564150424829275122113032269084e-2 - 1.00323862735360980144635859782192726 i":
+ildouble: 1
+ldouble: 1
 Test "Imaginary part of: ctan (0.75 + 1.25 i) == 0.160807785916206426725166058173438663 + 0.975363285031235646193581759755216379 i":
 double: 1
 idouble: 1
@@ -277,6 +393,8 @@
 Test "Real part of: ctanh (0.75 + 1.25 i) == 1.37260757053378320258048606571226857 + 0.385795952609750664177596760720790220 i":
 double: 1
 idouble: 1
+ildouble: 1
+ldouble: 1
 
 # erf
 Test "erf (1.25) == 0.922900128256458230136523481197281140":
@@ -291,22 +409,41 @@
 double: 1
 idouble: 1
 
+# exp
+Test "exp (0.75) == 2.11700001661267466854536981983709561":
+ildouble: 1
+ldouble: 1
+Test "exp (50.0) == 5184705528587072464087.45332293348538":
+ildouble: 1
+ldouble: 1
+
 # exp10
 Test "exp10 (-1) == 0.1":
 double: 2
 float: 1
 idouble: 2
 ifloat: 1
+ildouble: 1
+ldouble: 1
 Test "exp10 (0.75) == 5.62341325190349080394951039776481231":
 double: 1
 float: 1
 idouble: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
 Test "exp10 (3) == 1000":
 double: 6
 float: 2
 idouble: 6
 ifloat: 2
+ildouble: 8
+ldouble: 8
+
+# exp2
+Test "exp2 (10) == 1024":
+ildouble: 2
+ldouble: 2
 
 # expm1
 Test "expm1 (0.75) == 1.11700001661267466854536981983709561":
@@ -315,6 +452,8 @@
 Test "expm1 (1) == M_El - 1.0":
 float: 1
 ifloat: 1
+double: 1
+idouble: 1
 
 # hypot
 Test "hypot (-0.7, -12.4) == 12.419742348374220601176836866763271":
@@ -341,6 +480,9 @@
 Test "hypot (12.4, 0.7) == 12.419742348374220601176836866763271":
 float: 1
 ifloat: 1
+Test "hypot (0.75, 1.25) == 1.45773797371132511771853821938639577":
+ildouble: 1
+ldouble: 1
 
 # j0
 Test "j0 (-4.0) == -3.9714980986384737228659076845169804197562E-1":
@@ -348,6 +490,8 @@
 float: 1
 idouble: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
 Test "j0 (0.75) == 0.864242275166648623555731103820923211":
 float: 1
 ifloat: 1
@@ -364,6 +508,8 @@
 float: 1
 idouble: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
 Test "j0 (8.0) == 0.171650807137553906090869407851972001":
 float: 1
 ifloat: 1
@@ -372,12 +518,16 @@
 Test "j1 (10.0) == 0.0434727461688614366697487680258592883":
 float: 2
 ifloat: 2
+ildouble: 1
+ldouble: 1
 Test "j1 (2.0) == 0.576724807756873387202448242269137087":
 double: 1
 idouble: 1
 Test "j1 (8.0) == 0.234636346853914624381276651590454612":
 double: 1
 idouble: 1
+ildouble: 1
+ldouble: 1
 
 # jn
 Test "jn (0, -4.0) == -3.9714980986384737228659076845169804197562E-1":
@@ -385,6 +535,8 @@
 float: 1
 idouble: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
 Test "jn (0, 0.75) == 0.864242275166648623555731103820923211":
 float: 1
 ifloat: 1
@@ -393,6 +545,8 @@
 float: 1
 idouble: 2
 ifloat: 1
+ildouble: 1
+ldouble: 1
 Test "jn (0, 2.0) == 0.223890779141235668051827454649948626":
 float: 2
 ifloat: 2
@@ -401,36 +555,57 @@
 float: 1
 idouble: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
 Test "jn (0, 8.0) == 0.171650807137553906090869407851972001":
 float: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
 Test "jn (1, 10.0) == 0.0434727461688614366697487680258592883":
 float: 2
 ifloat: 2
+ildouble: 1
+ldouble: 1
 Test "jn (1, 2.0) == 0.576724807756873387202448242269137087":
 double: 1
 idouble: 1
 Test "jn (1, 8.0) == 0.234636346853914624381276651590454612":
 double: 1
 idouble: 1
+ildouble: 1
+ldouble: 1
+Test "jn (10, -1.0) == 0.263061512368745320699785368779050294e-9":
+ildouble: 1
+ldouble: 1
 Test "jn (10, 0.125) == 0.250543369809369890173993791865771547e-18":
 double: 1
 float: 1
 idouble: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
 Test "jn (10, 0.75) == 0.149621713117596814698712483621682835e-10":
 double: 1
 float: 1
 idouble: 1
 ifloat: 1
+Test "jn (10, 1.0) == 0.263061512368745320699785368779050294e-9":
+ildouble: 1
+ldouble: 1
 Test "jn (10, 10.0) == 0.207486106633358857697278723518753428":
 double: 4
 float: 3
 idouble: 4
 ifloat: 3
+ildouble: 4
+ldouble: 4
 Test "jn (10, 2.0) == 0.251538628271673670963516093751820639e-6":
 float: 4
 ifloat: 4
+Test "jn (3, -1.0) == -0.0195633539826684059189053216217515083":
+ildouble: 1
+ldouble: 1
 Test "jn (3, 0.125) == 0.406503832554912875023029337653442868e-4":
 double: 1
 float: 1
@@ -441,16 +616,23 @@
 float: 1
 idouble: 1
 ifloat: 1
+Test "jn (3, 1.0) == 0.0195633539826684059189053216217515083":
+ildouble: 1
+ldouble: 1
 Test "jn (3, 10.0) == 0.0583793793051868123429354784103409563":
 double: 3
 float: 1
 idouble: 3
 ifloat: 1
+ildouble: 2
+ldouble: 2
 Test "jn (3, 2.0) == 0.128943249474402051098793332969239835":
 double: 1
 float: 2
 idouble: 1
 ifloat: 2
+ildouble: 2
+ldouble: 2
 
 # lgamma
 Test "lgamma (0.7) == 0.260867246531666514385732417016759578":
@@ -463,6 +645,8 @@
 float: 2
 idouble: 1
 ifloat: 2
+ildouble: 3
+ldouble: 3
 
 # log10
 Test "log10 (0.75) == -0.124938736608299953132449886193870744":
@@ -474,6 +658,11 @@
 float: 1
 ifloat: 1
 
+# log2
+Test "log2 (e) == M_LOG2El":
+ldouble: 1
+ildouble: 1
+
 # log1p
 Test "log1p (-0.25) == -0.287682072451780927439219005993827432":
 float: 1
@@ -499,10 +688,25 @@
 float: 1
 ifloat: 1
 
+# sinh
+Test "sinh (0.75) == 0.822316731935829980703661634446913849":
+ildouble: 1
+ldouble: 1
+
 # tan
 Test "tan (pi/4) == 1":
 double: 1
 idouble: 1
+ldouble: 1
+ildouble: 1
+
+# tanh
+Test "tanh (-0.75) == -0.635148952387287319214434357312496495":
+ildouble: 1
+ldouble: 1
+Test "tanh (0.75) == 0.635148952387287319214434357312496495":
+ildouble: 1
+ldouble: 1
 
 # tgamma
 Test "tgamma (-0.5) == -2 sqrt (pi)":
@@ -520,11 +724,19 @@
 ifloat: 1
 
 # y0
+Test "y0 (0.125) == -1.38968062514384052915582277745018693":
+ildouble: 1
+ldouble: 1
+Test "y0 (0.75) == -0.137172769385772397522814379396581855":
+ildouble: 1
+ldouble: 1
 Test "y0 (1.0) == 0.0882569642156769579829267660235151628":
 double: 2
 float: 1
 idouble: 2
 ifloat: 1
+ildouble: 1
+ldouble: 1
 Test "y0 (1.5) == 0.382448923797758843955068554978089862":
 double: 2
 float: 1
@@ -533,11 +745,18 @@
 Test "y0 (10.0) == 0.0556711672835993914244598774101900481":
 float: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
+Test "y0 (2.0) == 0.510375672649745119596606592727157873":
+double: 1
+idouble: 1
 Test "y0 (8.0) == 0.223521489387566220527323400498620359":
 double: 1
 float: 1
 idouble: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
 
 # y1
 Test "y1 (0.125) == -5.19993611253477499595928744876579921":
@@ -551,23 +770,37 @@
 float: 1
 idouble: 3
 ifloat: 1
+ildouble: 2
+ldouble: 2
 Test "y1 (2.0) == -0.107032431540937546888370772277476637":
 double: 1
 float: 1
 idouble: 1
 ifloat: 1
+ildouble: 2
+ldouble: 2
 Test "y1 (8.0) == -0.158060461731247494255555266187483550":
 double: 1
 float: 2
 idouble: 1
 ifloat: 2
+ildouble: 2
+ldouble: 2
 
 # yn
+Test "yn (0, 0.125) == -1.38968062514384052915582277745018693":
+ildouble: 1
+ldouble: 1
+Test "yn (0, 0.75) == -0.137172769385772397522814379396581855":
+ildouble: 1
+ldouble: 1
 Test "yn (0, 1.0) == 0.0882569642156769579829267660235151628":
 double: 2
 float: 1
 idouble: 2
 ifloat: 1
+ildouble: 2
+ldouble: 2
 Test "yn (0, 1.5) == 0.382448923797758843955068554978089862":
 double: 2
 float: 1
@@ -576,11 +809,15 @@
 Test "yn (0, 10.0) == 0.0556711672835993914244598774101900481":
 float: 1
 ifloat: 1
+ildouble: 2
+ldouble: 2
 Test "yn (0, 8.0) == 0.223521489387566220527323400498620359":
 double: 1
 float: 1
 idouble: 1
 ifloat: 1
+ildouble: 2
+ldouble: 2
 Test "yn (1, 0.125) == -5.19993611253477499595928744876579921":
 double: 1
 idouble: 1
@@ -592,16 +829,22 @@
 float: 1
 idouble: 3
 ifloat: 1
+ildouble: 2
+ldouble: 2
 Test "yn (1, 2.0) == -0.107032431540937546888370772277476637":
 double: 1
 float: 1
 idouble: 1
 ifloat: 1
+ildouble: 2
+ldouble: 2
 Test "yn (1, 8.0) == -0.158060461731247494255555266187483550":
 double: 1
 float: 2
 idouble: 1
 ifloat: 2
+ildouble: 2
+ldouble: 2
 Test "yn (10, 0.125) == -127057845771019398.252538486899753195":
 double: 1
 idouble: 1
@@ -618,9 +861,13 @@
 float: 1
 idouble: 1
 ifloat: 1
+ildouble: 2
+ldouble: 2
 Test "yn (10, 2.0) == -129184.542208039282635913145923304214":
 double: 2
 idouble: 2
+ildouble: 2
+ldouble: 2
 Test "yn (3, 0.125) == -2612.69757350066712600220955744091741":
 double: 1
 idouble: 1
@@ -634,58 +881,108 @@
 float: 1
 idouble: 1
 ifloat: 1
+ildouble: 2
+ldouble: 2
 Test "yn (3, 2.0) == -1.12778377684042778608158395773179238":
 double: 1
 idouble: 1
 
 # Maximal error of functions:
+Function: "acos":
+ildouble: 1
+ldouble: 1
+
+Function: "acosh":
+ildouble: 1
+ldouble: 1
+
+Function: "asin":
+ildouble: 2
+ldouble: 2
+
+Function: "asinh":
+ildouble: 1
+ldouble: 1
+
 Function: "atan2":
 float: 3
 ifloat: 3
+ildouble: 1
+ldouble: 1
 
 Function: "atanh":
 float: 1
 ifloat: 1
 
+Function: "cabs":
+ildouble: 1
+ldouble: 1
+
+Function: Real part of "cacos":
+ildouble: 1
+ldouble: 1
+
+Function: Imaginary part of "cacos":
+ildouble: 1
+ldouble: 1
+
 Function: Real part of "cacosh":
 double: 1
 float: 7
 idouble: 1
 ifloat: 7
+ildouble: 1
+ldouble: 1
 
 Function: Imaginary part of "cacosh":
 double: 1
 float: 3
 idouble: 1
 ifloat: 3
+ildouble: 1
+ldouble: 1
 
 Function: Real part of "casin":
 double: 1
 float: 1
 idouble: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
+
+Function: Imaginary part of "casin":
+ildouble: 1
+ldouble: 1
 
 Function: Real part of "casinh":
 double: 5
 float: 1
 idouble: 5
 ifloat: 1
+ildouble: 4
+ldouble: 4
 
 Function: Imaginary part of "casinh":
 double: 3
 float: 6
 idouble: 3
 ifloat: 6
+ildouble: 1
+ldouble: 1
 
 Function: Real part of "catan":
 float: 4
 ifloat: 4
+ildouble: 1
+ldouble: 1
 
 Function: Imaginary part of "catan":
 double: 1
 float: 1
 idouble: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
 
 Function: Real part of "catanh":
 double: 4
@@ -698,116 +995,188 @@
 Function: "cbrt":
 double: 1
 idouble: 1
+ildouble: 1
+ldouble: 1
 
 Function: Real part of "ccos":
 double: 1
 float: 1
 idouble: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
 
 Function: Imaginary part of "ccos":
 float: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
 
 Function: Real part of "ccosh":
 double: 1
 float: 1
 idouble: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
 
 Function: Imaginary part of "ccosh":
 float: 1
 ifloat: 1
+ildouble: 2
+ldouble: 2
 
 Function: Real part of "cexp":
 float: 1
 ifloat: 1
+ildouble: 2
+ldouble: 2
 
 Function: Imaginary part of "cexp":
 float: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
 
 Function: Real part of "clog":
 float: 1
 ifloat: 1
+ildouble: 2
+ldouble: 2
 
 Function: Imaginary part of "clog":
 float: 3
 ifloat: 3
+ildouble: 1
+ldouble: 1
 
 Function: Real part of "clog10":
 float: 1
 ifloat: 1
+ildouble: 3
+ldouble: 3
 
 Function: Imaginary part of "clog10":
 double: 1
 float: 5
 idouble: 1
 ifloat: 5
+ildouble: 1
+ldouble: 1
 
 Function: "cos":
 double: 2
 float: 1
 idouble: 2
 ifloat: 1
+ildouble: 1
+ldouble: 1
+
+Function: "cosh":
+ildouble: 1
+ldouble: 1
 
 Function: Real part of "cpow":
 double: 2
 float: 4
 idouble: 2
 ifloat: 4
+ildouble: 2
+ldouble: 2
 
 Function: Imaginary part of "cpow":
 double: 2
 float: 2
 idouble: 2
 ifloat: 2
+ildouble: 2
+ldouble: 2
+
+Function: Imaginary part of "cproj":
+ildouble: 1
+ldouble: 1
+
+Function: Real part of "csin":
+ildouble: 1
+ldouble: 1
 
 Function: Real part of "csinh":
 float: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
 
 Function: Imaginary part of "csinh":
 double: 1
 float: 1
 idouble: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
 
 Function: Real part of "csqrt":
 float: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
+
+Function: Imaginary part of "csqrt":
+ildouble: 1
+ldouble: 1
 
 Function: Real part of "ctan":
 double: 1
 idouble: 1
+ildouble: 1
+ldouble: 1
 
 Function: Imaginary part of "ctan":
 double: 1
 idouble: 1
+ildouble: 1
+ldouble: 1
 
 Function: Real part of "ctanh":
 double: 1
 float: 2
 idouble: 1
 ifloat: 2
+ildouble: 1
+ldouble: 1
 
 Function: Imaginary part of "ctanh":
 float: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
 
 Function: "erf":
 double: 1
 idouble: 1
+ildouble: 1
+ldouble: 1
 
 Function: "erfc":
 double: 1
 idouble: 1
+ildouble: 1
+ldouble: 1
+
+Function: "exp":
+ildouble: 1
+ldouble: 1
 
 Function: "exp10":
 double: 6
 float: 2
 idouble: 6
 ifloat: 2
+ildouble: 8
+ldouble: 8
+
+Function: "exp2":
+ildouble: 2
+ldouble: 2
 
 Function: "expm1":
 double: 1
@@ -815,76 +1184,130 @@
 idouble: 1
 ifloat: 1
 
+Function: "gamma":
+ildouble: 1
+ldouble: 1
+
 Function: "hypot":
 float: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
 
 Function: "j0":
 double: 2
 float: 2
 idouble: 2
 ifloat: 2
+ildouble: 1
+ldouble: 1
 
 Function: "j1":
 double: 1
 float: 2
 idouble: 1
 ifloat: 2
+ildouble: 1
+ldouble: 1
 
 Function: "jn":
 double: 4
 float: 4
 idouble: 4
 ifloat: 4
+ildouble: 4
+ldouble: 4
 
 Function: "lgamma":
 double: 1
 float: 2
 idouble: 1
 ifloat: 2
+ildouble: 3
+ldouble: 3
+
+Function: "log":
+ildouble: 1
+ldouble: 1
 
 Function: "log10":
 double: 1
 float: 2
 idouble: 1
 ifloat: 2
+ildouble: 1
+ldouble: 1
 
 Function: "log1p":
 float: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
+
+Function: "log2":
+ildouble: 1
+ldouble: 1
+
+Function: "pow":
+ildouble: 1
+ldouble: 1
+
+Function: "sin":
+ildouble: 1
+ldouble: 1
 
 Function: "sincos":
 double: 1
 float: 1
 idouble: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
+
+Function: "sinh":
+ildouble: 1
+ldouble: 1
 
 Function: "tan":
 double: 1
 idouble: 1
+ildouble: 1
+ldouble: 1
+
+Function: "tanh":
+ildouble: 1
+ldouble: 1
 
 Function: "tgamma":
 double: 1
 float: 1
 idouble: 1
 ifloat: 1
+ildouble: 1
+ldouble: 1
 
 Function: "y0":
 double: 2
 float: 1
 idouble: 2
 ifloat: 1
+ildouble: 2
+ldouble: 2
 
 Function: "y1":
 double: 3
 float: 2
 idouble: 3
 ifloat: 2
+ildouble: 2
+ldouble: 2
 
 Function: "yn":
 double: 3
 float: 2
 idouble: 3
 ifloat: 2
+ildouble: 2
+ldouble: 2
 
 # end of automatic generation
diff -Naur glibc-ports-2.5/sysdeps/powerpc/nofpu/Makefile glibc-ports-2.5-cs/sysdeps/powerpc/nofpu/Makefile
--- glibc-ports-2.5/sysdeps/powerpc/nofpu/Makefile	2006-01-30 23:12:44.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/nofpu/Makefile	2007-03-27 14:58:37.000000000 +0200
@@ -2,9 +2,23 @@
 
 ifeq ($(subdir),soft-fp)
 sysdep_routines += $(gcc-single-routines) $(gcc-double-routines) \
-		   $(gcc-quad-routines) sim-full
+		   sim-full
 endif
 
 ifeq ($(subdir),math)
 libm-support += fenv_const fe_nomask
+CPPFLAGS += -I../soft-fp/
+# The follow CFLAGS are a work around for GCC Bugzilla Bug 29253
+# "expand_abs wrong default code for floating point"
+# As this is not a regression, a fix is not likely to go into
+# gcc-4.1.1 and may be too late for gcc-4.2.  So we need these flags
+# until the fix in a gcc release and glibc drops support for earlier
+# versions of gcc.
+CFLAGS-e_powl.c += -fno-builtin-fabsl
+CFLAGS-s_ccoshl.c += -fno-builtin-fabsl
+CFLAGS-s_csinhl.c += -fno-builtin-fabsl
+CFLAGS-s_clogl.c += -fno-builtin-fabsl
+CFLAGS-s_clog10l.c += -fno-builtin-fabsl
+CFLAGS-s_csinl.c += -fno-builtin-fabsl
+CFLAGS-s_csqrtl.c += -fno-builtin-fabsl
 endif
diff -Naur glibc-ports-2.5/sysdeps/powerpc/nofpu/Versions glibc-ports-2.5-cs/sysdeps/powerpc/nofpu/Versions
--- glibc-ports-2.5/sysdeps/powerpc/nofpu/Versions	2006-01-06 11:50:45.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/nofpu/Versions	2007-03-27 14:58:37.000000000 +0200
@@ -3,16 +3,18 @@
     __sim_exceptions; __sim_disabled_exceptions; __sim_round_mode;
     __adddf3; __addsf3; __divdf3; __divsf3; __eqdf2; __eqsf2;
     __extendsfdf2; __fixdfdi; __fixdfsi; __fixsfdi; __fixsfsi;
-    __fixtfdi; __fixtfsi;
     __fixunsdfdi; __fixunsdfsi; __fixunssfdi; __fixunssfsi;
     __floatdidf; __floatdisf; __floatsidf; __floatsisf;
     __gedf2; __gesf2; __ledf2; __lesf2; __muldf3; __mulsf3;
     __negdf2; __negsf2; __sqrtdf2; __sqrtsf2; __subdf3;
-    __subsf3; __truncdfsf2; __trunctfsf2;
+    __subsf3; __truncdfsf2;
   }
   GLIBC_2.4 {
-    __floatundidf; __floatundisf; __floatunditf;
-    __floatunsidf; __floatunsisf; __floatunsitf;
-    __unorddf2; __unordsf2; __unordtf2;
+    __floatundidf; __floatundisf;
+    __floatunsidf; __floatunsisf;
+    __unorddf2; __unordsf2;
+    __nedf2; __nesf2;
+    __gtdf2; __gtsf2;
+    __ltdf2; __ltsf2;
   }
 }
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/atosfix16.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/atosfix16.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/atosfix16.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/atosfix16.c	2007-03-27 14:58:29.000000000 +0200
@@ -0,0 +1,28 @@
+/* Convert string to 16-bit signed fixed point.
+   Copyright (C) 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Joseph Myers <joseph@codesourcery.com>, 2006.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <stddef.h>
+#include <spe.h>
+
+int16_t
+atosfix16 (const char *str)
+{
+  return strtosfix16 (str, NULL);
+}
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/atosfix32.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/atosfix32.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/atosfix32.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/atosfix32.c	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1,28 @@
+/* Convert string to 32-bit signed fixed point.
+   Copyright (C) 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Joseph Myers <joseph@codesourcery.com>, 2006.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <stddef.h>
+#include <spe.h>
+
+int32_t
+atosfix32 (const char *str)
+{
+  return strtosfix32 (str, NULL);
+}
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/atosfix64.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/atosfix64.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/atosfix64.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/atosfix64.c	2007-03-27 14:58:31.000000000 +0200
@@ -0,0 +1,28 @@
+/* Convert string to 64-bit signed fixed point.
+   Copyright (C) 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Joseph Myers <joseph@codesourcery.com>, 2006.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <stddef.h>
+#include <spe.h>
+
+int64_t
+atosfix64 (const char *str)
+{
+  return strtosfix64 (str, NULL);
+}
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/atoufix16.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/atoufix16.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/atoufix16.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/atoufix16.c	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1,28 @@
+/* Convert string to 16-bit unsigned fixed point.
+   Copyright (C) 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Joseph Myers <joseph@codesourcery.com>, 2006.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <stddef.h>
+#include <spe.h>
+
+uint16_t
+atoufix16 (const char *str)
+{
+  return strtoufix16 (str, NULL);
+}
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/atoufix32.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/atoufix32.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/atoufix32.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/atoufix32.c	2007-03-27 14:58:29.000000000 +0200
@@ -0,0 +1,28 @@
+/* Convert string to 32-bit unsigned fixed point.
+   Copyright (C) 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Joseph Myers <joseph@codesourcery.com>, 2006.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <stddef.h>
+#include <spe.h>
+
+uint32_t
+atoufix32 (const char *str)
+{
+  return strtoufix32 (str, NULL);
+}
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/atoufix64.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/atoufix64.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/atoufix64.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/atoufix64.c	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1,28 @@
+/* Convert string to 64-bit unsigned fixed point.
+   Copyright (C) 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Joseph Myers <joseph@codesourcery.com>, 2006.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <stddef.h>
+#include <spe.h>
+
+uint64_t
+atoufix64 (const char *str)
+{
+  return strtoufix64 (str, NULL);
+}
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/e_sqrt.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/e_sqrt.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/e_sqrt.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/e_sqrt.c	2007-03-27 14:58:29.000000000 +0200
@@ -0,0 +1 @@
+#include <sysdeps/ieee754/dbl-64/e_sqrt.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/e_sqrtf.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/e_sqrtf.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/e_sqrtf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/e_sqrtf.c	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1 @@
+#include <sysdeps/ieee754/flt-32/e_sqrtf.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fclrexcpt.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fclrexcpt.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fclrexcpt.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fclrexcpt.c	2007-03-27 14:58:31.000000000 +0200
@@ -0,0 +1,47 @@
+/* Clear given exceptions in current floating-point environment.
+   Copyright (C) 2004 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <fenv_libc.h>
+
+#undef feclearexcept
+int
+__feclearexcept (int excepts)
+{
+  unsigned int fpescr;
+
+  /* Get the current state.  */
+  fpescr = fegetenv_register ();
+
+  /* Clear the relevant bits.  */
+  fpescr &= ~(excepts & FE_ALL_EXCEPT);
+
+  /* Put the new state in effect.  */
+  fesetenv_register (fpescr);
+
+  /* Success.  */
+  return 0;
+}
+
+#include <shlib-compat.h>
+#if SHLIB_COMPAT (libm, GLIBC_2_1, GLIBC_2_2)
+strong_alias (__feclearexcept, __old_feclearexcept)
+compat_symbol (libm, __old_feclearexcept, feclearexcept, GLIBC_2_1);
+#endif
+
+versioned_symbol (libm, __feclearexcept, feclearexcept, GLIBC_2_2);
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fedisblxcpt.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fedisblxcpt.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fedisblxcpt.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fedisblxcpt.c	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1,60 @@
+/* Disable floating-point exceptions.
+   Copyright (C) 2004 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Aldy Hernandez <aldyh@redhat.com>, 2004.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <fenv_libc.h>
+#include <sysdep.h>
+#include <sys/prctl.h>
+
+int
+fedisableexcept (int excepts)
+{
+  unsigned int result = 0, pflags, r;
+  INTERNAL_SYSCALL_DECL (err);
+
+  INTERNAL_SYSCALL (prctl, err, 2, PR_GET_FPEXC, &pflags);
+
+  /* Save old enable bits.  */
+  if (pflags & PR_FP_EXC_OVF) 
+    result |= FE_OVERFLOW;
+  if (pflags & PR_FP_EXC_UND) 
+    result |= FE_UNDERFLOW;
+  if (pflags & PR_FP_EXC_INV) 
+    result |= FE_INVALID;
+  if (pflags & PR_FP_EXC_DIV) 
+    result |= FE_DIVBYZERO;
+  if (pflags & PR_FP_EXC_RES) 
+    result |= FE_INEXACT;
+
+  if (excepts & FE_INEXACT)
+    pflags &=  ~PR_FP_EXC_RES;
+  if (excepts & FE_DIVBYZERO)
+    pflags &= ~PR_FP_EXC_DIV;
+  if (excepts & FE_UNDERFLOW)
+    pflags &= ~PR_FP_EXC_UND;
+  if (excepts & FE_OVERFLOW)
+    pflags &= ~PR_FP_EXC_OVF;
+  if (excepts & FE_INVALID)
+    pflags &= ~PR_FP_EXC_INV;
+  r = INTERNAL_SYSCALL (prctl, err, 2, PR_SET_FPEXC, pflags);
+  if (INTERNAL_SYSCALL_ERROR_P (r, err))
+    return -1;
+
+  return result;
+}
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/feenablxcpt.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/feenablxcpt.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/feenablxcpt.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/feenablxcpt.c	2007-03-27 14:58:31.000000000 +0200
@@ -0,0 +1,60 @@
+/* Enable floating-point exceptions.
+   Copyright (C) 2004 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Aldy Hernandez <aldyh@redhat.com>, 2004.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <fenv_libc.h>
+#include <sysdep.h>
+#include <sys/prctl.h>
+
+int
+feenableexcept (int excepts)
+{
+  unsigned int result = 0, pflags, r;
+  INTERNAL_SYSCALL_DECL (err);
+
+  INTERNAL_SYSCALL (prctl, err, 2, PR_GET_FPEXC, &pflags);
+
+  /* Save old enable bits.  */
+  if (pflags & PR_FP_EXC_OVF) 
+    result |= FE_OVERFLOW;
+  if (pflags & PR_FP_EXC_UND) 
+    result |= FE_UNDERFLOW;
+  if (pflags & PR_FP_EXC_INV) 
+    result |= FE_INVALID;
+  if (pflags & PR_FP_EXC_DIV) 
+    result |= FE_DIVBYZERO;
+  if (pflags & PR_FP_EXC_RES) 
+    result |= FE_INEXACT;
+
+  if (excepts & FE_INEXACT)
+    pflags |= PR_FP_EXC_RES;
+  if (excepts & FE_DIVBYZERO)
+    pflags |= PR_FP_EXC_DIV;
+  if (excepts & FE_UNDERFLOW)
+    pflags |= PR_FP_EXC_UND;
+  if (excepts & FE_OVERFLOW)
+    pflags |= PR_FP_EXC_OVF;
+  if (excepts & FE_INVALID)
+    pflags |= PR_FP_EXC_INV;
+  r = INTERNAL_SYSCALL (prctl, err, 2, PR_SET_FPEXC, pflags);
+  if (INTERNAL_SYSCALL_ERROR_P (r, err))
+    return -1;
+
+  return result;
+}
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fegetenv.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fegetenv.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fegetenv.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fegetenv.c	2007-03-27 14:58:29.000000000 +0200
@@ -0,0 +1,46 @@
+/* Store current floating-point environment.
+   Copyright (C) 2004 Free Software Foundation, Inc.
+   Contributed by Aldy Hernandez <aldyh@redhat.com>, 2004
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <fenv_libc.h>
+#include <bp-sym.h>
+#include <sysdep.h>
+#include <sys/prctl.h>
+
+int
+__fegetenv (fenv_t *envp)
+{
+  fenv_union_t u;
+  INTERNAL_SYSCALL_DECL (err);
+
+  INTERNAL_SYSCALL (prctl, err, 2, PR_GET_FPEXC, &u.l[0]);
+  u.l[1] = fegetenv_register ();
+  *envp = u.fenv;
+
+  /* Success.  */
+  return 0;
+}
+
+#include <shlib-compat.h>
+#if SHLIB_COMPAT (libm, GLIBC_2_1, GLIBC_2_2)
+strong_alias (__fegetenv, __old_fegetenv)
+compat_symbol (libm, BP_SYM (__old_fegetenv), BP_SYM (fegetenv), GLIBC_2_1);
+#endif
+
+versioned_symbol (libm, BP_SYM (__fegetenv), BP_SYM (fegetenv), GLIBC_2_2);
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fegetexcept.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fegetexcept.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fegetexcept.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fegetexcept.c	2007-03-27 14:58:31.000000000 +0200
@@ -0,0 +1,31 @@
+/* Get floating-point exceptions.
+   Copyright (C) 2004 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Aldy Hernandez <aldyh@redhat.com>, 2004.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <fenv_libc.h>
+
+int
+fegetexcept (void)
+{
+  unsigned long fpescr;
+
+  fpescr = fegetenv_register ();
+
+  return fpescr & FE_ALL_EXCEPT;
+}
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fegetround.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fegetround.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fegetround.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fegetround.c	2007-03-27 14:58:29.000000000 +0200
@@ -0,0 +1,31 @@
+/* Return current rounding direction.
+   Copyright (C) 2004 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Aldy Hernandez <aldyh@redhat.com>, 2004.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <fenv_libc.h>
+
+#undef fegetround
+int
+fegetround (void)
+{
+  unsigned long fpescr;
+
+  fpescr = fegetenv_register ();
+  return fpescr & 3;
+}
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/feholdexcpt.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/feholdexcpt.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/feholdexcpt.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/feholdexcpt.c	2007-03-27 14:58:31.000000000 +0200
@@ -0,0 +1,45 @@
+/* Store current floating-point environment and clear exceptions.
+   Copyright (C) 2004, 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Aldy Hernandez <aldyh@redhat.com>, 2004.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <fenv_libc.h>
+#include <sysdep.h>
+#include <sys/prctl.h>
+
+int
+feholdexcept (fenv_t *envp)
+{
+  fenv_union_t u;
+  INTERNAL_SYSCALL_DECL (err);
+
+
+  /* Get the current state.  */
+  INTERNAL_SYSCALL (prctl, err, 2, PR_GET_FPEXC, &u.l[0]);
+  u.l[1] = fegetenv_register ();
+  *envp = u.fenv;
+
+  /* Clear everything except for the rounding mode.  */
+  u.l[1] &= 3;
+
+  /* Put the new state in effect.  */
+  fesetenv_register (u.l[1]);
+
+  return 0;
+}
+libm_hidden_def (feholdexcept)
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fe_nomask.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fe_nomask.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fe_nomask.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fe_nomask.c	2007-03-27 14:58:29.000000000 +0200
@@ -0,0 +1,32 @@
+/* Procedure definition for FE_NOMASK_ENV.
+   Copyright (C) 1997 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <fenv.h>
+#include <errno.h>
+
+/* This is presently a stub, until it's decided how the kernels should
+   support this.  */
+
+const fenv_t *
+__fe_nomask_env(void)
+{
+  __set_errno (ENOSYS);
+  return FE_ENABLED_ENV;
+}
+stub_warning (__fe_nomask_env)
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fenv_const.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fenv_const.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fenv_const.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fenv_const.c	2007-03-27 14:58:29.000000000 +0200
@@ -0,0 +1,27 @@
+/* Constants for fenv_bits.h.
+   Copyright (C) 2004 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Aldy Hernandez <aldyh@redhat.com>, 2004.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+/* If the default argument is used we use this value.  */
+const unsigned long long __fe_dfl_env __attribute__ ((aligned (8))) =
+0x0ULL;
+
+/* Floating-point environment where none of the exceptions are masked.  */
+const unsigned long long __fe_enabled_env __attribute__ ((aligned (8))) =
+0xF00000000ULL;
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fenv_libc.h glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fenv_libc.h
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fenv_libc.h	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fenv_libc.h	2007-03-27 14:58:29.000000000 +0200
@@ -0,0 +1,77 @@
+/* Internal libc stuff for floating point environment routines.
+   Copyright (C) 2004 Free Software Foundation, Inc.
+   Contributed by Aldy Hernandez <aldyh@redhat.com>, 2004
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#ifndef _FENV_LIBC_H
+#define _FENV_LIBC_H	1
+
+#include <fenv.h>
+
+extern int __feraiseexcept_internal (int __excepts);
+
+/* Equivalent to fegetenv, but returns a fenv_t instead of taking a
+   pointer.  */
+#define fegetenv_register() \
+        ({ unsigned fscr; asm volatile ("mfspefscr %0" : "=r" (fscr)); fscr; })
+
+/* Equivalent to fesetenv, but takes a fenv_t instead of a pointer.  */
+#define fesetenv_register(fscr) \
+	({ asm volatile ("mtspefscr %0" : : "r" (fscr)); })
+
+typedef union
+{
+  fenv_t fenv;
+  unsigned int l[2];
+} fenv_union_t;
+
+/* Definitions of all the SPEFSCR bit numbers.  */
+enum {
+  SPEFSCR_SOVH          = 0x80000000,
+  SPEFSCR_OVH           = 0x40000000,
+  SPEFSCR_FGH           = 0x20000000,
+  SPEFSCR_FXH           = 0x10000000,
+  SPEFSCR_FINVH         = 0x08000000,
+  SPEFSCR_FDBZH         = 0x04000000,
+  SPEFSCR_FUNFH         = 0x02000000,
+  SPEFSCR_FOVFH         = 0x01000000,
+  /* 2 unused bits.  */
+  SPEFSCR_FINXS         = 0x00200000,
+  SPEFSCR_FINVS         = 0x00100000,
+  SPEFSCR_FDBZS         = 0x00080000,
+  SPEFSCR_FUNFS         = 0x00040000,
+  SPEFSCR_FOVFS         = 0x00020000,
+  SPEFSCR_MODE          = 0x00010000,
+  SPEFSCR_SOV           = 0x00008000,
+  SPEFSCR_OV            = 0x00004000,
+  SPEFSCR_FG            = 0x00002000,
+  SPEFSCR_FX            = 0x00001000,
+  SPEFSCR_FINV          = 0x00000800,
+  SPEFSCR_FDBZ          = 0x00000400,
+  SPEFSCR_FUNF          = 0x00000200,
+  SPEFSCR_FOVF          = 0x00000100,
+  /* 1 unused bit.  */
+  SPEFSCR_FINXE         = 0x00000040,
+  SPEFSCR_FINVE         = 0x00000020,
+  SPEFSCR_FDBZE         = 0x00000010,
+  SPEFSCR_FUNFE         = 0x00000008,
+  SPEFSCR_FOVFE         = 0x00000004,
+  SPEFSCR_FRMC          = 0x00000003
+};
+
+#endif /* fenv_libc.h */
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fesetenv.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fesetenv.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fesetenv.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fesetenv.c	2007-03-27 14:58:29.000000000 +0200
@@ -0,0 +1,46 @@
+/* Install given floating-point environment.
+   Copyright (C) 1997,99,2000,01,02 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <fenv_libc.h>
+#include <bp-sym.h>
+#include <sysdep.h>
+#include <sys/prctl.h>
+
+int
+__fesetenv (const fenv_t *envp)
+{
+  fenv_union_t u;
+  INTERNAL_SYSCALL_DECL (err);
+
+  u.fenv = *envp;
+  INTERNAL_SYSCALL (prctl, err, 2, PR_SET_FPEXC, &u.l[0]);
+  fesetenv_register (u.l[1]);
+
+  /* Success.  */
+  return 0;
+}
+
+#include <shlib-compat.h>
+#if SHLIB_COMPAT (libm, GLIBC_2_1, GLIBC_2_2)
+strong_alias (__fesetenv, __old_fesetenv)
+compat_symbol (libm, BP_SYM (__old_fesetenv), BP_SYM (fesetenv), GLIBC_2_1);
+#endif
+
+libm_hidden_ver (__fesetenv, fesetenv)
+versioned_symbol (libm, BP_SYM (__fesetenv), BP_SYM (fesetenv), GLIBC_2_2);
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fesetround.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fesetround.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fesetround.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fesetround.c	2007-03-27 14:58:29.000000000 +0200
@@ -0,0 +1,37 @@
+/* Set current rounding direction.
+   Copyright (C) 2004, 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Aldy Hernandez <aldyh@redhat.com>, 2004.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <fenv_libc.h>
+
+int
+fesetround (int round)
+{
+  unsigned long fpescr;
+
+  if ((unsigned int) round > 3)
+    return 1;
+
+  fpescr = fegetenv_register ();
+  fpescr = (fpescr & ~SPEFSCR_FRMC) | (round & 3);
+  fesetenv_register (fpescr);
+
+  return 0;
+}
+libm_hidden_def (fesetround)
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/feupdateenv.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/feupdateenv.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/feupdateenv.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/feupdateenv.c	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1,57 @@
+/* Install given floating-point environment and raise exceptions.
+   Copyright (C) 2004 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Aldy Hernandez <aldyh@redhat.com>, 2004.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <fenv_libc.h>
+#include <bp-sym.h>
+#include <sysdep.h>
+#include <sys/prctl.h>
+
+int
+__feupdateenv (const fenv_t *envp)
+{
+  unsigned long fpescr, old, new, pflags;
+  fenv_union_t u;
+  INTERNAL_SYSCALL_DECL (err);
+
+  /* Save the currently set exceptions.  */
+  u.fenv = *envp;
+  new = u.l[1];
+  old = fegetenv_register ();
+  new |= (old & FE_ALL_EXCEPT);
+
+  INTERNAL_SYSCALL (prctl, err, 2, PR_GET_FPEXC, &pflags);
+  pflags |= u.l[0];
+  INTERNAL_SYSCALL (prctl, err, 2, PR_SET_FPEXC, pflags);
+
+  /* Enable and raise (if appropriate) exceptions set in `new'. */
+  fesetenv_register (new);
+  feraiseexcept (new & FE_ALL_EXCEPT);
+
+  /* Success.  */
+  return 0;
+}
+
+#include <shlib-compat.h>
+#if SHLIB_COMPAT (libm, GLIBC_2_1, GLIBC_2_2)
+strong_alias (__feupdateenv, __old_feupdateenv)
+compat_symbol (libm, BP_SYM (__old_feupdateenv), BP_SYM (feupdateenv), GLIBC_2_1);
+#endif
+
+versioned_symbol (libm, BP_SYM (__feupdateenv), BP_SYM (feupdateenv), GLIBC_2_2);
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fgetexcptflg.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fgetexcptflg.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fgetexcptflg.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fgetexcptflg.c	2007-03-27 14:58:31.000000000 +0200
@@ -0,0 +1,47 @@
+/* Store current representation for exceptions.
+   Copyright (C) 2004 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Aldy Hernandez <aldyh@redhat.com>, 2004.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <fenv_libc.h>
+#include <bp-sym.h>
+
+int
+__fegetexceptflag (fexcept_t *flagp, int excepts)
+{
+  unsigned long fpescr;
+
+  /* Get the current state.  */
+  fpescr = fegetenv_register ();
+
+  /* ?? Classic PPC doesn't do anything with `excepts', so we'll do
+     the same here.  (We should really be ignoring exceptions in
+     excepts) ??  */
+  *flagp = fpescr & FE_ALL_EXCEPT;
+
+  /* Success.  */
+  return 0;
+}
+
+#include <shlib-compat.h>
+#if SHLIB_COMPAT (libm, GLIBC_2_1, GLIBC_2_2)
+strong_alias (__fegetexceptflag, __old_fegetexceptflag)
+compat_symbol (libm, BP_SYM (__old_fegetexceptflag), BP_SYM (fegetexceptflag), GLIBC_2_1);
+#endif
+
+versioned_symbol (libm, BP_SYM (__fegetexceptflag), BP_SYM (fegetexceptflag), GLIBC_2_2);
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fprrest.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fprrest.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fprrest.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fprrest.c	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1 @@
+/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fprsave.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fprsave.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fprsave.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fprsave.c	2007-03-27 14:58:29.000000000 +0200
@@ -0,0 +1 @@
+/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fraiseexcpt.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fraiseexcpt.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fraiseexcpt.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fraiseexcpt.c	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1,29 @@
+/* Raise given exceptions.
+   Copyright (C) 2004, 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Aldy Hernandez <aldyh@redhat.com>, 2004.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <fenv_libc.h>
+#include <bp-sym.h>
+
+#undef feraiseexcept
+
+#define __FERAISEEXCEPT_INTERNAL feraiseexcept
+#include "../spe-raise.c"
+
+libm_hidden_def (feraiseexcept)
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fsetexcptflg.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fsetexcptflg.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/fsetexcptflg.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/fsetexcptflg.c	2007-03-27 14:58:29.000000000 +0200
@@ -0,0 +1,54 @@
+/* Set floating-point environment exception handling.
+   Copyright (C) 1997,99,2000,01,04 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <fenv_libc.h>
+#include <bp-sym.h>
+
+int
+__fesetexceptflag (const fexcept_t *flagp, int excepts)
+{
+  unsigned long spefscr;
+  fexcept_t flag;
+
+  /* Get the current state.  */
+  spefscr = fegetenv_register ();
+
+  /* Ignore exceptions not listed in 'excepts'.  */
+  flag = *flagp & excepts;
+
+  /* Replace the exception status */
+  spefscr = (spefscr & ~FE_ALL_EXCEPT) | flag;
+
+  /* Store the new status word (along with the rest of the environment).
+     This may cause floating-point exceptions if the restored state
+     requests it.  */
+  fesetenv_register (spefscr);
+  feraiseexcept (spefscr & FE_ALL_EXCEPT);
+
+  /* Success.  */
+  return 0;
+}
+
+#include <shlib-compat.h>
+#if SHLIB_COMPAT (libm, GLIBC_2_1, GLIBC_2_2)
+strong_alias (__fesetexceptflag, __old_fesetexceptflag)
+compat_symbol (libm, BP_SYM (__old_fesetexceptflag), BP_SYM (fesetexceptflag), GLIBC_2_1);
+#endif
+
+versioned_symbol (libm, BP_SYM (__fesetexceptflag), BP_SYM (fesetexceptflag), GLIBC_2_2);
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/ftestexcept.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/ftestexcept.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/ftestexcept.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/ftestexcept.c	2007-03-27 14:58:31.000000000 +0200
@@ -0,0 +1,32 @@
+/* Test exception in current environment.
+   Copyright (C) 2004 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Aldy Hernandez <aldyh@redhat.com>, 2004.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <fenv_libc.h>
+
+int
+fetestexcept (int excepts)
+{
+  unsigned long f;
+
+  /* Get the current state.  */
+  f = fegetenv_register ();
+
+  return f & excepts;
+}
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/__longjmp-common.S glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/__longjmp-common.S
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/__longjmp-common.S	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/__longjmp-common.S	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1,103 @@
+/* longjmp for PowerPC E500.
+   Copyright (C) 2004, 2006 Free Software Foundation, Inc.
+   Contributed by Aldy Hernandez <aldyh@redhat.com>.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <sysdep.h>
+#define _ASM
+#define _SETJMP_H
+#ifdef __NO_VMX__
+# include <novmxsetjmp.h>
+#else
+# include <jmpbuf-offsets.h>
+#endif
+#include <bp-sym.h>
+#include <bp-asm.h>
+
+ENTRY (BP_SYM (__longjmp))
+	CHECK_BOUNDS_BOTH_WIDE_LIT (r3, r8, r9, JB_SIZE)
+
+#ifdef PTR_DEMANGLE
+	lwz r24,(JB_GPR1*4)(r3)
+#else
+	lwz r1,(JB_GPR1*4)(r3)
+#endif
+	lwz r0,(JB_LR*4)(r3)
+	/*lfd fp14,((JB_FPRS+0*2)*4)(r3)*/
+	evldd r14,((JB_FPRS+0*2)*4)(r3)
+	lwz r14,((JB_GPRS+0)*4)(r3)
+	/*lfd fp15,((JB_FPRS+1*2)*4)(r3)*/
+	evldd r15,((JB_FPRS+1*2)*4)(r3)
+	lwz r15,((JB_GPRS+1)*4)(r3)
+	/*lfd fp16,((JB_FPRS+2*2)*4)(r3)*/
+	evldd r16,((JB_FPRS+2*2)*4)(r3)
+	lwz r16,((JB_GPRS+2)*4)(r3)
+	/*lfd fp17,((JB_FPRS+3*2)*4)(r3)*/
+	evldd r17,((JB_FPRS+3*2)*4)(r3)
+	lwz r17,((JB_GPRS+3)*4)(r3)
+	/*lfd fp18,((JB_FPRS+4*2)*4)(r3)*/
+	evldd r18,((JB_FPRS+4*2)*4)(r3)
+	lwz r18,((JB_GPRS+4)*4)(r3)
+	/*lfd fp19,((JB_FPRS+5*2)*4)(r3)*/
+	evldd r19,((JB_FPRS+5*2)*4)(r3)
+	lwz r19,((JB_GPRS+5)*4)(r3)
+	/*lfd fp20,((JB_FPRS+6*2)*4)(r3)*/
+	evldd r20,((JB_FPRS+6*2)*4)(r3)
+	lwz r20,((JB_GPRS+6)*4)(r3)
+#ifdef PTR_DEMANGLE
+	PTR_DEMANGLE3 (r1, r24, r25)
+	PTR_DEMANGLE2 (r0, r25)
+#endif
+	mtlr r0
+	/*lfd fp21,((JB_FPRS+7*2)*4)(r3)*/
+	evldd r21,((JB_FPRS+7*2)*4)(r3)
+	lwz r21,((JB_GPRS+7)*4)(r3)
+	/*lfd fp22,((JB_FPRS+8*2)*4)(r3)*/
+	evldd r22,((JB_FPRS+8*2)*4)(r3)
+	lwz r22,((JB_GPRS+8)*4)(r3)
+	lwz r0,(JB_CR*4)(r3)
+	/*lfd fp23,((JB_FPRS+9*2)*4)(r3)*/
+	evldd r23,((JB_FPRS+9*2)*4)(r3)
+	lwz r23,((JB_GPRS+9)*4)(r3)
+	/*lfd fp24,((JB_FPRS+10*2)*4)(r3)*/
+	evldd r24,((JB_FPRS+10*2)*4)(r3)
+	lwz r24,((JB_GPRS+10)*4)(r3)
+	/*lfd fp25,((JB_FPRS+11*2)*4)(r3)*/
+	evldd r25,((JB_FPRS+11*2)*4)(r3)
+	lwz r25,((JB_GPRS+11)*4)(r3)
+	mtcrf 0xFF,r0
+	/*lfd fp26,((JB_FPRS+12*2)*4)(r3)*/
+	evldd r26,((JB_FPRS+12*2)*4)(r3)
+	lwz r26,((JB_GPRS+12)*4)(r3)
+	/*lfd fp27,((JB_FPRS+13*2)*4)(r3)*/
+	evldd r27,((JB_FPRS+13*2)*4)(r3)
+	lwz r27,((JB_GPRS+13)*4)(r3)
+	/*lfd fp28,((JB_FPRS+14*2)*4)(r3)*/
+	evldd r28,((JB_FPRS+14*2)*4)(r3)
+	lwz r28,((JB_GPRS+14)*4)(r3)
+	/*lfd fp29,((JB_FPRS+15*2)*4)(r3)*/
+	evldd r29,((JB_FPRS+15*2)*4)(r3)
+	lwz r29,((JB_GPRS+15)*4)(r3)
+	/*lfd fp30,((JB_FPRS+16*2)*4)(r3)*/
+	evldd r30,((JB_FPRS+16*2)*4)(r3)
+	lwz r30,((JB_GPRS+16)*4)(r3)
+	/*lfd fp31,((JB_FPRS+17*2)*4)(r3)*/
+	evldd r31,((JB_FPRS+17*2)*4)(r3)
+	lwz r31,((JB_GPRS+17)*4)(r3)
+	mr r3,r4
+	blr
+END (BP_SYM (__longjmp))
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/__longjmp.S glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/__longjmp.S
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/__longjmp.S	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/__longjmp.S	2007-03-27 14:58:31.000000000 +0200
@@ -0,0 +1,39 @@
+/* AltiVec/VMX (new) version of __longjmp for PowerPC.
+   Copyright (C)  1995-1997,1999,2000,2003,2004 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <libc-symbols.h>
+#include <shlib-compat.h>
+
+#if defined NOT_IN_libc
+/* Build a non-versioned object for rtld-*.  */
+# include "__longjmp-common.S"
+
+#else /* !NOT_IN_libc */
+strong_alias (__vmx__longjmp, __longjmp);
+# define __longjmp  __vmx__longjmp
+# include "__longjmp-common.S"
+
+# if defined SHARED && SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_3_4)
+#  define __NO_VMX__
+#  undef JB_SIZE
+#  undef __longjmp
+#  define __longjmp  __novmx__longjmp
+#  include "__longjmp-common.S"
+# endif
+#endif /* !NOT_IN_libc */
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/Makefile glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/Makefile
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/Makefile	2007-03-27 14:58:29.000000000 +0200
@@ -0,0 +1,11 @@
+ifeq ($(subdir),stdlib)
+spepim_routines = atosfix16 atosfix32 atosfix64 atoufix16 atoufix32 atoufix64 \
+  strtosfix16 strtosfix32 strtosfix64 strtoufix16 strtoufix32 strtoufix64
+sysdep_routines += $(spepim_routines)
+tests += tst-spepim
+ifeq ($(build-shared),yes)
+$(objpfx)tst-spepim: $(common-objpfx)math/libm.so$(libm.so-version)
+else
+$(objpfx)tst-spepim: $(common-objpfx)math/libm.a
+endif
+endif
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/math_ldbl.h glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/math_ldbl.h
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/math_ldbl.h	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/math_ldbl.h	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1 @@
+#include <sysdeps/ieee754/ldbl-128ibm/math_ldbl.h>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/math_private.h glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/math_private.h
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/math_private.h	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/math_private.h	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1 @@
+#include <math/math_private.h>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_ceil.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_ceil.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_ceil.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_ceil.c	2007-03-27 14:58:31.000000000 +0200
@@ -0,0 +1 @@
+#include <sysdeps/ieee754/dbl-64/s_ceil.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_ceilf.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_ceilf.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_ceilf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_ceilf.c	2007-03-27 14:58:29.000000000 +0200
@@ -0,0 +1 @@
+#include <sysdeps/ieee754/flt-32/s_ceilf.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_copysign.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_copysign.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_copysign.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_copysign.c	2007-03-27 14:58:29.000000000 +0200
@@ -0,0 +1 @@
+#include <sysdeps/ieee754/dbl-64/s_copysign.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_copysignf.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_copysignf.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_copysignf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_copysignf.c	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1 @@
+#include <sysdeps/ieee754/flt-32/s_copysignf.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_copysignl.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_copysignl.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_copysignl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_copysignl.c	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1 @@
+#include <sysdeps/ieee754/ldbl-128ibm/s_copysignl.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/setjmp-common.S glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/setjmp-common.S
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/setjmp-common.S	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/setjmp-common.S	2007-03-27 14:58:29.000000000 +0200
@@ -0,0 +1,108 @@
+/* setjmp for PowerPC E500.
+   Copyright (C) 2004, 2006 Free Software Foundation, Inc.
+   Contributed by Aldy Hernandez <aldyh@redhat.com>.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <sysdep.h>
+#define _ASM
+#ifdef __NO_VMX__
+# include <novmxsetjmp.h>
+#else
+# include <jmpbuf-offsets.h>
+#endif
+#include <bp-sym.h>
+#include <bp-asm.h>
+
+ENTRY (BP_SYM (__sigsetjmp))
+	CHECK_BOUNDS_BOTH_WIDE_LIT (r3, r8, r9, JB_SIZE)
+
+#ifdef PTR_MANGLE
+	mr   r5,r1
+	PTR_MANGLE(r5, r10)
+	stw  r5,(JB_GPR1*4)(3)
+#else
+	stw  r1,(JB_GPR1*4)(3)
+#endif
+	mflr r0
+	stw  r14,((JB_GPRS+0)*4)(3)
+#ifdef PTR_MANGLE
+	PTR_MANGLE2 (r0, r10)
+	li   r10,0
+#endif
+	/*stfd fp14,((JB_FPRS+0*2)*4)(3)*/
+	evstdd r14,((JB_FPRS+0*2)*4)(3)
+	stw  r0,(JB_LR*4)(3)
+	stw  r15,((JB_GPRS+1)*4)(3)
+	/*stfd fp15,((JB_FPRS+1*2)*4)(3)*/
+	evstdd r15,((JB_FPRS+1*2)*4)(3)
+	mfcr r0
+	stw  r16,((JB_GPRS+2)*4)(3)
+	/*stfd fp16,((JB_FPRS+2*2)*4)(3)*/
+	evstdd r16,((JB_FPRS+2*2)*4)(3)
+	stw  r0,(JB_CR*4)(3)
+	stw  r17,((JB_GPRS+3)*4)(3)
+	/*stfd fp17,((JB_FPRS+3*2)*4)(3)*/
+	evstdd r17,((JB_FPRS+3*2)*4)(3)
+	stw  r18,((JB_GPRS+4)*4)(3)
+	/*stfd fp18,((JB_FPRS+4*2)*4)(3)*/
+	evstdd r18,((JB_FPRS+4*2)*4)(3)
+	stw  r19,((JB_GPRS+5)*4)(3)
+	/*stfd fp19,((JB_FPRS+5*2)*4)(3)*/
+	evstdd r19,((JB_FPRS+5*2)*4)(3)
+	stw  r20,((JB_GPRS+6)*4)(3)
+	/*stfd fp20,((JB_FPRS+6*2)*4)(3)*/
+	evstdd r20,((JB_FPRS+6*2)*4)(3)
+	stw  r21,((JB_GPRS+7)*4)(3)
+	/*stfd fp21,((JB_FPRS+7*2)*4)(3)*/
+	evstdd r21,((JB_FPRS+7*2)*4)(3)
+	stw  r22,((JB_GPRS+8)*4)(3)
+	/*stfd fp22,((JB_FPRS+8*2)*4)(3)*/
+	evstdd r22,((JB_FPRS+8*2)*4)(3)
+	stw  r23,((JB_GPRS+9)*4)(3)
+	/*stfd fp23,((JB_FPRS+9*2)*4)(3)*/
+	evstdd r23,((JB_FPRS+9*2)*4)(3)
+	stw  r24,((JB_GPRS+10)*4)(3)
+	/*stfd fp24,((JB_FPRS+10*2)*4)(3)*/
+	evstdd r24,((JB_FPRS+10*2)*4)(3)
+	stw  r25,((JB_GPRS+11)*4)(3)
+	/*stfd fp25,((JB_FPRS+11*2)*4)(3)*/
+	evstdd r25,((JB_FPRS+11*2)*4)(3)
+	stw  r26,((JB_GPRS+12)*4)(3)
+	/*stfd fp26,((JB_FPRS+12*2)*4)(3)*/
+	evstdd r26,((JB_FPRS+12*2)*4)(3)
+	stw  r27,((JB_GPRS+13)*4)(3)
+	/*stfd fp27,((JB_FPRS+13*2)*4)(3)*/
+	evstdd r27,((JB_FPRS+13*2)*4)(3)
+	stw  r28,((JB_GPRS+14)*4)(3)
+	/*stfd fp28,((JB_FPRS+14*2)*4)(3)*/
+	evstdd r28,((JB_FPRS+14*2)*4)(3)
+	stw  r29,((JB_GPRS+15)*4)(3)
+	/*stfd fp29,((JB_FPRS+15*2)*4)(3)*/
+	evstdd r29,((JB_FPRS+15*2)*4)(3)
+	stw  r30,((JB_GPRS+16)*4)(3)
+	/*stfd fp30,((JB_FPRS+16*2)*4)(3)*/
+	evstdd r30,((JB_FPRS+16*2)*4)(3)
+	stw  r31,((JB_GPRS+17)*4)(3)
+	/*stfd fp31,((JB_FPRS+17*2)*4)(3)*/
+	evstdd r31,((JB_FPRS+17*2)*4)(3)
+#if defined NOT_IN_libc && defined IS_IN_rtld
+	li   r3,0
+	blr
+#else
+	b BP_SYM (__sigjmp_save@local)
+#endif
+END (BP_SYM (__sigsetjmp))
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/setjmp.S glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/setjmp.S
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/setjmp.S	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/setjmp.S	2007-03-27 14:58:29.000000000 +0200
@@ -0,0 +1,44 @@
+/* non alitivec (old) version of setjmp for PowerPC.
+   Copyright (C) 1995-1997,1999-2001,2004 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <shlib-compat.h>
+#include <libc-symbols.h>
+
+#if defined NOT_IN_libc
+/* Build a non-versioned object for rtld-*.  */
+# include "setjmp-common.S"
+
+#else /* !NOT_IN_libc */
+/* Build a versioned object for libc.  */
+default_symbol_version (__vmx__sigsetjmp,__sigsetjmp,GLIBC_2.3.4)
+# define __sigsetjmp __vmx__sigsetjmp
+# define __sigjmp_save __vmx__sigjmp_save
+# include "setjmp-common.S"
+
+# if defined SHARED && SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_3_4)
+#  define __NO_VMX__
+#  undef __sigsetjmp
+#  undef __sigjmp_save
+#  undef JB_SIZE
+symbol_version (__novmx__sigsetjmp,__sigsetjmp,GLIBC_2.0)
+#  define __sigsetjmp __novmx__sigsetjmp
+#  define __sigjmp_save __novmx__sigjmp_save
+#  include "setjmp-common.S"
+# endif
+#endif /* !NOT_IN_libc */
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_fabs.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_fabs.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_fabs.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_fabs.c	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1 @@
+#include <sysdeps/ieee754/dbl-64/s_fabs.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_fabsf.S glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_fabsf.S
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_fabsf.S	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_fabsf.S	2007-03-27 14:58:31.000000000 +0200
@@ -0,0 +1,29 @@
+/* Floating-point absolute value.  PowerPC E500 version.
+   Copyright (C) 2004, 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Aldy Hernandez <aldyh@redhat.com>, 2004.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <sysdep.h>
+
+ENTRY(__fabsf)
+/* float [r3] fabsf (float [r3] x) ;  */
+	efsabs r3,r3
+	blr
+END(__fabsf)
+
+weak_alias(__fabsf,fabsf)
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_fabsl.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_fabsl.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_fabsl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_fabsl.c	2007-03-27 14:58:29.000000000 +0200
@@ -0,0 +1 @@
+#include <sysdeps/ieee754/ldbl-128ibm/s_fabsl.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_fdim.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_fdim.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_fdim.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_fdim.c	2007-03-27 14:58:29.000000000 +0200
@@ -0,0 +1 @@
+#include <math/s_fdim.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_fdimf.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_fdimf.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_fdimf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_fdimf.c	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1 @@
+#include <math/s_fdimf.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_floor.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_floor.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_floor.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_floor.c	2007-03-27 14:58:29.000000000 +0200
@@ -0,0 +1 @@
+#include <sysdeps/ieee754/dbl-64/s_floor.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_floorf.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_floorf.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_floorf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_floorf.c	2007-03-27 14:58:31.000000000 +0200
@@ -0,0 +1 @@
+#include <sysdeps/ieee754/flt-32/s_floorf.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_fmax.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_fmax.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_fmax.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_fmax.c	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1 @@
+#include <math/s_fmax.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_fmaxf.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_fmaxf.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_fmaxf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_fmaxf.c	2007-03-27 14:58:31.000000000 +0200
@@ -0,0 +1 @@
+#include <math/s_fmaxf.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_fmin.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_fmin.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_fmin.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_fmin.c	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1 @@
+#include <math/s_fmin.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_fminf.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_fminf.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_fminf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_fminf.c	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1 @@
+#include <math/s_fminf.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_isnan.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_isnan.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_isnan.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_isnan.c	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1 @@
+#include <sysdeps/ieee754/dbl-64/s_isnan.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_isnanf.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_isnanf.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_isnanf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_isnanf.c	2007-03-27 14:58:29.000000000 +0200
@@ -0,0 +1 @@
+#include <sysdeps/ieee754/flt-32/s_isnanf.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_llrint.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_llrint.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_llrint.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_llrint.c	2007-03-27 14:58:29.000000000 +0200
@@ -0,0 +1 @@
+#include <sysdeps/ieee754/dbl-64/s_llrint.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_llrintf.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_llrintf.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_llrintf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_llrintf.c	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1 @@
+#include <sysdeps/ieee754/flt-32/s_llrintf.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_llround.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_llround.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_llround.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_llround.c	2007-03-27 14:58:31.000000000 +0200
@@ -0,0 +1 @@
+#include <sysdeps/ieee754/dbl-64/s_llround.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_llroundf.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_llroundf.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_llroundf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_llroundf.c	2007-03-27 14:58:29.000000000 +0200
@@ -0,0 +1 @@
+#include <sysdeps/ieee754/flt-32/s_llroundf.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_lrint.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_lrint.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_lrint.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_lrint.c	2007-03-27 14:58:31.000000000 +0200
@@ -0,0 +1 @@
+#include <sysdeps/ieee754/dbl-64/s_lrint.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_lrintf.S glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_lrintf.S
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_lrintf.S	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_lrintf.S	2007-03-27 14:58:29.000000000 +0200
@@ -0,0 +1,29 @@
+/* Round float to long int.  PowerPC E500 version.
+   Copyright (C) 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Joseph Myers <joseph@codesourcery.com>, 2006.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <sysdep.h>
+
+ENTRY(__lrintf)
+/* long int [r3] lrintf (float [r3] x) ;  */
+	efsctsi r3,r3
+	blr
+END(__lrintf)
+
+weak_alias(__lrintf,lrintf)
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_lround.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_lround.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_lround.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_lround.c	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1 @@
+#include <sysdeps/ieee754/dbl-64/s_lround.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_lroundf.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_lroundf.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_lroundf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_lroundf.c	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1 @@
+#include <sysdeps/ieee754/flt-32/s_lroundf.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_rint.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_rint.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_rint.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_rint.c	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1 @@
+#include <sysdeps/ieee754/dbl-64/s_rint.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_rintf.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_rintf.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_rintf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_rintf.c	2007-03-27 14:58:29.000000000 +0200
@@ -0,0 +1 @@
+#include <sysdeps/ieee754/flt-32/s_rintf.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_round.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_round.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_round.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_round.c	2007-03-27 14:58:29.000000000 +0200
@@ -0,0 +1 @@
+#include <sysdeps/ieee754/dbl-64/s_round.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_roundf.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_roundf.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_roundf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_roundf.c	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1 @@
+#include <sysdeps/ieee754/flt-32/s_roundf.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/strtofix.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/strtofix.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/strtofix.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/strtofix.c	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1,698 @@
+/* Convert string representing a number to float value, using given locale.
+   Copyright (C) 1997,1998,2002,2004,2005,2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+/* Cut down from strtod_l.c for converting to fixed-point, no locale
+   choice, no grouping, narrow strings only.  */
+
+
+#include <ctype.h>
+#include <errno.h>
+#include <fenv_libc.h>
+#include <locale/localeinfo.h>
+#include <locale.h>
+#include <math.h>
+#include <stdlib.h>
+#include <string.h>
+
+/* The gmp headers need some configuration frobs.  */
+#define HAVE_ALLOCA 1
+
+/* Include gmp-mparam.h first, such that definitions of _SHORT_LIMB
+   and _LONG_LONG_LIMB in it can take effect into gmp.h.  */
+#include <gmp-mparam.h>
+#include <gmp.h>
+#include <stdlib/gmp-impl.h>
+#include <stdlib/longlong.h>
+#include <stdlib/fpioconst.h>
+
+/*#define NDEBUG 1*/
+#include <assert.h>
+
+#if UNSIGNED
+#define RETURN_FRAC_BITS RETURN_TYPE_BITS
+#else
+#define RETURN_FRAC_BITS (RETURN_TYPE_BITS - 1)
+#endif
+
+#define RETURN(val,end)					\
+    do { if (endptr != NULL) *endptr = (char *) (end);	\
+	 return val; } while (0)
+
+/* Definitions according to limb size used.  */
+#if	BITS_PER_MP_LIMB == 32
+# define MAX_DIG_PER_LIMB	9
+# define MAX_FAC_PER_LIMB	1000000000UL
+#elif	BITS_PER_MP_LIMB == 64
+# define MAX_DIG_PER_LIMB	19
+# define MAX_FAC_PER_LIMB	10000000000000000000ULL
+#else
+# error "mp_limb_t size " BITS_PER_MP_LIMB "not accounted for"
+#endif
+
+/* Local data structure.  */
+static const mp_limb_t _tens_in_limb[MAX_DIG_PER_LIMB + 1] =
+{    0,                   10,                   100,
+     1000,                10000,                100000L,
+     1000000L,            10000000L,            100000000L,
+     1000000000L
+#if BITS_PER_MP_LIMB > 32
+	        ,	  10000000000ULL,       100000000000ULL,
+     1000000000000ULL,    10000000000000ULL,    100000000000000ULL,
+     1000000000000000ULL, 10000000000000000ULL, 100000000000000000ULL,
+     1000000000000000000ULL, 10000000000000000000ULL
+#endif
+#if BITS_PER_MP_LIMB > 64
+  #error "Need to expand tens_in_limb table to" MAX_DIG_PER_LIMB
+#endif
+};
+
+/* Define pow5 to be 5^(RETURN_FRAC_BITS + 1), shifted left so the
+   most significant bit is set (as required by mpn_divrem), pow5size
+   to be the size in limbs and pow5shift to be the shift.  */
+#if RETURN_FRAC_BITS + 1 == 16
+# if BITS_PER_MP_LIMB == 32
+static const mp_limb_t pow5[] = { 0x04000000, 0x8e1bc9bf };
+#  define pow5shift 26
+#  define pow5size 2
+# else
+static const mp_limb_t pow5[] = { 0x8e1bc9bf04000000ull };
+#  define pow5shift 26
+#  define pow5size 1
+# endif
+#elif RETURN_FRAC_BITS + 1 == 17
+# if BITS_PER_MP_LIMB == 32
+static const mp_limb_t pow5[] = { 0xc5000000, 0xb1a2bc2e };
+#  define pow5shift 24
+#  define pow5size 2
+# else
+static const mp_limb_t pow5[] = { 0xb1a2bc2ec5000000ull };
+#  define pow5shift 24
+#  define pow5size 1
+# endif
+#elif RETURN_FRAC_BITS + 1 == 32
+# if BITS_PER_MP_LIMB == 32
+static const mp_limb_t pow5[] = { 0xf0200000, 0x2b70b59d, 0x9dc5ada8 };
+#  define pow5shift 21
+#  define pow5size 3
+# else
+static const mp_limb_t pow5[] = { 0xf020000000000000ull, 0x9dc5ada82b70b59dull };
+#  define pow5shift 53
+#  define pow5size 2
+# endif
+#elif RETURN_FRAC_BITS + 1 == 33
+# if BITS_PER_MP_LIMB == 32
+static const mp_limb_t pow5[] = { 0x6c280000, 0x364ce305, 0xc5371912 };
+#  define pow5shift 19
+#  define pow5size 3
+# else
+static const mp_limb_t pow5[] = { 0x6c28000000000000ull, 0xc5371912364ce305ull };
+#  define pow5shift 51
+#  define pow5size 2
+# endif
+#elif RETURN_FRAC_BITS + 1 == 64
+# if BITS_PER_MP_LIMB == 32
+static const mp_limb_t pow5[] = { 0x50f80800, 0xc76b25fb, 0x3cbf6b71, 0xffcfa6d5, 0xc2781f49 };
+#  define pow5shift 11
+#  define pow5size 5
+# else
+static const mp_limb_t pow5[] = { 0x50f8080000000000ull, 0x3cbf6b71c76b25fbull, 0xc2781f49ffcfa6d5ull };
+#  define pow5shift 43
+#  define pow5size 3
+# endif
+#elif RETURN_FRAC_BITS + 1 == 65
+# if BITS_PER_MP_LIMB == 32
+static const mp_limb_t pow5[] = { 0x25360a00, 0x3945ef7a, 0x8bef464e, 0x7fc3908a, 0xf316271c };
+#  define pow5shift 9
+#  define pow5size 5
+# else
+static const mp_limb_t pow5[] = { 0x25360a0000000000ull, 8bef464e3945ef7aull, 0xf316271c7fc3908aull };
+#  define pow5shift 41
+#  define pow5size 3
+# endif
+#else
+# error "Unknown RETURN_FRAC_BITS value."
+#endif
+
+/* Read a multi-precision integer starting at STR with exactly DIGCNT digits
+   into N.  Return the size of the number limbs in NSIZE.  */
+static void
+str_to_mpn (const char *str, int digcnt, mp_limb_t *n, mp_size_t *nsize)
+{
+  /* Number of digits for actual limb.  */
+  int cnt = 0;
+  mp_limb_t low = 0;
+  mp_limb_t start;
+
+  *nsize = 0;
+  assert (digcnt > 0);
+  do
+    {
+      if (cnt == MAX_DIG_PER_LIMB)
+	{
+	  if (*nsize == 0)
+	    {
+	      n[0] = low;
+	      *nsize = 1;
+	    }
+	  else
+	    {
+	      mp_limb_t cy;
+	      cy = __mpn_mul_1 (n, n, *nsize, MAX_FAC_PER_LIMB);
+	      cy += __mpn_add_1 (n, n, *nsize, low);
+	      if (cy != 0)
+		{
+		  n[*nsize] = cy;
+		  ++(*nsize);
+		}
+	    }
+	  cnt = 0;
+	  low = 0;
+	}
+
+      low = low * 10 + *str++ - '0';
+      ++cnt;
+    }
+  while (--digcnt > 0);
+
+  start = _tens_in_limb[cnt];
+
+  if (*nsize == 0)
+    {
+      n[0] = low;
+      *nsize = 1;
+    }
+  else
+    {
+      mp_limb_t cy;
+      cy = __mpn_mul_1 (n, n, *nsize, start);
+      cy += __mpn_add_1 (n, n, *nsize, low);
+      if (cy != 0)
+	n[(*nsize)++] = cy;
+    }
+}
+
+/* Round a fixed point number according to the current rounding mode
+   and set its sign.  VAL is the initial part of the number
+   (RETURN_TYPE_BITS for unsigned, one fewer for signed; values equal
+   to -1.0 do not come here).  SIGN is 1 for negative, 0 for positive;
+   this function will not be called for negative numbers in the
+   unsigned case.  HALF is 1 if the next bit is 1; REST is 1 if any of
+   the subsequent bits are 1.  */
+static RETURN_TYPE
+round_and_set_sign (RETURN_TYPE val, int sign, int half, int rest)
+{
+  int incr = 0;
+  unsigned int mode = fegetenv_register ();
+  mode &= 3;
+  switch (mode)
+    {
+    case FE_TONEAREST:
+      incr = (half && (rest || (val & 1)));
+      break;
+    case FE_TOWARDZERO:
+      break;
+    case FE_UPWARD:
+      incr = (!sign && (half || rest));
+      break;
+    case FE_DOWNWARD:
+      incr = (sign && (half || rest));
+      break;
+    }
+  if (incr)
+    {
+      if (val == SAT_MAX)
+	{
+	  if (sign)
+	    val = SAT_MIN;
+	  else
+	    {
+	      __set_errno (ERANGE);
+	      return SAT_MAX;
+	    }
+	}
+      else
+	{
+	  val++;
+	  if (sign)
+	    val = -val;
+	}
+    }
+  else if (sign)
+    val = -val;
+  return val;
+}
+
+/* Return a fixed point number with the value of the given string
+   NPTR, handling out-of-range numbers as described in the SPE PIM.
+   Set *ENDPTR to the character after the last used one.  */
+RETURN_TYPE
+STRTOFIX (const char *nptr, char **endptr)
+{
+  int negative;			/* The sign of the number.  */
+  int exponent;			/* Exponent of the number.  */
+
+  /* Numbers starting `0X' or `0x' have to be processed with base 16.  */
+  int base = 10;
+
+  /* Running pointer after the last character processed in the string.  */
+  const char *cp;
+  /* Start of significant part of the number.  */
+  const char *startp, *start_of_digits;
+  /* Points at the character following the integer and fractional digits.  */
+  const char *expp;
+  /* Total number of digit and number of digits in integer part.  */
+  int dig_no, int_no, lead_zero;
+  /* Contains the last character read.  */
+  char c;
+
+  /* The radix character of the current locale.  */
+  const char *decimal;
+  size_t decimal_len;
+  /* Used in several places.  */
+  int cnt;
+
+  decimal = _NL_CURRENT (LC_NUMERIC, DECIMAL_POINT);
+  decimal_len = strlen (decimal);
+  assert (decimal_len > 0);
+
+  /* Prepare number representation.  */
+  exponent = 0;
+  negative = 0;
+
+  /* Parse string to get maximal legal prefix.  We need the number of
+     characters of the integer part, the fractional part and the exponent.  */
+  cp = nptr - 1;
+  /* Ignore leading white space.  */
+  do
+    c = *++cp;
+  while (isspace (c));
+
+  /* Get sign of the result.  */
+  if (c == '-')
+    {
+      negative = 1;
+      c = *++cp;
+    }
+  else if (c == '+')
+    c = *++cp;
+
+  /* Return 0.0 if no legal string is found.
+     No character is used even if a sign was found.  */
+  for (cnt = 0; decimal[cnt] != '\0'; ++cnt)
+    if (cp[cnt] != decimal[cnt])
+      break;
+  if (decimal[cnt] == '\0' && cp[cnt] >= '0' && cp[cnt] <= '9')
+    {
+      /* We accept it.  This funny construct is here only to indent
+	 the code directly.  */
+    }
+  else if (c < '0' || c > '9')
+    {
+      /* The SPE PIM says NaN and Inf are not supported.  */
+      /* It is really a text we do not recognize.  */
+      RETURN (0, nptr);
+    }
+
+  /* First look whether we are faced with a hexadecimal number.  */
+  if (c == '0' && tolower (cp[1]) == 'x')
+    {
+      /* Okay, it is a hexa-decimal number.  Remember this and skip
+	 the characters.  BTW: hexadecimal numbers must not be
+	 grouped.  */
+      base = 16;
+      cp += 2;
+      c = *cp;
+    }
+
+  /* Record the start of the digits, in case we will check their grouping.  */
+  start_of_digits = startp = cp;
+
+  /* Ignore leading zeroes.  This helps us to avoid useless computations.  */
+  while (c == '0')
+    c = *++cp;
+
+  /* If no other digit but a '0' is found the result is 0.0.
+     Return current read pointer.  */
+  if ((c < '0' || c > '9')
+      && (base != 16 || (c < (char) tolower ('a')
+			 || c > (char) tolower ('f')))
+      && ({ for (cnt = 0; decimal[cnt] != '\0'; ++cnt)
+	      if (decimal[cnt] != cp[cnt])
+		break;
+	    decimal[cnt] != '\0'; })
+      && (base != 16 || (cp == start_of_digits
+			 || (char) tolower (c) != 'p'))
+      && (base == 16 || (char) tolower (c) != 'e'))
+    {
+      /* If CP is at the start of the digits, there was no correctly
+	 grouped prefix of the string; so no number found.  */
+      RETURN (0, cp == start_of_digits ? (base == 16 ? cp - 1 : nptr) : cp);
+    }
+
+  /* Remember first significant digit and read following characters until the
+     decimal point, exponent character or any non-FP number character.  */
+  startp = cp;
+  dig_no = 0;
+  while (1)
+    {
+      if ((c >= '0' && c <= '9')
+	  || (base == 16 && tolower (c) >= 'a'
+	      && tolower (c) <= 'f'))
+	++dig_no;
+      else
+	{
+	  break;
+	}
+      c = *++cp;
+    }
+
+  /* We have the number digits in the integer part.  Whether these are all or
+     any is really a fractional digit will be decided later.  */
+  int_no = dig_no;
+  lead_zero = int_no == 0 ? -1 : 0;
+
+  /* Read the fractional digits.  A special case are the 'american style'
+     numbers like `16.' i.e. with decimal but without trailing digits.  */
+  if (
+      ({ for (cnt = 0; decimal[cnt] != '\0'; ++cnt)
+	   if (decimal[cnt] != cp[cnt])
+	     break;
+	 decimal[cnt] == '\0'; })
+      )
+    {
+      cp += decimal_len;
+      c = *cp;
+      while ((c >= '0' && c <= '9') ||
+	     (base == 16 && tolower (c) >= 'a' && tolower (c) <= 'f'))
+	{
+	  if (c != '0' && lead_zero == -1)
+	    lead_zero = dig_no - int_no;
+	  ++dig_no;
+	  c = *++cp;
+	}
+    }
+
+  /* For numbers like "0x." with no hex digits, only the "0" is valid.  */
+  if (base == 16
+      && startp == start_of_digits
+      && dig_no == 0)
+    RETURN (0, start_of_digits - 1);
+
+  /* Remember start of exponent (if any).  */
+  expp = cp;
+
+  /* Read exponent.  */
+  if ((base == 16 && tolower (c) == 'p')
+      || (base != 16 && tolower (c) == 'e'))
+    {
+      int exp_negative = 0;
+
+      c = *++cp;
+      if (c == '-')
+	{
+	  exp_negative = 1;
+	  c = *++cp;
+	}
+      else if (c == '+')
+	c = *++cp;
+
+      if (c >= '0' && c <= '9')
+	{
+	  int exp_limit;
+
+	  /* Get the exponent limit. */
+	  if (base == 16)
+	    exp_limit = (exp_negative ?
+			 RETURN_TYPE_BITS + 4 * int_no :
+			 4 - 4 * int_no + 4 * lead_zero);
+	  else
+	    exp_limit = (exp_negative ?
+			 (RETURN_TYPE_BITS + 2) / 3 + int_no :
+			 1 - int_no + lead_zero);
+
+	  do
+	    {
+	      exponent *= 10;
+
+	      if (exponent > exp_limit)
+		/* The exponent is too large/small to represent a valid
+		   number.  */
+		{
+		  RETURN_TYPE result;
+
+		  /* Accept all following digits as part of the exponent.  */
+		  do
+		    ++cp;
+		  while (*cp >= '0' && *cp <= '9');
+
+		  /* We have to take care for special situation: a joker
+		     might have written "0.0e100000" which is in fact
+		     zero.  */
+		  if (lead_zero == -1)
+		    result = 0;
+#if UNSIGNED
+		  else if (negative)
+		    {
+		      /* Saturate to 0.  */
+		      __set_errno (ERANGE);
+		      result = SAT_MIN;
+		    }
+#endif
+		  else if (exp_negative)
+		    {
+		      /* Round to either 0 or smallest value.  */
+		      result = round_and_set_sign (0, negative, 0, 1);
+		    }
+		  else
+		    {
+		      /* Overflow.  */
+		      __set_errno (ERANGE);
+		      result = (negative ? SAT_MIN : SAT_MAX);
+		    }
+
+		  RETURN (result, cp);
+		  /* NOTREACHED */
+		}
+
+	      exponent += c - '0';
+	      c = *++cp;
+	    }
+	  while (c >= '0' && c <= '9');
+
+	  if (exp_negative)
+	    exponent = -exponent;
+	}
+      else
+	cp = expp;
+    }
+
+  /* We don't want to have to work with trailing zeroes after the radix.  */
+  if (dig_no > int_no)
+    {
+      while (expp[-1] == '0')
+	{
+	  --expp;
+	  --dig_no;
+	}
+      assert (dig_no >= int_no);
+    }
+
+  if (dig_no == int_no && dig_no > 0)
+    do
+      {
+	while (! (base == 16 ? isxdigit (expp[-1]) : isdigit (expp[-1])))
+	  --expp;
+
+	if (expp[-1] != '0')
+	  break;
+
+	--expp;
+	--dig_no;
+	--int_no;
+	exponent += (base == 16 ? 4 : 1);
+      }
+    while (dig_no > 0);
+
+  /* The whole string is parsed.  Store the address of the next character.  */
+  if (endptr)
+    *endptr = (char *) cp;
+
+  if (dig_no == 0)
+    return 0;
+
+#if UNSIGNED
+  if (negative)
+    {
+      /* Saturate to 0.  */
+      __set_errno (ERANGE);
+      return SAT_MIN;
+    }
+#endif
+
+  if (lead_zero)
+    {
+      /* Find the decimal point */
+      while (1)
+	{
+	  if (*startp == decimal[0])
+	    {
+	      for (cnt = 1; decimal[cnt] != '\0'; ++cnt)
+		if (decimal[cnt] != startp[cnt])
+		  break;
+	      if (decimal[cnt] == '\0')
+		break;
+	    }
+	  ++startp;
+	}
+      startp += lead_zero + decimal_len;
+      exponent -= base == 16 ? 4 * lead_zero : lead_zero;
+      dig_no -= lead_zero;
+    }
+
+  /* Normalize the exponent so that all digits can be considered to
+     start just after the point.  */
+  exponent += base == 16 ? 4 * int_no : int_no;
+
+  if (exponent > (base == 16 ? 4 : 1))
+    {
+      /* Overflow.  */
+      __set_errno (ERANGE);
+      return (negative ? SAT_MIN : SAT_MAX);
+    }
+
+  /* Copy just the digits needed to a separate buffer.  */
+  int digits_needed = (base == 16 ? RETURN_TYPE_BITS / 4 + 2 : RETURN_FRAC_BITS + 1);
+  char buf[RETURN_TYPE_BITS + 1];
+  int digits_copied = 0;
+  int extra = 0;
+  int rdigno = dig_no;
+  while (exponent < 0)
+    {
+      buf[digits_copied++] = '0';
+      exponent += (base == 16 ? 4 : 1);
+      if (digits_copied == digits_needed)
+	return round_and_set_sign (0, negative, 0, 1);
+    }
+  while (digits_copied < digits_needed && rdigno > 0)
+    {
+      if (!(base == 16 ? isxdigit (*startp) : isdigit (*startp)))
+	startp += decimal_len;
+      buf[digits_copied++] = *startp++;
+      rdigno--;
+    }
+  if (rdigno)
+    extra = 1;
+  else
+    while (digits_copied < digits_needed)
+      buf[digits_copied++] = '0';
+
+  if (base == 10 && exponent == 1)
+    {
+      assert (buf[0] != '0');
+      /* At least 1.0; see if there is overflow.  */
+      if (UNSIGNED
+	  || !negative
+	  || buf[0] > '1'
+	  || dig_no > 1)
+	__set_errno (ERANGE);
+      return (negative ? SAT_MIN : SAT_MAX);
+    }
+
+  if (base == 16 && exponent > 0)
+    {
+      int max_dig = (16 >> exponent) + '0';
+      assert (buf[0] != '0');
+      if (buf[0] >= max_dig)
+	{
+	  /* At least 1.0; see if there is overflow.  */
+	  if (UNSIGNED
+	      || !negative
+	      || buf[0] > max_dig
+	      || dig_no > 1)
+	    __set_errno (ERANGE);
+	  return (negative ? SAT_MIN : SAT_MAX);
+	}
+    }
+
+  /* Now strictly in the range (0, 1) (though rounding may yet
+     saturate to 1.0).  */
+  if (base == 10)
+    assert (exponent == 0);
+  else
+    assert (exponent >= 0 && exponent <= 3);
+
+  if (base == 16)
+    {
+      RETURN_TYPE r = 0;
+      int half = 0;
+      for (int i = 0; i < digits_needed; i++)
+	{
+	  RETURN_TYPE val;
+	  int shift;
+	  if (isdigit (buf[i]))
+	    val = buf[i] - '0';
+	  else
+	    val = 10 + tolower (buf[i]) - 'a';
+	  shift = RETURN_FRAC_BITS - 4 + exponent - 4 * i;
+	  if (shift >= 0)
+	    r |= val << shift;
+	  else if (shift < -4)
+	    extra |= (val != 0);
+	  else
+	    {
+	      r |= val >> -shift;
+	      half = (val & (1 << (-shift - 1))) != 0;
+	      extra |= (val & ((1 << (-shift - 1)) - 1)) != 0;
+	    }
+	}
+      return round_and_set_sign (r, negative, half, extra);
+    }
+
+  /* Now we have RETURN_FRAC_BITS + 1 digits after the decimal point.
+     Interpret these as an integer and divide by 5^(RETURN_FRAC_BITS +
+     1).  If there is a remainder, set extra.  If the result of the
+     division is odd, set half.  Divide by 2 again, and round the
+     result.  */
+  mp_limb_t frac[8];
+  mp_size_t fracsize;
+  str_to_mpn (buf, digits_needed, frac, &fracsize);
+  if (fracsize < pow5size)
+    return round_and_set_sign (0, negative, 0, 1);
+  frac[fracsize] = __mpn_lshift (frac, frac, fracsize, pow5shift);
+  if (frac[fracsize])
+    fracsize++;
+  mp_limb_t quot[8];
+  quot[fracsize - pow5size] = mpn_divmod (quot, frac, fracsize, pow5, pow5size);
+  for (int i = 0; i < pow5size; i++)
+    if (frac[i])
+      extra = 1;
+  int half = quot[0] & 1;
+  RETURN_TYPE val = quot[0] >> 1;
+#if RETURN_FRAC_BITS > BITS_PER_MP_LIMB - 1
+  val |= ((RETURN_TYPE) quot[1]) << (BITS_PER_MP_LIMB - 1);
+# if RETURN_FRAC_BITS > 2 * BITS_PER_MP_LIMB - 1
+  val |= ((RETURN_TYPE) quot[2]) << (2 * BITS_PER_MP_LIMB - 1);
+#  if RETURN_FRAC_BITS > 3 * BITS_PER_MP_LIMB - 1
+#   error "Too many bits."
+#  endif
+# endif
+#endif
+  return round_and_set_sign (val, negative, half, extra);
+}
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/strtosfix16.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/strtosfix16.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/strtosfix16.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/strtosfix16.c	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1,28 @@
+/* Convert string to 16-bit signed fixed point.
+   Copyright (C) 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Joseph Myers <joseph@codesourcery.com>, 2006.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#define RETURN_TYPE int16_t
+#define UNSIGNED 0
+#define RETURN_TYPE_BITS 16
+#define SAT_MIN -0x8000
+#define SAT_MAX 0x7fff
+#define STRTOFIX strtosfix16
+
+#include "strtofix.c"
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/strtosfix32.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/strtosfix32.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/strtosfix32.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/strtosfix32.c	2007-03-27 14:58:29.000000000 +0200
@@ -0,0 +1,28 @@
+/* Convert string to 32-bit signed fixed point.
+   Copyright (C) 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Joseph Myers <joseph@codesourcery.com>, 2006.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#define RETURN_TYPE int32_t
+#define UNSIGNED 0
+#define RETURN_TYPE_BITS 32
+#define SAT_MIN 0x80000000
+#define SAT_MAX 0x7fffffff
+#define STRTOFIX strtosfix32
+
+#include "strtofix.c"
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/strtosfix64.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/strtosfix64.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/strtosfix64.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/strtosfix64.c	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1,28 @@
+/* Convert string to 64-bit signed fixed point.
+   Copyright (C) 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Joseph Myers <joseph@codesourcery.com>, 2006.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#define RETURN_TYPE int64_t
+#define UNSIGNED 0
+#define RETURN_TYPE_BITS 64
+#define SAT_MIN 0x8000000000000000LL
+#define SAT_MAX 0x7fffffffffffffffLL
+#define STRTOFIX strtosfix64
+
+#include "strtofix.c"
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/strtoufix16.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/strtoufix16.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/strtoufix16.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/strtoufix16.c	2007-03-27 14:58:29.000000000 +0200
@@ -0,0 +1,28 @@
+/* Convert string to 16-bit unsigned fixed point.
+   Copyright (C) 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Joseph Myers <joseph@codesourcery.com>, 2006.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#define RETURN_TYPE uint16_t
+#define UNSIGNED 1
+#define RETURN_TYPE_BITS 16
+#define SAT_MIN 0
+#define SAT_MAX 0xffff
+#define STRTOFIX strtoufix16
+
+#include "strtofix.c"
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/strtoufix32.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/strtoufix32.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/strtoufix32.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/strtoufix32.c	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1,28 @@
+/* Convert string to 32-bit unsigned fixed point.
+   Copyright (C) 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Joseph Myers <joseph@codesourcery.com>, 2006.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#define RETURN_TYPE uint32_t
+#define UNSIGNED 1
+#define RETURN_TYPE_BITS 32
+#define SAT_MIN 0
+#define SAT_MAX 0xffffffff
+#define STRTOFIX strtoufix32
+
+#include "strtofix.c"
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/strtoufix64.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/strtoufix64.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/strtoufix64.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/strtoufix64.c	2007-03-27 14:58:31.000000000 +0200
@@ -0,0 +1,28 @@
+/* Convert string to 64-bit unsigned fixed point.
+   Copyright (C) 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Joseph Myers <joseph@codesourcery.com>, 2006.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#define RETURN_TYPE uint64_t
+#define UNSIGNED 1
+#define RETURN_TYPE_BITS 64
+#define SAT_MIN 0
+#define SAT_MAX 0xffffffffffffffffLL
+#define STRTOFIX strtoufix64
+
+#include "strtofix.c"
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_trunc.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_trunc.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_trunc.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_trunc.c	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1 @@
+#include <sysdeps/ieee754/dbl-64/s_trunc.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_truncf.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_truncf.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/s_truncf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/s_truncf.c	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1 @@
+#include <sysdeps/ieee754/flt-32/s_truncf.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/t_sqrt.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/t_sqrt.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/t_sqrt.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/t_sqrt.c	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1 @@
+/* Not needed.  */
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/tst-spepim.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/tst-spepim.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/tst-spepim.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/tst-spepim.c	2007-03-27 14:58:29.000000000 +0200
@@ -0,0 +1,494 @@
+/* Test SPE PIM functions.
+   Copyright (C) 2007 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Joseph Myers <joseph@codesourcery.com>, 2007.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <errno.h>
+#include <fenv.h>
+#include <spe.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+typedef int16_t sint16_t;
+typedef int32_t sint32_t;
+typedef int64_t sint64_t;
+
+#define SAT_MAX_U16	0xffff
+#define SAT_MAX_U32	0xffffffffu
+#define SAT_MAX_U64	0xffffffffffffffffull
+#define SAT_MAX_S16	0x7fff
+#define SAT_MAX_S32	0x7fffffff
+#define SAT_MAX_S64	0x7fffffffffffffffll
+#define SAT_MIN_S16	(-SAT_MAX_S16 - 1)
+#define SAT_MIN_S32	(-SAT_MAX_S32 - 1)
+#define SAT_MIN_S64	(-SAT_MAX_S64 - 1)
+
+/* Test results for a single rounding mode.  For each type of result,
+   store the expected result and the expected errno.  */
+struct res {
+  sint16_t s16;
+  int es16;
+  sint32_t s32;
+  int es32;
+  sint64_t s64;
+  int es64;
+  uint16_t u16;
+  int eu16;
+  uint32_t u32;
+  int eu32;
+  uint64_t u64;
+  int eu64;
+};
+
+struct testcase {
+  /* String to test.  */
+  const char *s;
+  /* Number of junk characters at end.  */
+  size_t njunk;
+  /* Expected results for rounding to nearest, zero, upward and
+     downward.  */
+  struct res res[4];
+};
+
+/* Saturating value.  */
+#define SAT(VAL)	VAL, ERANGE
+/* Unsaturating value.  */
+#define UNSAT(VAL)	VAL, 0
+/* Values saturating for both signed and unsigned.  */
+#define SAT6(VAL0, VAL1, VAL2, VAL3, VAL4, VAL5)	\
+  {							\
+    SAT (VAL0), SAT (VAL1), SAT (VAL2),			\
+    SAT (VAL3), SAT (VAL4), SAT (VAL5)			\
+  }
+#define SAT6_MAX				\
+  SAT6 (SAT_MAX_S16, SAT_MAX_S32, SAT_MAX_S64,	\
+	SAT_MAX_U16, SAT_MAX_U32, SAT_MAX_U64)
+#define SAT6_MIN					\
+  SAT6 (SAT_MIN_S16, SAT_MIN_S32, SAT_MIN_S64, 0, 0, 0)
+/* Values saturating for unsigned but not signed.  */
+#define SATNEG(VAL0, VAL1, VAL2)		\
+  {						\
+    UNSAT (VAL0), UNSAT (VAL1), UNSAT (VAL2),	\
+    SAT (0), SAT (0), SAT (0)			\
+  }
+/* Values not saturating.  */
+#define UNSAT6(VAL0, VAL1, VAL2, VAL3, VAL4, VAL5)	\
+  {							\
+    UNSAT (VAL0), UNSAT (VAL1), UNSAT (VAL2),		\
+    UNSAT (VAL3), UNSAT (VAL4), UNSAT (VAL5)		\
+  }
+/* Results not depending on rounding mode.  */
+#define EXACT_SAT6_MAX				\
+  {						\
+    SAT6_MAX,					\
+    SAT6_MAX,					\
+    SAT6_MAX,					\
+    SAT6_MAX					\
+  }
+#define EXACT_SAT6_MIN				\
+  {						\
+    SAT6_MIN,					\
+    SAT6_MIN,					\
+    SAT6_MIN,					\
+    SAT6_MIN					\
+  }
+#define EXACT_SATNEG(VAL0, VAL1, VAL2)		\
+  {						\
+    SATNEG (VAL0, VAL1, VAL2),			\
+    SATNEG (VAL0, VAL1, VAL2),			\
+    SATNEG (VAL0, VAL1, VAL2),			\
+    SATNEG (VAL0, VAL1, VAL2)			\
+  }
+#define EXACT_UNSAT6(VAL0, VAL1, VAL2, VAL3, VAL4, VAL5)	\
+  {								\
+    UNSAT6 (VAL0, VAL1, VAL2, VAL3, VAL4, VAL5),		\
+    UNSAT6 (VAL0, VAL1, VAL2, VAL3, VAL4, VAL5),		\
+    UNSAT6 (VAL0, VAL1, VAL2, VAL3, VAL4, VAL5),		\
+    UNSAT6 (VAL0, VAL1, VAL2, VAL3, VAL4, VAL5)			\
+  }
+
+static const struct testcase tests[] = {
+  /* Strings evaluating to 0, including INF and NaN (not supported by
+     SPE PIM functions).  */
+  { "", 0, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { "0", 0, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { "00", 0, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { "+0", 0, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { "-0", 0, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { "0.0", 0, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { ".0", 0, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { "0.", 0, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { " \n-0.", 0, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { "0e100000000000000000", 0, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { " \t 0e-100000000000000000", 0, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { "0x0", 0, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { "0x0.", 0, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { "0x.0", 0, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { "0x0.p100000000000000000", 0, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { "-0x0.p002000000000000000", 0, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { "0x.0p-100000000000000000", 0, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { "0x", 1, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { "0x.", 2, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { ".", 1, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { " .", 2, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { "+.", 2, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { " +.", 3, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { " -.", 3, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { "0xp", 2, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { "0x.p", 3, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { "+0x.p", 3, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { "-0x.p0", 4, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { "0x0q", 1, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { "INF", 3, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  { "nan", 3, EXACT_UNSAT6 (0, 0, 0, 0, 0, 0) },
+  /* Strings evaluating to 1.0 or greater, saturating unconditionally.  */
+  { "1", 0, EXACT_SAT6_MAX },
+  { "1.0", 0, EXACT_SAT6_MAX },
+  { "1e0", 0, EXACT_SAT6_MAX },
+  { "10e-1", 0, EXACT_SAT6_MAX },
+  { "0.1e1", 0, EXACT_SAT6_MAX },
+  { "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e-100", 0, EXACT_SAT6_MAX },
+  { "2", 0, EXACT_SAT6_MAX },
+  { "0x1", 0, EXACT_SAT6_MAX },
+  { "0x2p-1", 0, EXACT_SAT6_MAX },
+  { "0x.8p1", 0, EXACT_SAT6_MAX },
+  { "0x.40p2", 0, EXACT_SAT6_MAX },
+  /* Strings evaluating to less than -1.0, saturating unconditionally.  */
+  { "-1.1", 0, EXACT_SAT6_MIN },
+  { "-.11e1", 0, EXACT_SAT6_MIN },
+  { "-11e-1", 0, EXACT_SAT6_MIN },
+  { "-100", 0, EXACT_SAT6_MIN },
+  { "-2", 0, EXACT_SAT6_MIN },
+  { "-0x1.00000000000000000000000001", 0, EXACT_SAT6_MIN },
+  { "-0x2.00000000000000000000000001p-1", 0, EXACT_SAT6_MIN },
+  { "-0x0.80000000000000000000000001p1", 0, EXACT_SAT6_MIN },
+  { "-1.000000000000000000000000000000000000000000000000000000000000000000000000000000001", 0, EXACT_SAT6_MIN },
+  /* Strings evaluating to -1.0 exactly, saturating for unsigned but
+     exactly representable for signed.  */
+  { "-1", 0, EXACT_SATNEG (SAT_MIN_S16, SAT_MIN_S32, SAT_MIN_S64) },
+  { "-1e", 1, EXACT_SATNEG (SAT_MIN_S16, SAT_MIN_S32, SAT_MIN_S64) },
+  { "-1.0", 0, EXACT_SATNEG (SAT_MIN_S16, SAT_MIN_S32, SAT_MIN_S64) },
+  { "-10e-1", 0, EXACT_SATNEG (SAT_MIN_S16, SAT_MIN_S32, SAT_MIN_S64) },
+  { "-.1e+1", 0, EXACT_SATNEG (SAT_MIN_S16, SAT_MIN_S32, SAT_MIN_S64) },
+  { "-.0000000001e+10", 0, EXACT_SATNEG (SAT_MIN_S16, SAT_MIN_S32, SAT_MIN_S64) },
+  { "-10000000000e-10", 0, EXACT_SATNEG (SAT_MIN_S16, SAT_MIN_S32, SAT_MIN_S64) },
+  { "-0x1", 0, EXACT_SATNEG (SAT_MIN_S16, SAT_MIN_S32, SAT_MIN_S64) },
+  { "-0x1p+", 2, EXACT_SATNEG (SAT_MIN_S16, SAT_MIN_S32, SAT_MIN_S64) },
+  { "-0x2p-1", 0, EXACT_SATNEG (SAT_MIN_S16, SAT_MIN_S32, SAT_MIN_S64) },
+  { "-0x4.0p-2", 0, EXACT_SATNEG (SAT_MIN_S16, SAT_MIN_S32, SAT_MIN_S64) },
+  { "-0x8.p-3", 0, EXACT_SATNEG (SAT_MIN_S16, SAT_MIN_S32, SAT_MIN_S64) },
+  { "-0x10p-4", 0, EXACT_SATNEG (SAT_MIN_S16, SAT_MIN_S32, SAT_MIN_S64) },
+  { "-0x.8p1", 0, EXACT_SATNEG (SAT_MIN_S16, SAT_MIN_S32, SAT_MIN_S64) },
+  { "-0x.4p+2", 0, EXACT_SATNEG (SAT_MIN_S16, SAT_MIN_S32, SAT_MIN_S64) },
+  { "-0x.2p+3", 0, EXACT_SATNEG (SAT_MIN_S16, SAT_MIN_S32, SAT_MIN_S64) },
+  { "-0x.1p+4", 0, EXACT_SATNEG (SAT_MIN_S16, SAT_MIN_S32, SAT_MIN_S64) },
+  { "-0x.08p5", 0, EXACT_SATNEG (SAT_MIN_S16, SAT_MIN_S32, SAT_MIN_S64) },
+  /* Strings evaluating to exactly representable values between -1.0
+     and 0.0, saturating for unsigned.  */
+  { "-0.5", 0, EXACT_SATNEG (-0x4000, -0x40000000, -0x4000000000000000ll) },
+  { "-0.5e-", 2, EXACT_SATNEG (-0x4000, -0x40000000, -0x4000000000000000ll) },
+  { "-05e-1", 0, EXACT_SATNEG (-0x4000, -0x40000000, -0x4000000000000000ll) },
+  { "-05000000000e-10", 0, EXACT_SATNEG (-0x4000, -0x40000000, -0x4000000000000000ll) },
+  { "-0.5e0", 0, EXACT_SATNEG (-0x4000, -0x40000000, -0x4000000000000000ll) },
+  { "-0.00000000005e10", 0, EXACT_SATNEG (-0x4000, -0x40000000, -0x4000000000000000ll) },
+  { "-0x.8", 0, EXACT_SATNEG (-0x4000, -0x40000000, -0x4000000000000000ll) },
+  { "-0x1p-1", 0, EXACT_SATNEG (-0x4000, -0x40000000, -0x4000000000000000ll) },
+  { "-0x.4p1", 0, EXACT_SATNEG (-0x4000, -0x40000000, -0x4000000000000000ll) },
+  { "-0.25", 0, EXACT_SATNEG (-0x2000, -0x20000000, -0x2000000000000000ll) },
+  { "-2.5e-1", 0, EXACT_SATNEG (-0x2000, -0x20000000, -0x2000000000000000ll) },
+  { "-0.75", 0, EXACT_SATNEG (-0x6000, -0x60000000, -0x6000000000000000ll) },
+  { "-0.000030517578125", 0, EXACT_SATNEG (-0x0001, -0x00010000, -0x0001000000000000ll) },
+  { "-0.376739501953125", 0, EXACT_SATNEG (-12345, -12345*0x10000, -12345*0x1000000000000ll) },
+  { "-0x.dcba", 0, EXACT_SATNEG (-0x6e5d, -0x6e5d0000, -0x6e5d000000000000ll) },
+  { "-0xd.cbap-4", 0, EXACT_SATNEG (-0x6e5d, -0x6e5d0000, -0x6e5d000000000000ll) },
+  /* Strings evaluating to exactly representable values between 0.0
+     and 1.0.  */
+  { "0.5", 0, EXACT_UNSAT6 (0x4000, 0x40000000, 0x4000000000000000ll, 0x8000, 0x80000000u, 0x8000000000000000ull) },
+  { "0.5e-", 2, EXACT_UNSAT6 (0x4000, 0x40000000, 0x4000000000000000ll, 0x8000, 0x80000000u, 0x8000000000000000ull) },
+  { "05e-1", 0, EXACT_UNSAT6 (0x4000, 0x40000000, 0x4000000000000000ll, 0x8000, 0x80000000u, 0x8000000000000000ull) },
+  { "05000000000e-10", 0, EXACT_UNSAT6 (0x4000, 0x40000000, 0x4000000000000000ll, 0x8000, 0x80000000u, 0x8000000000000000ull) },
+  { "0.5e0", 0, EXACT_UNSAT6 (0x4000, 0x40000000, 0x4000000000000000ll, 0x8000, 0x80000000u, 0x8000000000000000ull) },
+  { "0.00000000005e10", 0, EXACT_UNSAT6 (0x4000, 0x40000000, 0x4000000000000000ll, 0x8000, 0x80000000u, 0x8000000000000000ull) },
+  { "0x.8", 0, EXACT_UNSAT6 (0x4000, 0x40000000, 0x4000000000000000ll, 0x8000, 0x80000000u, 0x8000000000000000ull) },
+  { "0x1p-1", 0, EXACT_UNSAT6 (0x4000, 0x40000000, 0x4000000000000000ll, 0x8000, 0x80000000u, 0x8000000000000000ull) },
+  { "0x.4p1", 0, EXACT_UNSAT6 (0x4000, 0x40000000, 0x4000000000000000ll, 0x8000, 0x80000000u, 0x8000000000000000ull) },
+  { "0.25", 0, EXACT_UNSAT6 (0x2000, 0x20000000, 0x2000000000000000ll, 0x4000, 0x40000000u, 0x4000000000000000ull) },
+  { "2.5e-1", 0, EXACT_UNSAT6 (0x2000, 0x20000000, 0x2000000000000000ll, 0x4000, 0x40000000u, 0x4000000000000000ull) },
+  { "0.75", 0, EXACT_UNSAT6 (0x6000, 0x60000000, 0x6000000000000000ll, 0xc000, 0xc0000000u, 0xc000000000000000ull) },
+  { "0.000030517578125", 0, EXACT_UNSAT6 (0x0001, 0x00010000, 0x0001000000000000ll, 0x0002, 0x00020000u, 0x0002000000000000ull) },
+  { "0.376739501953125", 0, EXACT_UNSAT6 (12345, 12345*0x10000, 12345*0x1000000000000ll, 12345*0x2, 12345*0x20000u, 12345*0x2000000000000ull) },
+  { "0x.dcba", 0, EXACT_UNSAT6 (0x6e5d, 0x6e5d0000, 0x6e5d000000000000ll, 0xdcba, 0xdcba0000u, 0xdcba000000000000ull) },
+  { "0xd.cbap-4", 0, EXACT_UNSAT6 (0x6e5d, 0x6e5d0000, 0x6e5d000000000000ll, 0xdcba, 0xdcba0000u, 0xdcba000000000000ull) },
+  /* Strings evaluating to values between 0.0 and 1.0, depending on
+     rounding mode.  */
+  { "0.1", 0,
+    {
+      UNSAT6 (0xccd, 0xccccccd, 0xccccccccccccccdll, 0x199a, 0x1999999au, 0x199999999999999aull),
+      UNSAT6 (0xccc, 0xccccccc, 0xcccccccccccccccll, 0x1999, 0x19999999u, 0x1999999999999999ull),
+      UNSAT6 (0xccd, 0xccccccd, 0xccccccccccccccdll, 0x199a, 0x1999999au, 0x199999999999999aull),
+      UNSAT6 (0xccc, 0xccccccc, 0xcccccccccccccccll, 0x1999, 0x19999999u, 0x1999999999999999ull)
+    }
+  },
+  { "0.5000152587890625", 0,
+    {
+      UNSAT6 (0x4000, 0x40008000, 0x4000800000000000ll, 0x8001, 0x80010000u, 0x8001000000000000ull),
+      UNSAT6 (0x4000, 0x40008000, 0x4000800000000000ll, 0x8001, 0x80010000u, 0x8001000000000000ull),
+      UNSAT6 (0x4001, 0x40008000, 0x4000800000000000ll, 0x8001, 0x80010000u, 0x8001000000000000ull),
+      UNSAT6 (0x4000, 0x40008000, 0x4000800000000000ll, 0x8001, 0x80010000u, 0x8001000000000000ull)
+    }
+  },
+  { "0.50001525878906250000000000000000000000000000000000000000000000000000000000001", 0,
+    {
+      UNSAT6 (0x4001, 0x40008000, 0x4000800000000000ll, 0x8001, 0x80010000u, 0x8001000000000000ull),
+      UNSAT6 (0x4000, 0x40008000, 0x4000800000000000ll, 0x8001, 0x80010000u, 0x8001000000000000ull),
+      UNSAT6 (0x4001, 0x40008001, 0x4000800000000001ll, 0x8002, 0x80010001u, 0x8001000000000001ull),
+      UNSAT6 (0x4000, 0x40008000, 0x4000800000000000ll, 0x8001, 0x80010000u, 0x8001000000000000ull)
+    }
+  },
+  { "0.50000000000000000008131516293641283255055896006524562835693359375", 0,
+    {
+      UNSAT6 (0x4000, 0x40000000, 0x4000000000000001ll, 0x8000, 0x80000000u, 0x8000000000000002ull),
+      UNSAT6 (0x4000, 0x40000000, 0x4000000000000000ll, 0x8000, 0x80000000u, 0x8000000000000001ull),
+      UNSAT6 (0x4001, 0x40000001, 0x4000000000000001ll, 0x8001, 0x80000001u, 0x8000000000000002ull),
+      UNSAT6 (0x4000, 0x40000000, 0x4000000000000000ll, 0x8000, 0x80000000u, 0x8000000000000001ull)
+    }
+  },
+  { "0.50000000000000000008131516293641283255055896006524562835693359376", 0,
+    {
+      UNSAT6 (0x4000, 0x40000000, 0x4000000000000001ll, 0x8000, 0x80000000u, 0x8000000000000002ull),
+      UNSAT6 (0x4000, 0x40000000, 0x4000000000000000ll, 0x8000, 0x80000000u, 0x8000000000000001ull),
+      UNSAT6 (0x4001, 0x40000001, 0x4000000000000001ll, 0x8001, 0x80000001u, 0x8000000000000002ull),
+      UNSAT6 (0x4000, 0x40000000, 0x4000000000000000ll, 0x8000, 0x80000000u, 0x8000000000000001ull)
+    }
+  },
+  { "0.50000000000000000008131516293641283255055896006524562835693359374", 0,
+    {
+      UNSAT6 (0x4000, 0x40000000, 0x4000000000000001ll, 0x8000, 0x80000000u, 0x8000000000000001ull),
+      UNSAT6 (0x4000, 0x40000000, 0x4000000000000000ll, 0x8000, 0x80000000u, 0x8000000000000001ull),
+      UNSAT6 (0x4001, 0x40000001, 0x4000000000000001ll, 0x8001, 0x80000001u, 0x8000000000000002ull),
+      UNSAT6 (0x4000, 0x40000000, 0x4000000000000000ll, 0x8000, 0x80000000u, 0x8000000000000001ull)
+    }
+  },
+  { "0x0.80000000000000018", 0,
+    {
+      UNSAT6 (0x4000, 0x40000000, 0x4000000000000001ll, 0x8000, 0x80000000u, 0x8000000000000002ull),
+      UNSAT6 (0x4000, 0x40000000, 0x4000000000000000ll, 0x8000, 0x80000000u, 0x8000000000000001ull),
+      UNSAT6 (0x4001, 0x40000001, 0x4000000000000001ll, 0x8001, 0x80000001u, 0x8000000000000002ull),
+      UNSAT6 (0x4000, 0x40000000, 0x4000000000000000ll, 0x8000, 0x80000000u, 0x8000000000000001ull)
+    }
+  },
+  { "0x0.80000000000000017", 0,
+    {
+      UNSAT6 (0x4000, 0x40000000, 0x4000000000000001ll, 0x8000, 0x80000000u, 0x8000000000000001ull),
+      UNSAT6 (0x4000, 0x40000000, 0x4000000000000000ll, 0x8000, 0x80000000u, 0x8000000000000001ull),
+      UNSAT6 (0x4001, 0x40000001, 0x4000000000000001ll, 0x8001, 0x80000001u, 0x8000000000000002ull),
+      UNSAT6 (0x4000, 0x40000000, 0x4000000000000000ll, 0x8000, 0x80000000u, 0x8000000000000001ull)
+    }
+  },
+  /* Strings evaluating to values between -1.0 and 0.0, depending on
+     rounding mode.  */
+  { "-0.1", 0,
+    {
+      SATNEG (-0xccd, -0xccccccd, -0xccccccccccccccdll),
+      SATNEG (-0xccc, -0xccccccc, -0xcccccccccccccccll),
+      SATNEG (-0xccc, -0xccccccc, -0xcccccccccccccccll),
+      SATNEG (-0xccd, -0xccccccd, -0xccccccccccccccdll)
+    }
+  },
+  { "-0.5000000000000000001626303258728256651011179201304912567138671875", 0,
+    {
+      SATNEG (-0x4000, -0x40000000, -0x4000000000000002ll),
+      SATNEG (-0x4000, -0x40000000, -0x4000000000000001ll),
+      SATNEG (-0x4000, -0x40000000, -0x4000000000000001ll),
+      SATNEG (-0x4001, -0x40000001, -0x4000000000000002ll)
+    }
+  },
+  { "-0.5000000000000000001626303258728256651011179201304912567138671874", 0,
+    {
+      SATNEG (-0x4000, -0x40000000, -0x4000000000000001ll),
+      SATNEG (-0x4000, -0x40000000, -0x4000000000000001ll),
+      SATNEG (-0x4000, -0x40000000, -0x4000000000000001ll),
+      SATNEG (-0x4001, -0x40000001, -0x4000000000000002ll)
+    }
+  },
+  { "-0.5000000000000000001626303258728256651011179201304912567138671876", 0,
+    {
+      SATNEG (-0x4000, -0x40000000, -0x4000000000000002ll),
+      SATNEG (-0x4000, -0x40000000, -0x4000000000000001ll),
+      SATNEG (-0x4000, -0x40000000, -0x4000000000000001ll),
+      SATNEG (-0x4001, -0x40000001, -0x4000000000000002ll)
+    }
+  },
+  { "-0x.8000000000000003", 0,
+    {
+      SATNEG (-0x4000, -0x40000000, -0x4000000000000002ll),
+      SATNEG (-0x4000, -0x40000000, -0x4000000000000001ll),
+      SATNEG (-0x4000, -0x40000000, -0x4000000000000001ll),
+      SATNEG (-0x4001, -0x40000001, -0x4000000000000002ll)
+    }
+  },
+  { "-0x.8000000000000002f", 0,
+    {
+      SATNEG (-0x4000, -0x40000000, -0x4000000000000001ll),
+      SATNEG (-0x4000, -0x40000000, -0x4000000000000001ll),
+      SATNEG (-0x4000, -0x40000000, -0x4000000000000001ll),
+      SATNEG (-0x4001, -0x40000001, -0x4000000000000002ll)
+    }
+  },
+  /* Strings evaluating very close to 1.0, saturation depending on
+     rounding mode.  */
+  { "0x.fffe1", 0,
+    {
+      { UNSAT (0x7fff), UNSAT (0x7fff0800), UNSAT (0x7fff080000000000ll), UNSAT (0xfffe), UNSAT (0xfffe1000u), UNSAT (0xfffe100000000000ull) },
+      { UNSAT (0x7fff), UNSAT (0x7fff0800), UNSAT (0x7fff080000000000ll), UNSAT (0xfffe), UNSAT (0xfffe1000u), UNSAT (0xfffe100000000000ull) },
+      { SAT (0x7fff), UNSAT (0x7fff0800), UNSAT (0x7fff080000000000ll), UNSAT (0xffff), UNSAT (0xfffe1000u), UNSAT (0xfffe100000000000ull) },
+      { UNSAT (0x7fff), UNSAT (0x7fff0800), UNSAT (0x7fff080000000000ll), UNSAT (0xfffe), UNSAT (0xfffe1000u), UNSAT (0xfffe100000000000ull) }
+    }
+  },
+  { "0x.ffff8", 0,
+    {
+      { SAT (0x7fff), UNSAT (0x7fffc000), UNSAT (0x7fffc00000000000ll), SAT (0xffff), UNSAT (0xffff8000u), UNSAT (0xffff800000000000ull) },
+      { UNSAT (0x7fff), UNSAT (0x7fffc000), UNSAT (0x7fffc00000000000ll), UNSAT (0xffff), UNSAT (0xffff8000u), UNSAT (0xffff800000000000ull) },
+      { SAT (0x7fff), UNSAT (0x7fffc000), UNSAT (0x7fffc00000000000ll), SAT (0xffff), UNSAT (0xffff8000u), UNSAT (0xffff800000000000ull) },
+      { UNSAT (0x7fff), UNSAT (0x7fffc000), UNSAT (0x7fffc00000000000ll), UNSAT (0xffff), UNSAT (0xffff8000u), UNSAT (0xffff800000000000ull) }
+    }
+  },
+  { "0x.fffffffffffffffff", 0,
+    {
+      { SAT (0x7fff), SAT (0x7fffffff), SAT (0x7fffffffffffffffll), SAT (0xffff), SAT (0xffffffffu), SAT (0xffffffffffffffffull) },
+      { UNSAT (0x7fff), UNSAT (0x7fffffff), UNSAT (0x7fffffffffffffffll), UNSAT (0xffff), UNSAT (0xffffffffu), UNSAT (0xffffffffffffffffull) },
+      { SAT (0x7fff), SAT (0x7fffffff), SAT (0x7fffffffffffffffll), SAT (0xffff), SAT (0xffffffffu), SAT (0xffffffffffffffffull) },
+      { UNSAT (0x7fff), UNSAT (0x7fffffff), UNSAT (0x7fffffffffffffffll), UNSAT (0xffff), UNSAT (0xffffffffu), UNSAT (0xffffffffffffffffull) }
+    }
+  },
+  /* Strings evaluating very close to -1.0, may round to -1 but only
+     saturate for unsigned.  */
+  { "-0x.fffe1", 0,
+    {
+      SATNEG (-0x7fff, -0x7fff0800, -0x7fff080000000000ll),
+      SATNEG (-0x7fff, -0x7fff0800, -0x7fff080000000000ll),
+      SATNEG (-0x7fff, -0x7fff0800, -0x7fff080000000000ll),
+      SATNEG (SAT_MIN_S16, -0x7fff0800, -0x7fff080000000000ll)
+    }
+  },
+  { "-0x.ffffffffffffffff", 0,
+    {
+      SATNEG (SAT_MIN_S16, SAT_MIN_S32, SAT_MIN_S64),
+      SATNEG (-0x7fff, -0x7fffffff, -0x7fffffffffffffffll),
+      SATNEG (-0x7fff, -0x7fffffff, -0x7fffffffffffffffll),
+      SATNEG (SAT_MIN_S16, SAT_MIN_S32, SAT_MIN_S64)
+    }
+  }
+};
+
+static const int rounding_modes[4] = {
+  FE_TONEAREST,
+  FE_TOWARDZERO,
+  FE_UPWARD,
+  FE_DOWNWARD
+};
+
+static const char *const mode_names[4] = {
+  "FE_TONEAREST",
+  "FE_TOWARDZERO",
+  "FE_UPWARD",
+  "FE_DOWNWARD"
+};
+
+int
+main (void)
+{
+  int passes = 0;
+  int fails = 0;
+  size_t i;
+  for (i = 0; i < sizeof (tests) / sizeof (tests[0]); i++)
+    {
+      size_t j;
+      for (j = 0; j < 4; j++)
+	{
+	  if (fesetround (rounding_modes[j]) != 0)
+	    {
+	      printf ("fesetround (%s) failed.\n", mode_names[j]);
+	      abort ();
+	    }
+#define DO_TEST(SU, SZ, PR)						\
+	  do {								\
+	    SU##int##SZ##_t expret = tests[i].res[j].SU##SZ;		\
+	    int experr = tests[i].res[j].e##SU##SZ;			\
+	    size_t explen = strlen (tests[i].s) - tests[i].njunk;	\
+	    SU##int##SZ##_t ret0, ret1;					\
+	    int reterr;							\
+	    size_t retlen;						\
+	    char *ep;							\
+	    errno = 0;							\
+	    ret0 = strto##SU##fix##SZ (tests[i].s, &ep);		\
+	    reterr = errno;						\
+	    retlen = ep - tests[i].s;					\
+	    if (ret0 == expret)						\
+	      passes++;							\
+	    else							\
+	      {								\
+		fails++;						\
+		printf ("strto"#SU"fix"#SZ" (\"%s\") in mode %s "	\
+			"returned %0"PR"x, expected %0"PR"x.\n",	\
+			tests[i].s, mode_names[j], ret0, expret);	\
+	      }								\
+	    if (reterr == experr)					\
+	      passes++;							\
+	    else							\
+	      {								\
+		fails++;						\
+		printf ("strto"#SU"fix"#SZ" (\"%s\") in mode %s "	\
+			"left errno as %d, expected %d.\n",		\
+			tests[i].s, mode_names[j], reterr, experr);	\
+	      }								\
+	    if (retlen == explen)					\
+	      passes++;							\
+	    else							\
+	      {								\
+		fails++;						\
+		printf ("strto"#SU"fix"#SZ" (\"%s\") in mode %s "	\
+			"consumed %zu characters, expected %zu.\n",	\
+			tests[i].s, mode_names[j], retlen, explen);	\
+	      }								\
+	    if (experr == 0)						\
+	      {								\
+		ret1 = ato##SU##fix##SZ (tests[i].s);			\
+		if (ret1 == expret)					\
+		  passes++;						\
+		else							\
+		  {							\
+		    fails++;						\
+		    printf ("ato"#SU"fix"#SZ" (\"%s\") in mode %s "	\
+			    "returned %0"PR"x, expected %0"PR"x.\n",	\
+			    tests[i].s, mode_names[j], ret1, expret);	\
+		  }							\
+	      }								\
+	  } while (0)
+	  DO_TEST (s, 16, "4h");
+	  DO_TEST (s, 32, "8");
+	  DO_TEST (s, 64, "16ll");
+	  DO_TEST (u, 16, "4h");
+	  DO_TEST (u, 32, "8");
+	  DO_TEST (u, 64, "16ll");
+	}
+    }
+  printf ("Number of passes: %d\nNumber of failures: %d\n", passes, fails);
+  return fails != 0;
+}
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/Versions glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/Versions
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/Versions	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/Versions	2007-03-27 14:58:31.000000000 +0200
@@ -0,0 +1,8 @@
+libc {
+  GLIBC_2.3.3 {
+    atosfix16; atosfix32; atosfix64;
+    atoufix16; atoufix32; atoufix64;
+    strtosfix16; strtosfix32; strtosfix64;
+    strtoufix16; strtoufix32; strtoufix64;
+  }
+}
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/w_sqrt.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/w_sqrt.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/w_sqrt.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/w_sqrt.c	2007-03-27 14:58:31.000000000 +0200
@@ -0,0 +1 @@
+#include <math/w_sqrt.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/w_sqrtf.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/w_sqrtf.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/fpu/w_sqrtf.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/fpu/w_sqrtf.c	2007-03-27 14:58:30.000000000 +0200
@@ -0,0 +1 @@
+#include <math/w_sqrtf.c>
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/soft-fp/fraiseexcept-soft.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/soft-fp/fraiseexcept-soft.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/soft-fp/fraiseexcept-soft.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/soft-fp/fraiseexcept-soft.c	2007-03-27 14:58:32.000000000 +0200
@@ -0,0 +1,25 @@
+/* Raise given exceptions.
+   Copyright (C) 2004 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Aldy Hernandez <aldyh@redhat.com>, 2004.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <fenv_libc.h>
+#include <bp-sym.h>
+
+#define __FERAISEEXCEPT_INTERNAL __feraiseexcept_soft
+#include "../spe-raise.c"
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/soft-fp/Makefile glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/soft-fp/Makefile
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/soft-fp/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/soft-fp/Makefile	2007-03-27 14:58:32.000000000 +0200
@@ -0,0 +1,4 @@
+# Double precision floating point gets emulated.
+ifeq ($(subdir),soft-fp)
+sysdep_routines += $(gcc-double-routines) fraiseexcept-soft
+endif
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/soft-fp/sfp-machine.h glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/soft-fp/sfp-machine.h
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/soft-fp/sfp-machine.h	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/soft-fp/sfp-machine.h	2007-03-27 14:58:32.000000000 +0200
@@ -0,0 +1,60 @@
+#ifndef _SFP_MACHINE_H_
+#define _SFP_MACHINE_H_
+#include <fenv_libc.h>
+
+#define _FP_W_TYPE_SIZE		32
+#define _FP_W_TYPE		unsigned long
+#define _FP_WS_TYPE		signed long
+#define _FP_I_TYPE		long
+
+#define _FP_MUL_MEAT_S(R,X,Y)				\
+  _FP_MUL_MEAT_1_wide(_FP_WFRACBITS_S,R,X,Y,umul_ppmm)
+#define _FP_MUL_MEAT_D(R,X,Y)				\
+  _FP_MUL_MEAT_2_wide(_FP_WFRACBITS_D,R,X,Y,umul_ppmm)
+#define _FP_MUL_MEAT_Q(R,X,Y)				\
+  _FP_MUL_MEAT_4_wide(_FP_WFRACBITS_Q,R,X,Y,umul_ppmm)
+
+#define _FP_DIV_MEAT_S(R,X,Y)	_FP_DIV_MEAT_1_loop(S,R,X,Y)
+#define _FP_DIV_MEAT_D(R,X,Y)	_FP_DIV_MEAT_2_udiv(D,R,X,Y)
+#define _FP_DIV_MEAT_Q(R,X,Y)	_FP_DIV_MEAT_4_udiv(Q,R,X,Y)
+
+#define _FP_NANFRAC_S		((_FP_QNANBIT_S << 1) - 1)
+#define _FP_NANFRAC_D		((_FP_QNANBIT_D << 1) - 1), -1
+#define _FP_NANFRAC_Q		((_FP_QNANBIT_Q << 1) - 1), -1, -1, -1
+#define _FP_NANSIGN_S		0
+#define _FP_NANSIGN_D		0
+#define _FP_NANSIGN_Q		0
+
+#define _FP_KEEPNANFRACP 1
+
+/* Someone please check this.  */
+#define _FP_CHOOSENAN(fs, wc, R, X, Y, OP)			\
+  do {								\
+    if ((_FP_FRAC_HIGH_RAW_##fs(X) & _FP_QNANBIT_##fs)		\
+	&& !(_FP_FRAC_HIGH_RAW_##fs(Y) & _FP_QNANBIT_##fs))	\
+      {								\
+	R##_s = Y##_s;						\
+	_FP_FRAC_COPY_##wc(R,Y);				\
+      }								\
+    else							\
+      {								\
+	R##_s = X##_s;						\
+	_FP_FRAC_COPY_##wc(R,X);				\
+      }								\
+    R##_c = FP_CLS_NAN;						\
+  } while (0)
+
+/* Exception flags.  We use the bit positions of the appropriate bits
+   in the FPEFSCR, which also correspond to the FE_* bits.  This makes
+   everything easier ;-).  */
+#define FP_EX_INEXACT         (1 << (63 - 42))
+#define FP_EX_INVALID         (1 << (63 - 43))
+#define FP_EX_DIVZERO         (1 << (63 - 44))
+#define FP_EX_UNDERFLOW       (1 << (63 - 45))
+#define FP_EX_OVERFLOW        (1 << (63 - 46))
+
+/* This will work inasmuch as FP_EX_* are the same as FE_*.  */
+#define FP_HANDLE_EXCEPTIONS  __feraiseexcept_soft (_fex)
+
+#define FP_ROUNDMODE          (fegetenv_register() & 0x3)
+#endif /* _SFP_MACHINE_H_ */
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/soft-fp/Subdirs glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/soft-fp/Subdirs
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/soft-fp/Subdirs	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/soft-fp/Subdirs	2007-03-27 14:58:32.000000000 +0200
@@ -0,0 +1 @@
+soft-fp
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/soft-fp/Versions glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/soft-fp/Versions
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/soft-fp/Versions	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/soft-fp/Versions	2007-03-27 14:58:32.000000000 +0200
@@ -0,0 +1,19 @@
+libc {
+  GLIBC_2.3.3 {
+    __feraiseexcept_soft;
+    __adddf3; __truncdfsf2;
+    __divdf3; __eqdf2;
+    __extendsfdf2; __fixdfdi; __fixdfsi; __fixsfdi;
+    __fixtfdi;
+    __fixunsdfdi; __fixunsdfsi;
+    __floatdidf; __floatsidf;
+    __gedf2; __ledf2; __muldf3;
+    __negdf2; __sqrtdf2; __subdf3;
+    __truncdfsf2;
+  }
+  GLIBC_2.5 {
+    __floatundidf; __floatunsidf;
+    __unorddf2; __nedf2;
+    __gtdf2; __ltdf2;
+  }
+}
diff -Naur glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/spe-raise.c glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/spe-raise.c
--- glibc-ports-2.5/sysdeps/powerpc/powerpc32/e500/spe-raise.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/powerpc32/e500/spe-raise.c	2007-03-27 14:58:32.000000000 +0200
@@ -0,0 +1,68 @@
+/* Raise given exceptions.
+   Copyright (C) 1997,99,2000,01,02,04 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <fenv_libc.h>
+#include <bp-sym.h>
+
+int
+__FERAISEEXCEPT_INTERNAL (int excepts)
+{
+  unsigned long f;
+
+  f = fegetenv_register ();
+  f |= (excepts & FE_ALL_EXCEPT);
+  fesetenv_register (f);
+
+  /* Force the operations that cause the exceptions.  */
+  if ((FE_INVALID & excepts) != 0)
+    {
+      /* ?? Does not set sticky bit ?? */
+      /* 0 / 0 */
+      asm volatile ("efsdiv %0,%0,%1" : : "r" (0), "r" (0));
+    }
+
+  if ((FE_DIVBYZERO & excepts) != 0)
+    {
+      /* 1.0 / 0.0 */
+      asm volatile ("efsdiv %0,%0,%1" : : "r" (1.0F), "r" (0));
+    }
+
+  if ((FE_OVERFLOW & excepts) != 0)
+    {
+      /* ?? Does not set sticky bit ?? */
+      /* Largest normalized number plus itself.  */
+      asm volatile ("efsadd %0,%0,%1" : : "r" (0x7f7fffff), "r" (0x7f7fffff));
+    }
+
+  if ((FE_UNDERFLOW & excepts) != 0)
+    {
+      /* ?? Does not set sticky bit ?? */
+      /* Smallest normalized number times itself.  */
+      asm volatile ("efsmul %0,%0,%1" : : "r" (0x800000), "r" (0x800000));
+    }
+
+  if ((FE_INEXACT & excepts) != 0)
+    {
+      /* Smallest normalized minus 1.0 raises the inexact flag.  */
+      asm volatile ("efssub %0,%0,%1" : : "r" (0x00800000), "r" (1.0F));
+    }
+
+  /* Success.  */
+  return 0;
+}
diff -Naur glibc-ports-2.5/sysdeps/powerpc/preconfigure glibc-ports-2.5-cs/sysdeps/powerpc/preconfigure
--- glibc-ports-2.5/sysdeps/powerpc/preconfigure	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/preconfigure	2007-03-27 14:58:38.000000000 +0200
@@ -0,0 +1,20 @@
+# Check for E500.
+
+case "$machine" in
+powerpc)
+	if test "$with_fp" = "yes"; then
+	  variant=`(echo "#ifdef __NO_FPRS__"
+	      echo "#ifdef _SOFT_DOUBLE"
+	      echo "e500/single"
+	      echo "#else"
+	      echo "e500"
+	      echo "#endif"
+	      echo "#endif") |
+	     $CC $CFLAGS $CPPFLAGS -E - |
+	     grep '^[a-z]'`
+	  if test -n "$variant"; then
+	    base_machine=powerpc machine=powerpc/powerpc32/$variant
+	  fi
+	fi
+	;;
+esac
diff -Naur glibc-ports-2.5/sysdeps/powerpc/soft-fp/sfp-machine.h glibc-ports-2.5-cs/sysdeps/powerpc/soft-fp/sfp-machine.h
--- glibc-ports-2.5/sysdeps/powerpc/soft-fp/sfp-machine.h	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/powerpc/soft-fp/sfp-machine.h	2007-03-27 14:58:38.000000000 +0200
@@ -0,0 +1,63 @@
+#define _FP_W_TYPE_SIZE		32
+#define _FP_W_TYPE		unsigned long
+#define _FP_WS_TYPE		signed long
+#define _FP_I_TYPE		long
+
+#define _FP_MUL_MEAT_S(R,X,Y)				\
+  _FP_MUL_MEAT_1_wide(_FP_WFRACBITS_S,R,X,Y,umul_ppmm)
+#define _FP_MUL_MEAT_D(R,X,Y)				\
+  _FP_MUL_MEAT_2_wide(_FP_WFRACBITS_D,R,X,Y,umul_ppmm)
+#define _FP_MUL_MEAT_Q(R,X,Y)				\
+  _FP_MUL_MEAT_4_wide(_FP_WFRACBITS_Q,R,X,Y,umul_ppmm)
+
+#define _FP_DIV_MEAT_S(R,X,Y)	_FP_DIV_MEAT_1_loop(S,R,X,Y)
+#define _FP_DIV_MEAT_D(R,X,Y)	_FP_DIV_MEAT_2_udiv(D,R,X,Y)
+#define _FP_DIV_MEAT_Q(R,X,Y)	_FP_DIV_MEAT_4_udiv(Q,R,X,Y)
+
+#define _FP_NANFRAC_S		((_FP_QNANBIT_S << 1) - 1)
+#define _FP_NANFRAC_D		((_FP_QNANBIT_D << 1) - 1), -1
+#define _FP_NANFRAC_Q		((_FP_QNANBIT_Q << 1) - 1), -1, -1, -1
+#define _FP_NANSIGN_S		0
+#define _FP_NANSIGN_D		0
+#define _FP_NANSIGN_Q		0
+
+#define _FP_KEEPNANFRACP 1
+
+/* Someone please check this.  */
+#define _FP_CHOOSENAN(fs, wc, R, X, Y, OP)			\
+  do {								\
+    if ((_FP_FRAC_HIGH_RAW_##fs(X) & _FP_QNANBIT_##fs)		\
+	&& !(_FP_FRAC_HIGH_RAW_##fs(Y) & _FP_QNANBIT_##fs))	\
+      {								\
+	R##_s = Y##_s;						\
+	_FP_FRAC_COPY_##wc(R,Y);				\
+      }								\
+    else							\
+      {								\
+	R##_s = X##_s;						\
+	_FP_FRAC_COPY_##wc(R,X);				\
+      }								\
+    R##_c = FP_CLS_NAN;						\
+  } while (0)
+
+/* Exception flags.  We use the bit positions of the appropriate bits
+   in the FPSCR, which also correspond to the FE_* bits.  This makes
+   everything easier ;-).  */
+#define FP_EX_INVALID         (1 << (31 - 2))
+#define FP_EX_OVERFLOW        (1 << (31 - 3))
+#define FP_EX_UNDERFLOW       (1 << (31 - 4))
+#define FP_EX_DENORM          FP_EX_UNDERFLOW
+#define FP_EX_DIVZERO         (1 << (31 - 5))
+#define FP_EX_INEXACT         (1 << (31 - 6))
+
+#define FP_HANDLE_EXCEPTIONS  __simulate_exceptions (_fex)
+#define FP_ROUNDMODE          __sim_round_mode
+
+extern int __sim_exceptions;
+libc_hidden_proto (__sim_exceptions);
+extern int __sim_disabled_exceptions;
+libc_hidden_proto (__sim_disabled_exceptions);
+extern int __sim_round_mode;
+libc_hidden_proto (__sim_round_mode);
+
+extern void __simulate_exceptions (int x) attribute_hidden;
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/arm/nptl/bits/atomic.h glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/arm/nptl/bits/atomic.h
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/arm/nptl/bits/atomic.h	2005-11-16 20:03:42.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/arm/nptl/bits/atomic.h	2007-03-27 14:59:18.000000000 +0200
@@ -37,6 +37,10 @@
 
 void __arm_link_error (void);
 
+#ifdef UP
+
+/* We require kernel assisted barriers for SMP safety, so it is only worth
+   defining this on UP.  */
 #define atomic_exchange_acq(mem, newvalue)				      \
   ({ __typeof (*mem) result;						      \
      if (sizeof (*mem) == 1)						      \
@@ -54,6 +58,17 @@
        }								      \
      result; })
 
+#else
+
+#define atomic_full_barrier() \
+     __asm__ __volatile__						      \
+	     ("mov\tip, #0xffff0fff\n\t"				      \
+	      "mov\tlr, pc\n\t"						      \
+	      "add\tpc, ip, #(0xffff0fa0 - 0xffff0fff)"			      \
+	      : : : "ip", "lr", "cc", "memory");
+
+#endif
+
 /* Atomic compare and exchange.  This sequence relies on the kernel to
    provide a compare and exchange operation which is atomic on the
    current architecture, either via cleverness on pre-ARMv6 or via
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/arm/nptl/lowlevellock.h glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/arm/nptl/lowlevellock.h
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/arm/nptl/lowlevellock.h	2006-08-04 20:56:15.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/arm/nptl/lowlevellock.h	2007-03-27 14:59:20.000000000 +0200
@@ -99,43 +99,11 @@
   })
 
 
-static inline int __attribute__((always_inline))
-__lll_mutex_trylock (int *futex)
-{
-  int flag = 1, old;
-  asm volatile (
-    "\tswp	%[old], %[flag], [%[futex]]	@ try to take the lock\n"
-    "\tcmp	%[old], #1			@ check old lock value\n"
-    "\tmovlo	%[flag], #0			@ if we got it, return 0\n"
-    "\tswphi	%[flag], %[old], [%[futex]]	@ if it was contested,\n"
-    "						@ restore the contested flag,\n"
-    "						@ and check whether that won."
-    : [futex] "+&r" (futex), [flag] "+&r" (flag), [old] "=&r" (old)
-    : : "memory" );
-
-  return flag;
-}
-#define lll_mutex_trylock(lock)	__lll_mutex_trylock (&(lock))
-
-
-static inline int __attribute__((always_inline))
-__lll_mutex_cond_trylock (int *futex)
-{
-  int flag = 2, old;
-  asm volatile (
-    "\tswp	%[old], %[flag], [%[futex]]	@ try to take the lock\n"
-    "\tcmp	%[old], #1			@ check old lock value\n"
-    "\tmovlo	%[flag], #0			@ if we got it, return 0\n"
-    "\tswphi	%[flag], %[old], [%[futex]]	@ if it was contested,\n"
-    "						@ restore the contested flag,\n"
-    "						@ and check whether that won."
-    : [futex] "+&r" (futex), [flag] "+&r" (flag), [old] "=&r" (old)
-    : : "memory" );
-
-  return flag;
-}
-#define lll_mutex_cond_trylock(lock)	__lll_mutex_cond_trylock (&(lock))
+#define lll_mutex_trylock(lock)	\
+  atomic_compare_and_exchange_val_acq(&(lock), 1, 0)
 
+#define lll_mutex_cond_trylock(lock)	\
+  atomic_compare_and_exchange_val_acq(&(lock), 2, 0)
 
 static inline int __attribute__((always_inline))
 __lll_robust_mutex_trylock(int *futex, int id)
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/m68k/bits/sigcontext.h glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/m68k/bits/sigcontext.h
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/m68k/bits/sigcontext.h	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/m68k/bits/sigcontext.h	2007-03-27 14:59:41.000000000 +0200
@@ -0,0 +1,62 @@
+/* Copyright (C) 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#if !defined _SIGNAL_H && !defined _SYS_UCONTEXT_H
+# error "Never use <bits/sigcontext.h> directly; include <signal.h> instead."
+#endif
+
+#ifndef _BITS_SIGCONTEXT_H
+#define _BITS_SIGCONTEXT_H 1
+
+struct sigcontext {
+  unsigned long sc_mask;
+  unsigned long sc_usp;
+  unsigned long sc_d0;
+  unsigned long sc_d1;
+#ifdef __mcoldfire__
+  unsigned long sc_d2;
+  unsigned long sc_d3;
+  unsigned long sc_d4;
+  unsigned long sc_d5;
+  unsigned long sc_d6;
+  unsigned long sc_d7;
+#endif
+  unsigned long sc_a0;
+  unsigned long sc_a1;
+#ifdef __mcoldfire__
+  unsigned long sc_a2;
+  unsigned long sc_a3;
+  unsigned long sc_a4;
+  unsigned long sc_a5;
+  unsigned long sc_a6;
+#endif
+  unsigned short sc_sr;
+  unsigned long sc_pc;
+  unsigned short sc_formatvec;
+#ifdef __mcoldfire__
+  unsigned long sc_fpregs[8][2];
+  unsigned long sc_fpcntl[3];
+  unsigned char sc_fpstate[16];
+#else
+  unsigned long sc_fpregs[2*3];
+  unsigned long sc_fpcntl[3];
+  unsigned char sc_fpstate[216];
+#endif
+};
+
+#endif
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/m68k/bits/siginfo.h glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/m68k/bits/siginfo.h
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/m68k/bits/siginfo.h	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/m68k/bits/siginfo.h	2007-03-27 14:59:40.000000000 +0200
@@ -0,0 +1,316 @@
+/* siginfo_t, sigevent and constants.  m68k linux version.
+   Copyright (C) 1997-2002, 2003 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#if !defined _SIGNAL_H && !defined __need_siginfo_t \
+    && !defined __need_sigevent_t
+# error "Never include this file directly.  Use <signal.h> instead"
+#endif
+
+#include <bits/wordsize.h>
+
+#if (!defined __have_sigval_t \
+     && (defined _SIGNAL_H || defined __need_siginfo_t \
+	 || defined __need_sigevent_t))
+# define __have_sigval_t	1
+
+/* Type for data associated with a signal.  */
+typedef union sigval
+  {
+    int sival_int;
+    void *sival_ptr;
+  } sigval_t;
+#endif
+
+#if (!defined __have_siginfo_t \
+     && (defined _SIGNAL_H || defined __need_siginfo_t))
+# define __have_siginfo_t	1
+
+# define __SI_MAX_SIZE     128
+# if __WORDSIZE == 64
+#  define __SI_PAD_SIZE     ((__SI_MAX_SIZE / sizeof (int)) - 4)
+# else
+#  define __SI_PAD_SIZE     ((__SI_MAX_SIZE / sizeof (int)) - 3)
+# endif
+
+typedef struct siginfo
+  {
+    int si_signo;		/* Signal number.  */
+    int si_errno;		/* If non-zero, an errno value associated with
+				   this signal, as defined in <errno.h>.  */
+    int si_code;		/* Signal code.  */
+
+    union
+      {
+	int _pad[__SI_PAD_SIZE];
+
+	 /* kill().  */
+	struct
+	  {
+	    __pid_t si_pid;	/* Sending process ID.  */
+	    unsigned short __pad; /* 16-bit version of si_uid.  */
+	    __uid_t si_uid;	/* Real user ID of sending process.  */
+	  } _kill;
+
+	/* POSIX.1b timers.  */
+	struct
+	  {
+	    int si_tid;		/* Timer ID.  */
+	    int si_overrun;	/* Overrun count.  */
+	    sigval_t si_sigval;	/* Signal value.  */
+	  } _timer;
+
+	/* POSIX.1b signals.  */
+	struct
+	  {
+	    __pid_t si_pid;	/* Sending process ID.  */
+	    unsigned short __pad; /* 16-bit version of si_uid.  */
+	    sigval_t si_sigval;	/* Signal value.  */
+	    __uid_t si_uid;	/* Real user ID of sending process.  */
+	  } _rt;
+
+	/* SIGCHLD.  */
+	struct
+	  {
+	    __pid_t si_pid;	/* Which child.  */
+	    unsigned short __pad; /* 16-bit version of si_uid.  */
+	    int si_status;	/* Exit value or signal.  */
+	    __clock_t si_utime;
+	    __clock_t si_stime;
+	    __uid_t si_uid;	/* Real user ID of sending process.  */
+	  } _sigchld;
+
+	/* SIGILL, SIGFPE, SIGSEGV, SIGBUS.  */
+	struct
+	  {
+	    void *si_addr;	/* Faulting insn/memory ref.  */
+	  } _sigfault;
+
+	/* SIGPOLL.  */
+	struct
+	  {
+	    long int si_band;	/* Band event for SIGPOLL.  */
+	    int si_fd;
+	  } _sigpoll;
+      } _sifields;
+  } siginfo_t;
+
+
+/* X/Open requires some more fields with fixed names.  */
+# define si_pid		_sifields._kill.si_pid
+# define si_uid		_sifields._kill.si_uid
+# define si_timerid	_sifields._timer.si_tid
+# define si_overrun	_sifields._timer.si_overrun
+# define si_status	_sifields._sigchld.si_status
+# define si_utime	_sifields._sigchld.si_utime
+# define si_stime	_sifields._sigchld.si_stime
+# define si_value	_sifields._rt.si_sigval
+# define si_int		_sifields._rt.si_sigval.sival_int
+# define si_ptr		_sifields._rt.si_sigval.sival_ptr
+# define si_addr	_sifields._sigfault.si_addr
+# define si_band	_sifields._sigpoll.si_band
+# define si_fd		_sifields._sigpoll.si_fd
+
+
+/* Values for `si_code'.  Positive values are reserved for kernel-generated
+   signals.  */
+enum
+{
+  SI_ASYNCNL = -60,		/* Sent by asynch name lookup completion.  */
+# define SI_ASYNCNL	SI_ASYNCNL
+  SI_TKILL = -6,		/* Sent by tkill.  */
+# define SI_TKILL	SI_TKILL
+  SI_SIGIO,			/* Sent by queued SIGIO. */
+# define SI_SIGIO	SI_SIGIO
+  SI_ASYNCIO,			/* Sent by AIO completion.  */
+# define SI_ASYNCIO	SI_ASYNCIO
+  SI_MESGQ,			/* Sent by real time mesq state change.  */
+# define SI_MESGQ	SI_MESGQ
+  SI_TIMER,			/* Sent by timer expiration.  */
+# define SI_TIMER	SI_TIMER
+  SI_QUEUE,			/* Sent by sigqueue.  */
+# define SI_QUEUE	SI_QUEUE
+  SI_USER,			/* Sent by kill, sigsend, raise.  */
+# define SI_USER	SI_USER
+  SI_KERNEL = 0x80		/* Send by kernel.  */
+#define SI_KERNEL	SI_KERNEL
+};
+
+
+/* `si_code' values for SIGILL signal.  */
+enum
+{
+  ILL_ILLOPC = 1,		/* Illegal opcode.  */
+# define ILL_ILLOPC	ILL_ILLOPC
+  ILL_ILLOPN,			/* Illegal operand.  */
+# define ILL_ILLOPN	ILL_ILLOPN
+  ILL_ILLADR,			/* Illegal addressing mode.  */
+# define ILL_ILLADR	ILL_ILLADR
+  ILL_ILLTRP,			/* Illegal trap. */
+# define ILL_ILLTRP	ILL_ILLTRP
+  ILL_PRVOPC,			/* Privileged opcode.  */
+# define ILL_PRVOPC	ILL_PRVOPC
+  ILL_PRVREG,			/* Privileged register.  */
+# define ILL_PRVREG	ILL_PRVREG
+  ILL_COPROC,			/* Coprocessor error.  */
+# define ILL_COPROC	ILL_COPROC
+  ILL_BADSTK			/* Internal stack error.  */
+# define ILL_BADSTK	ILL_BADSTK
+};
+
+/* `si_code' values for SIGFPE signal.  */
+enum
+{
+  FPE_INTDIV = 1,		/* Integer divide by zero.  */
+# define FPE_INTDIV	FPE_INTDIV
+  FPE_INTOVF,			/* Integer overflow.  */
+# define FPE_INTOVF	FPE_INTOVF
+  FPE_FLTDIV,			/* Floating point divide by zero.  */
+# define FPE_FLTDIV	FPE_FLTDIV
+  FPE_FLTOVF,			/* Floating point overflow.  */
+# define FPE_FLTOVF	FPE_FLTOVF
+  FPE_FLTUND,			/* Floating point underflow.  */
+# define FPE_FLTUND	FPE_FLTUND
+  FPE_FLTRES,			/* Floating point inexact result.  */
+# define FPE_FLTRES	FPE_FLTRES
+  FPE_FLTINV,			/* Floating point invalid operation.  */
+# define FPE_FLTINV	FPE_FLTINV
+  FPE_FLTSUB			/* Subscript out of range.  */
+# define FPE_FLTSUB	FPE_FLTSUB
+};
+
+/* `si_code' values for SIGSEGV signal.  */
+enum
+{
+  SEGV_MAPERR = 1,		/* Address not mapped to object.  */
+# define SEGV_MAPERR	SEGV_MAPERR
+  SEGV_ACCERR			/* Invalid permissions for mapped object.  */
+# define SEGV_ACCERR	SEGV_ACCERR
+};
+
+/* `si_code' values for SIGBUS signal.  */
+enum
+{
+  BUS_ADRALN = 1,		/* Invalid address alignment.  */
+# define BUS_ADRALN	BUS_ADRALN
+  BUS_ADRERR,			/* Non-existant physical address.  */
+# define BUS_ADRERR	BUS_ADRERR
+  BUS_OBJERR			/* Object specific hardware error.  */
+# define BUS_OBJERR	BUS_OBJERR
+};
+
+/* `si_code' values for SIGTRAP signal.  */
+enum
+{
+  TRAP_BRKPT = 1,		/* Process breakpoint.  */
+# define TRAP_BRKPT	TRAP_BRKPT
+  TRAP_TRACE			/* Process trace trap.  */
+# define TRAP_TRACE	TRAP_TRACE
+};
+
+/* `si_code' values for SIGCHLD signal.  */
+enum
+{
+  CLD_EXITED = 1,		/* Child has exited.  */
+# define CLD_EXITED	CLD_EXITED
+  CLD_KILLED,			/* Child was killed.  */
+# define CLD_KILLED	CLD_KILLED
+  CLD_DUMPED,			/* Child terminated abnormally.  */
+# define CLD_DUMPED	CLD_DUMPED
+  CLD_TRAPPED,			/* Traced child has trapped.  */
+# define CLD_TRAPPED	CLD_TRAPPED
+  CLD_STOPPED,			/* Child has stopped.  */
+# define CLD_STOPPED	CLD_STOPPED
+  CLD_CONTINUED			/* Stopped child has continued.  */
+# define CLD_CONTINUED	CLD_CONTINUED
+};
+
+/* `si_code' values for SIGPOLL signal.  */
+enum
+{
+  POLL_IN = 1,			/* Data input available.  */
+# define POLL_IN	POLL_IN
+  POLL_OUT,			/* Output buffers available.  */
+# define POLL_OUT	POLL_OUT
+  POLL_MSG,			/* Input message available.   */
+# define POLL_MSG	POLL_MSG
+  POLL_ERR,			/* I/O error.  */
+# define POLL_ERR	POLL_ERR
+  POLL_PRI,			/* High priority input available.  */
+# define POLL_PRI	POLL_PRI
+  POLL_HUP			/* Device disconnected.  */
+# define POLL_HUP	POLL_HUP
+};
+
+# undef __need_siginfo_t
+#endif	/* !have siginfo_t && (have _SIGNAL_H || need siginfo_t).  */
+
+
+#if (defined _SIGNAL_H || defined __need_sigevent_t) \
+    && !defined __have_sigevent_t
+# define __have_sigevent_t	1
+
+/* Structure to transport application-defined values with signals.  */
+# define __SIGEV_MAX_SIZE	64
+# if __WORDSIZE == 64
+#  define __SIGEV_PAD_SIZE	((__SIGEV_MAX_SIZE / sizeof (int)) - 4)
+# else
+#  define __SIGEV_PAD_SIZE	((__SIGEV_MAX_SIZE / sizeof (int)) - 3)
+# endif
+
+typedef struct sigevent
+  {
+    sigval_t sigev_value;
+    int sigev_signo;
+    int sigev_notify;
+
+    union
+      {
+	int _pad[__SIGEV_PAD_SIZE];
+
+	/* When SIGEV_SIGNAL and SIGEV_THREAD_ID set, LWP ID of the
+	   thread to receive the signal.  */
+	__pid_t _tid;
+
+	struct
+	  {
+	    void (*_function) (sigval_t);	/* Function to start.  */
+	    void *_attribute;			/* Really pthread_attr_t.  */
+	  } _sigev_thread;
+      } _sigev_un;
+  } sigevent_t;
+
+/* POSIX names to access some of the members.  */
+# define sigev_notify_function   _sigev_un._sigev_thread._function
+# define sigev_notify_attributes _sigev_un._sigev_thread._attribute
+
+/* `sigev_notify' values.  */
+enum
+{
+  SIGEV_SIGNAL = 0,		/* Notify via signal.  */
+# define SIGEV_SIGNAL	SIGEV_SIGNAL
+  SIGEV_NONE,			/* Other notification: meaningless.  */
+# define SIGEV_NONE	SIGEV_NONE
+  SIGEV_THREAD,			/* Deliver via thread creation.  */
+# define SIGEV_THREAD	SIGEV_THREAD
+
+  SIGEV_THREAD_ID = 4		/* Send signal to specific thread.  */
+#define SIGEV_THREAD_ID	SIGEV_THREAD_ID
+};
+
+#endif	/* have _SIGNAL_H.  */
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/m68k/clone.S glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/m68k/clone.S
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/m68k/clone.S	2002-12-15 22:39:21.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/m68k/clone.S	2007-03-27 14:59:45.000000000 +0200
@@ -42,11 +42,21 @@
 	movel	16(%sp), -(%a1)
 
 	/* Do the system call */
-	exg	%d2, %a1		/* save %d2 and get stack pointer */
 	movel	12(%sp), %d1		/* get flags */
+#ifdef __mcoldfire__
+	movel	%d2, -(%a1)
+	movel	%d2, -(%sp)
+	movel	%a1, %d2
+#else
+	exg	%d2, %a1		/* save %d2 and get stack pointer */
+#endif
 	movel	#SYS_ify (clone), %d0
 	trap	#0
+#ifdef __mcoldfire__
+	movel	(%sp)+, %d2
+#else
 	exg	%d2, %a1		/* restore %d2 */
+#endif
 
 	tstl	%d0
 	jmi	SYSCALL_ERROR_LABEL
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/m68k/configure glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/m68k/configure
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/m68k/configure	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/m68k/configure	2007-03-27 15:02:48.000000000 +0200
@@ -0,0 +1,6 @@
+# This file is generated from configure.in by Autoconf.  DO NOT EDIT!
+ case $machine in
+m68k/coldfire)
+  arch_minimum_kernel=2.6.10
+  ;;
+esac
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/m68k/configure.in glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/m68k/configure.in
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/m68k/configure.in	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/m68k/configure.in	2007-03-27 14:59:45.000000000 +0200
@@ -0,0 +1,7 @@
+sinclude(./aclocal.m4)dnl Autoconf lossage
+GLIBC_PROVIDES dnl See aclocal.m4 in the top level source directory.
+case $machine in
+m68k/coldfire)
+  arch_minimum_kernel=2.6.10
+  ;;
+esac
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/m68k/m680x0/syscalls.list glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/m68k/m680x0/syscalls.list
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/m68k/m680x0/syscalls.list	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/m68k/m680x0/syscalls.list	2007-03-27 14:59:43.000000000 +0200
@@ -0,0 +1,4 @@
+# File name	Caller	Syscall name	Args	Strong name	Weak names
+
+oldgetrlimit	EXTRA	getrlimit	i:ip	__old_getrlimit	getrlimit@GLIBC_2.0
+oldsetrlimit	EXTRA	setrlimit	i:ip	__old_setrlimit	setrlimit@GLIBC_2.0
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/m68k/mremap.S glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/m68k/mremap.S
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/m68k/mremap.S	2001-07-06 06:56:17.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/m68k/mremap.S	2007-03-27 14:59:45.000000000 +0200
@@ -1,4 +1,4 @@
-/* Copyright (C) 1996 Free Software Foundation, Inc.
+/* Copyright (C) 1996, 2006 Free Software Foundation, Inc.
    This file is part of the GNU C Library.
 
    The GNU C Library is free software; you can redistribute it and/or
@@ -22,7 +22,7 @@
    its value in register %a0.  */
 
 	.text
-PSEUDO (__mremap, mremap, 4)
+PSEUDO (__mremap, mremap, 5)
 	move.l %d0, %a0
 	rts
 PSEUDO_END (__mremap)
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/m68k/register-dump.h glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/m68k/register-dump.h
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/m68k/register-dump.h	2004-04-23 22:41:42.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/m68k/register-dump.h	2007-03-27 14:59:45.000000000 +0200
@@ -40,6 +40,7 @@
 
 */
 
+#ifndef __mcoldfire__
 /* Linux saves only the call-clobbered registers in the sigcontext.  We
    need to use a trampoline that saves the rest so that the C code can
    access them.  We use the sc_fpstate field, since the handler is not
@@ -65,6 +66,7 @@
 }
 #define catch_segfault(a,b) \
   __attribute_used__ real_catch_segfault(a,b)
+#endif
 
 static void
 hexvalue (unsigned long int value, char *buf, size_t len)
@@ -81,6 +83,8 @@
   char fpregs[11][24];
   struct iovec iov[63], *next_iov = iov;
   unsigned long *p = (unsigned long *) ctx->sc_fpstate + 1;
+  unsigned long *pfp = (unsigned long *) ctx->sc_fpregs;
+  int i, j, fpreg_size;
 
 #define ADD_STRING(str) \
   next_iov->iov_base = (char *) (str); \
@@ -91,51 +95,59 @@
   next_iov->iov_len = (len); \
   ++next_iov
 
+#ifdef __mcoldfire__
+  fpreg_size = 16;
+#else
+  fpreg_size = 24;
+#endif
+
   /* Generate strings of register contents.  */
   hexvalue (ctx->sc_d0, regs[0], 8);
   hexvalue (ctx->sc_d1, regs[1], 8);
+#ifdef __mcoldfire__
+  hexvalue (ctx->sc_d2, regs[2], 8);
+  hexvalue (ctx->sc_d3, regs[3], 8);
+  hexvalue (ctx->sc_d4, regs[4], 8);
+  hexvalue (ctx->sc_d5, regs[5], 8);
+  hexvalue (ctx->sc_d6, regs[6], 8);
+  hexvalue (ctx->sc_d7, regs[7], 8);
+#else
   hexvalue (*p++, regs[2], 8);
   hexvalue (*p++, regs[3], 8);
   hexvalue (*p++, regs[4], 8);
   hexvalue (*p++, regs[5], 8);
   hexvalue (*p++, regs[6], 8);
   hexvalue (*p++, regs[7], 8);
+#endif
   hexvalue (ctx->sc_a0, regs[8], 8);
   hexvalue (ctx->sc_a1, regs[9], 8);
+#ifdef __mcoldfire__
+  hexvalue (ctx->sc_a2, regs[10], 8);
+  hexvalue (ctx->sc_a3, regs[11], 8);
+  hexvalue (ctx->sc_a4, regs[12], 8);
+  hexvalue (ctx->sc_a5, regs[13], 8);
+  hexvalue (ctx->sc_a6, regs[14], 8);
+#else
   hexvalue (*p++, regs[10], 8);
   hexvalue (*p++, regs[11], 8);
   hexvalue (*p++, regs[12], 8);
   hexvalue (*p++, regs[13], 8);
   hexvalue (*p++, regs[14], 8);
+#endif
   hexvalue (ctx->sc_usp, regs[15], 8);
   hexvalue (ctx->sc_pc, regs[16], 8);
   hexvalue (ctx->sc_sr, regs[17], 4);
   hexvalue (ctx->sc_mask, regs[18], 8);
   hexvalue (ctx->sc_formatvec & 0xfff, regs[19], 4);
-  hexvalue (ctx->sc_fpregs[0], fpregs[0], 8);
-  hexvalue (ctx->sc_fpregs[1], fpregs[0] + 8, 8);
-  hexvalue (ctx->sc_fpregs[2], fpregs[0] + 16, 8);
-  hexvalue (ctx->sc_fpregs[3], fpregs[1], 8);
-  hexvalue (ctx->sc_fpregs[4], fpregs[1] + 8, 8);
-  hexvalue (ctx->sc_fpregs[5], fpregs[1] + 16, 8);
-  hexvalue (*p++, fpregs[2], 8);
-  hexvalue (*p++, fpregs[2] + 8, 8);
-  hexvalue (*p++, fpregs[2] + 16, 8);
-  hexvalue (*p++, fpregs[3], 8);
-  hexvalue (*p++, fpregs[3] + 8, 8);
-  hexvalue (*p++, fpregs[3] + 16, 8);
-  hexvalue (*p++, fpregs[4], 8);
-  hexvalue (*p++, fpregs[4] + 8, 8);
-  hexvalue (*p++, fpregs[4] + 16, 8);
-  hexvalue (*p++, fpregs[5], 8);
-  hexvalue (*p++, fpregs[5] + 8, 8);
-  hexvalue (*p++, fpregs[5] + 16, 8);
-  hexvalue (*p++, fpregs[6], 8);
-  hexvalue (*p++, fpregs[6] + 8, 8);
-  hexvalue (*p++, fpregs[6] + 16, 8);
-  hexvalue (*p++, fpregs[7], 8);
-  hexvalue (*p++, fpregs[7] + 8, 8);
-  hexvalue (*p++, fpregs[7] + 16, 8);
+  for (i = 0; i < 2; i++)
+    for (j = 0; j < fpreg_size; j += 8)
+      hexvalue (*pfp++, fpregs[i] + j, 8);
+#ifdef __mcoldfire__
+  p = pfp;
+#endif
+  for (i = 2; i < 8; i++)
+    for (j = 0; j < fpreg_size; j += 8)
+      hexvalue (*p++, fpregs[i] + j, 8);
   hexvalue (ctx->sc_fpcntl[0], fpregs[8], 8);
   hexvalue (ctx->sc_fpcntl[1], fpregs[9], 8);
   hexvalue (ctx->sc_fpcntl[2], fpregs[10], 8);
@@ -184,21 +196,21 @@
   ADD_MEM (regs[19], 4);
 
   ADD_STRING ("\n\n  FP0: ");
-  ADD_MEM (fpregs[0], 24);
+  ADD_MEM (fpregs[0], fpreg_size);
   ADD_STRING ("  FP1: ");
-  ADD_MEM (fpregs[1], 24);
+  ADD_MEM (fpregs[1], fpreg_size);
   ADD_STRING ("\n  FP2: ");
-  ADD_MEM (fpregs[2], 24);
+  ADD_MEM (fpregs[2], fpreg_size);
   ADD_STRING ("  FP3: ");
-  ADD_MEM (fpregs[3], 24);
+  ADD_MEM (fpregs[3], fpreg_size);
   ADD_STRING ("\n  FP4: ");
-  ADD_MEM (fpregs[4], 24);
+  ADD_MEM (fpregs[4], fpreg_size);
   ADD_STRING ("  FP5: ");
-  ADD_MEM (fpregs[5], 24);
+  ADD_MEM (fpregs[5], fpreg_size);
   ADD_STRING ("\n  FP6: ");
-  ADD_MEM (fpregs[6], 24);
+  ADD_MEM (fpregs[6], fpreg_size);
   ADD_STRING ("  FP7: ");
-  ADD_MEM (fpregs[7], 24);
+  ADD_MEM (fpregs[7], fpreg_size);
   ADD_STRING ("\n  FPCR: ");
   ADD_MEM (fpregs[8], 8);
   ADD_STRING ("  FPSR: ");
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/m68k/socket.S glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/m68k/socket.S
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/m68k/socket.S	2002-12-27 23:15:18.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/m68k/socket.S	2007-03-27 14:59:46.000000000 +0200
@@ -42,7 +42,7 @@
 .globl __socket
 ENTRY (__socket)
 #if defined NEED_CANCELLATION && defined CENABLE
-	SINGLE_THREAD_P
+	SINGLE_THREAD_P (%a0)
 	jne 1f
 #endif
 
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/m68k/sys/reg.h glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/m68k/sys/reg.h
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/m68k/sys/reg.h	2001-07-06 06:56:18.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/m68k/sys/reg.h	2007-03-27 14:59:41.000000000 +0200
@@ -62,22 +62,35 @@
 #define PT_SR PT_SR
   PT_PC = 18,
 #define PT_PC PT_PC
+
+#ifdef __mcoldfire__
+  PT_FP0 = 21,
+  PT_FP1 = 23,
+  PT_FP2 = 25,
+  PT_FP3 = 27,
+  PT_FP4 = 29,
+  PT_FP5 = 31,
+  PT_FP6 = 33,
+  PT_FP7 = 35,
+#else
   PT_FP0 = 21,
-#define PT_FP0 PT_FP0
   PT_FP1 = 24,
-#define PT_FP1 PT_FP1
   PT_FP2 = 27,
-#define PT_FP2 PT_FP2
   PT_FP3 = 30,
-#define PT_FP3 PT_FP3
   PT_FP4 = 33,
-#define PT_FP4 PT_FP4
   PT_FP5 = 36,
-#define PT_FP5 PT_FP5
   PT_FP6 = 39,
-#define PT_FP6 PT_FP6
   PT_FP7 = 42,
+#endif
+#define PT_FP0 PT_FP0
+#define PT_FP1 PT_FP1
+#define PT_FP2 PT_FP2
+#define PT_FP3 PT_FP3
+#define PT_FP4 PT_FP4
+#define PT_FP5 PT_FP5
+#define PT_FP6 PT_FP6
 #define PT_FP7 PT_FP7
+
   PT_FPCR = 45,
 #define PT_FPCR PT_FPCR
   PT_FPSR = 46,
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/m68k/sys/ucontext.h glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/m68k/sys/ucontext.h
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/m68k/sys/ucontext.h	2001-07-15 17:30:50.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/m68k/sys/ucontext.h	2007-03-27 14:59:41.000000000 +0200
@@ -79,10 +79,14 @@
 /* Structure to describe FPU registers.  */
 typedef struct fpregset
 {
-  int f_fpregs[8][3];
   int f_pcr;
   int f_psr;
   int f_fpiaddr;
+#ifdef __mcoldfire__
+  int f_fpregs[8][2];
+#else
+  int f_fpregs[8][3];
+#endif
 } fpregset_t;
 
 /* Context to describe whole processor state.  */
@@ -98,12 +102,12 @@
 /* Userlevel context.  */
 typedef struct ucontext
 {
-  unsigned long int uc_flags;
+  unsigned long uc_flags;
   struct ucontext *uc_link;
-  __sigset_t uc_sigmask;
   stack_t uc_stack;
   mcontext_t uc_mcontext;
-  long int uc_filler[174];
+  unsigned long uc_filler[80];
+  __sigset_t uc_sigmask;
 } ucontext_t;
 
 #endif /* sys/ucontext.h */
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/m68k/syscalls.list glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/m68k/syscalls.list
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/m68k/syscalls.list	2000-10-14 19:50:05.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/m68k/syscalls.list	2007-03-27 14:59:46.000000000 +0200
@@ -1,5 +1,3 @@
 # File name	Caller	Syscall name	Args	Strong name	Weak names
 
 cacheflush	EXTRA	cacheflush	i:iiii	__cacheflush	cacheflush
-oldgetrlimit	EXTRA	getrlimit	i:ip	__old_getrlimit	getrlimit@GLIBC_2.0
-oldsetrlimit	EXTRA	setrlimit	i:ip	__old_setrlimit	setrlimit@GLIBC_2.0
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/m68k/sysdep.h glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/m68k/sysdep.h
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/m68k/sysdep.h	2004-10-04 22:59:37.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/m68k/sysdep.h	2007-03-27 14:59:45.000000000 +0200
@@ -1,4 +1,4 @@
-/* Copyright (C) 1996, 1997, 1998, 2000, 2003, 2004 Free Software Foundation, Inc.
+/* Copyright (C) 1996, 1997, 1998, 2000, 2003, 2004, 2006 Free Software Foundation, Inc.
    This file is part of the GNU C Library.
    Written by Andreas Schwab, <schwab@issan.informatik.uni-dortmund.de>,
    December 1995.
@@ -18,6 +18,9 @@
    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
    02111-1307 USA.  */
 
+#ifndef _LINUX_M68K_SYSDEP_H
+#define _LINUX_M68K_SYSDEP_H 1
+
 #include <sysdeps/unix/sysdep.h>
 #include <sysdeps/m68k/sysdep.h>
 
@@ -98,7 +101,7 @@
 # if RTLD_PRIVATE_ERRNO
 #  define SYSCALL_ERROR_HANDLER						      \
 SYSCALL_ERROR_LABEL:							      \
-    lea (rtld_errno, %pc), %a0;					      	      \
+    PCREL_OP (lea, rtld_errno, %a0, %a0);				      \
     neg.l %d0;								      \
     move.l %d0, (%a0);							      \
     move.l &-1, %d0;							      \
@@ -192,6 +195,10 @@
 #define _DOARGS_5(n)	move.l %d5, -(%sp); move.l n+4(%sp), %d5; _DOARGS_4 (n)
 #define UNDOARGS_5	UNDOARGS_4; move.l (%sp)+, %d5
 
+#define DOARGS_6	_DOARGS_6 (24)
+#define _DOARGS_6(n)	_DOARGS_5 (n-4); move.l %a0, -(%sp); move.l n+12(%sp), %a0;
+#define UNDOARGS_6	move.l (%sp)+, %a0; UNDOARGS_5
+
 
 #define	ret	rts
 #if 0 /* Not used by Linux */
@@ -293,3 +300,4 @@
 #define ASM_ARGS_6	ASM_ARGS_5, "a" (_a0)
 
 #endif /* not __ASSEMBLER__ */
+#endif
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/mips/bits/msq.h glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/mips/bits/msq.h
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/mips/bits/msq.h	2002-08-26 03:49:55.000000000 +0200
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/mips/bits/msq.h	2007-03-27 14:59:59.000000000 +0200
@@ -1,4 +1,4 @@
-/* Copyright (C) 2002 Free Software Foundation, Inc.
+/* Copyright (C) 2002, 2007 Free Software Foundation, Inc.
    This file is part of the GNU C Library.
 
    The GNU C Library is free software; you can redistribute it and/or
@@ -38,16 +38,34 @@
 struct msqid_ds
 {
   struct ipc_perm msg_perm;	/* structure describing operation permission */
+#if __WORDSIZE == 32 && defined (__MIPSEB__)
+  unsigned long int __unused1;
+#endif
   __time_t msg_stime;		/* time of last msgsnd command */
+#if __WORDSIZE == 32 && defined (__MIPSEL__)
+  unsigned long int __unused1;
+#endif
+#if __WORDSIZE == 32 && defined (__MIPSEB__)
+  unsigned long int __unused2;
+#endif
   __time_t msg_rtime;		/* time of last msgrcv command */
+#if __WORDSIZE == 32 && defined (__MIPSEL__)
+  unsigned long int __unused2;
+#endif
+#if __WORDSIZE == 32 && defined (__MIPSEB__)
+  unsigned long int __unused3;
+#endif
   __time_t msg_ctime;		/* time of last change */
+#if __WORDSIZE == 32 && defined (__MIPSEL__)
+  unsigned long int __unused3;
+#endif
   unsigned long int __msg_cbytes; /* current number of bytes on queue */
   msgqnum_t msg_qnum;		/* number of messages currently on queue */
   msglen_t msg_qbytes;		/* max number of bytes allowed on queue */
   __pid_t msg_lspid;		/* pid of last msgsnd() */
   __pid_t msg_lrpid;		/* pid of last msgrcv() */
-  unsigned long int __unused1;
-  unsigned long int __unused2;
+  unsigned long int __unused4;
+  unsigned long int __unused5;
 };
 
 #ifdef __USE_MISC
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/mips/mips64/msgctl.c glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/mips/mips64/msgctl.c
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/mips/mips64/msgctl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/mips/mips64/msgctl.c	2007-03-27 14:59:56.000000000 +0200
@@ -0,0 +1,35 @@
+/* Copyright (C) 2007 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <errno.h>
+#include <sys/msg.h>
+#include <ipc_priv.h>
+#include <sysdep.h>
+
+#include <bp-checks.h>
+
+int __msgctl (int msqid, int cmd, struct msqid_ds *buf);
+
+int
+__msgctl (int msqid, int cmd, struct msqid_ds *buf)
+{
+  return INLINE_SYSCALL (msgctl, 3, msqid, cmd | __IPC_64, CHECK_1 (buf));
+}
+
+#include <shlib-compat.h>
+versioned_symbol (libc, __msgctl, msgctl, GLIBC_2_0);
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/mips/mips64/nptl/sysdep-cancel.h glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/mips/mips64/nptl/sysdep-cancel.h
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/mips/mips64/nptl/sysdep-cancel.h	2006-03-03 02:06:48.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/mips/mips64/nptl/sysdep-cancel.h	2007-03-27 14:59:56.000000000 +0200
@@ -28,12 +28,6 @@
    happen before any instructions.  So we use cfi_same_value instead of
    cfi_restore.  */
 
-#ifdef HAVE_ASM_CFI_DIRECTIVES
-# define cfi_same_value .cfi_same_value
-#else
-# define cfi_same_value
-#endif
-
 #if !defined NOT_IN_libc || defined IS_IN_libpthread || defined IS_IN_librt
 
 #ifdef __PIC__
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/mips/mips64/semctl.c glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/mips/mips64/semctl.c
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/mips/mips64/semctl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/mips/mips64/semctl.c	2007-03-27 14:59:56.000000000 +0200
@@ -0,0 +1,57 @@
+/* Copyright (C) 2007 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <errno.h>
+#include <stdarg.h>
+#include <sys/sem.h>
+#include <ipc_priv.h>
+#include <sysdep.h>
+
+/* Define a `union semun' suitable for Linux here.  */
+union semun
+{
+  int val;			/* value for SETVAL */
+  struct semid_ds *buf;		/* buffer for IPC_STAT & IPC_SET */
+  unsigned short int *array;	/* array for GETALL & SETALL */
+  struct seminfo *__buf;	/* buffer for IPC_INFO */
+};
+
+#include <bp-checks.h>
+#include <bp-semctl.h>		/* definition of CHECK_SEMCTL needs union semum */
+
+int __semctl (int semid, int semnum, int cmd, ...);
+
+int
+__semctl (int semid, int semnum, int cmd, ...)
+{
+  union semun arg;
+  va_list ap;
+
+  va_start (ap, cmd);
+
+  /* Get the argument.  */
+  arg = va_arg (ap, union semun);
+
+  va_end (ap);
+
+  return INLINE_SYSCALL (semctl, 4, semid, semnum, cmd | __IPC_64,
+			 CHECK_SEMCTL (&arg, semid, cmd | __IPC_64)->array);
+}
+
+#include <shlib-compat.h>
+versioned_symbol (libc, __semctl, semctl, GLIBC_2_0);
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/mips/mips64/shmctl.c glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/mips/mips64/shmctl.c
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/mips/mips64/shmctl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/mips/mips64/shmctl.c	2007-03-27 14:59:56.000000000 +0200
@@ -0,0 +1,35 @@
+/* Copyright (C) 2007 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <errno.h>
+#include <sys/shm.h>
+#include <ipc_priv.h>
+#include <sysdep.h>
+
+#include <bp-checks.h>
+
+int __shmctl (int shmid, int cmd, struct shmid_ds *buf);
+
+int
+__shmctl (int shmid, int cmd, struct shmid_ds *buf)
+{
+  return INLINE_SYSCALL (shmctl, 3, shmid, cmd | __IPC_64, CHECK_1 (buf));
+}
+
+#include <shlib-compat.h>
+versioned_symbol (libc, __shmctl, shmctl, GLIBC_2_0);
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/mips/mips64/syscalls.list glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/mips/mips64/syscalls.list
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/mips/mips64/syscalls.list	2006-03-03 02:06:47.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/mips/mips64/syscalls.list	2007-03-27 14:59:56.000000000 +0200
@@ -2,16 +2,14 @@
 
 lseek		-	lseek		Ci:iii	__libc_lseek	__lseek lseek __llseek llseek __libc_lseek64 __lseek64 lseek64
 
-# semaphore and shm system calls
-msgctl		-	msgctl		i:iip	__msgctl	msgctl
+# Semaphore and shm system calls.  msgctl, shmctl, and semctl have C
+# wrappers (to set __IPC_64).
 msgget		-	msgget		i:ii	__msgget	msgget
 msgrcv		-	msgrcv		Ci:ibnii __msgrcv	msgrcv
 msgsnd		-	msgsnd		Ci:ibni	__msgsnd	msgsnd
 shmat		-	shmat		i:ipi	__shmat		shmat
-shmctl		-	shmctl		i:iip	__shmctl	shmctl
 shmdt		-	shmdt		i:s	__shmdt		shmdt
 shmget		-	shmget		i:iii	__shmget	shmget
 semop		-	semop		i:ipi	__semop		semop
 semtimedop	-	semtimedop	i:ipip	semtimedop
 semget		-	semget		i:iii	__semget	semget
-semctl		-	semctl		i:iiii	__semctl	semctl
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/powerpc/powerpc32/e500/fpu/getcontext-extra.S glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/powerpc/powerpc32/e500/fpu/getcontext-extra.S
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/powerpc/powerpc32/e500/fpu/getcontext-extra.S	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/powerpc/powerpc32/e500/fpu/getcontext-extra.S	2007-03-27 14:59:27.000000000 +0200
@@ -0,0 +1,58 @@
+/* Save current context.  Support for saving high parts of registers.
+   Copyright (C) 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Joseph Myers <joseph@codesourcery.com>, 2006.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+/* We follow the kernel's layout, which saves the high parts of the
+   SPE registers in the vregs area, immediately followed by the
+   SPEFSCR value.  */
+	la	r10,(_UC_VREGS)(r3)
+	evstwwe	r0,(0*4)(r10)
+	evstwwe	r1,(1*4)(r10)
+	evstwwe	r2,(2*4)(r10)
+	evstwwe	r3,(3*4)(r10)
+	evstwwe	r4,(4*4)(r10)
+	evstwwe	r5,(5*4)(r10)
+	evstwwe	r6,(6*4)(r10)
+	evstwwe	r7,(7*4)(r10)
+	evstwwe	r8,(8*4)(r10)
+	evstwwe	r9,(9*4)(r10)
+	evstwwe	r10,(10*4)(r10)
+	evstwwe	r11,(11*4)(r10)
+	evstwwe	r12,(12*4)(r10)
+	evstwwe	r13,(13*4)(r10)
+	evstwwe	r14,(14*4)(r10)
+	evstwwe	r15,(15*4)(r10)
+	evstwwe	r16,(16*4)(r10)
+	evstwwe	r17,(17*4)(r10)
+	evstwwe	r18,(18*4)(r10)
+	evstwwe	r19,(19*4)(r10)
+	evstwwe	r20,(20*4)(r10)
+	evstwwe	r21,(21*4)(r10)
+	evstwwe	r22,(22*4)(r10)
+	evstwwe	r23,(23*4)(r10)
+	evstwwe	r24,(24*4)(r10)
+	evstwwe	r25,(25*4)(r10)
+	evstwwe	r26,(26*4)(r10)
+	evstwwe	r27,(27*4)(r10)
+	evstwwe	r28,(28*4)(r10)
+	evstwwe	r29,(29*4)(r10)
+	evstwwe	r30,(30*4)(r10)
+	evstwwe	r31,(31*4)(r10)
+	mfspefscr	r9
+	stw	r9,(32*4)(r10)
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/powerpc/powerpc32/e500/fpu/getcontext.S glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/powerpc/powerpc32/e500/fpu/getcontext.S
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/powerpc/powerpc32/e500/fpu/getcontext.S	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/powerpc/powerpc32/e500/fpu/getcontext.S	2007-03-27 14:59:27.000000000 +0200
@@ -0,0 +1,60 @@
+/* Save current context.
+   Copyright (C) 2002, 2004, 2005, 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <sysdep.h>
+#include <rtld-global-offsets.h>
+#include <shlib-compat.h>
+
+#define __ASSEMBLY__
+#include <asm/ptrace.h>
+#include "ucontext_i.h"
+
+#define __CONTEXT_FUNC_NAME __getcontext
+#undef __CONTEXT_ENABLE_FPRS
+#undef __CONTEXT_ENABLE_VRS
+#define __CONTEXT_EXTRA
+
+#include "getcontext-common.S"
+
+versioned_symbol (libc, __getcontext, getcontext, GLIBC_2_3_4)
+
+#if SHLIB_COMPAT (libc, GLIBC_2_3_3, GLIBC_2_3_4)
+
+/* For the nofpu case the old/new versions are the same function.  */  
+strong_alias (__getcontext, __novec_getcontext)
+
+compat_symbol (libc, __novec_getcontext, getcontext, GLIBC_2_3_3)
+
+#endif
+
+#if SHLIB_COMPAT (libc, GLIBC_2_1, GLIBC_2_3_3)
+
+#define _ERRNO_H	1
+#include <bits/errno.h>
+
+	compat_text_section
+ENTRY (__getcontext_stub)
+	li	r3,ENOSYS
+	b	__syscall_error@local
+END (__getcontext_stub)
+	.previous
+
+compat_symbol (libc, __getcontext_stub, getcontext, GLIBC_2_1)
+
+#endif
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/powerpc/powerpc32/e500/fpu/Implies glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/powerpc/powerpc32/e500/fpu/Implies
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/powerpc/powerpc32/e500/fpu/Implies	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/powerpc/powerpc32/e500/fpu/Implies	2007-03-27 14:59:27.000000000 +0200
@@ -0,0 +1 @@
+powerpc/powerpc32/e500/fpu
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/powerpc/powerpc32/e500/fpu/setcontext-extra.S glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/powerpc/powerpc32/e500/fpu/setcontext-extra.S
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/powerpc/powerpc32/e500/fpu/setcontext-extra.S	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/powerpc/powerpc32/e500/fpu/setcontext-extra.S	2007-03-27 14:59:27.000000000 +0200
@@ -0,0 +1,90 @@
+/* Jump to a new context.  Support for restoring high parts of registers.
+   Copyright (C) 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Joseph Myers <joseph@codesourcery.com>, 2006.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+	lwz	r3,_UC_VREGS+(0*4)(r31)
+	evmergelo	r0,r3,r0
+	lwz	r3,_UC_VREGS+(1*4)(r31)
+	evmergelo	r1,r3,r1
+	lwz	r3,_UC_VREGS+(2*4)(r31)
+	evmergelo	r2,r3,r2
+	lwz	r3,_UC_VREGS+(1*4)(r31)
+	evmergelo	r1,r3,r1
+	lwz	r3,_UC_VREGS+(2*4)(r31)
+	evmergelo	r2,r3,r2
+	lwz	r3,_UC_VREGS+(3*4)(r31)
+	evmergelo	r3,r3,r3
+	lwz	r3,_UC_VREGS+(4*4)(r31)
+	evmergelo	r4,r3,r4
+	lwz	r3,_UC_VREGS+(5*4)(r31)
+	evmergelo	r5,r3,r5
+	lwz	r3,_UC_VREGS+(6*4)(r31)
+	evmergelo	r6,r3,r6
+	lwz	r3,_UC_VREGS+(7*4)(r31)
+	evmergelo	r7,r3,r7
+	lwz	r3,_UC_VREGS+(8*4)(r31)
+	evmergelo	r8,r3,r8
+	lwz	r3,_UC_VREGS+(9*4)(r31)
+	evmergelo	r9,r3,r9
+	lwz	r3,_UC_VREGS+(10*4)(r31)
+	evmergelo	r10,r3,r10
+	lwz	r3,_UC_VREGS+(11*4)(r31)
+	evmergelo	r11,r3,r11
+	lwz	r3,_UC_VREGS+(12*4)(r31)
+	evmergelo	r12,r3,r12
+	lwz	r3,_UC_VREGS+(13*4)(r31)
+	evmergelo	r13,r3,r13
+	lwz	r3,_UC_VREGS+(14*4)(r31)
+	evmergelo	r14,r3,r14
+	lwz	r3,_UC_VREGS+(15*4)(r31)
+	evmergelo	r15,r3,r15
+	lwz	r3,_UC_VREGS+(16*4)(r31)
+	evmergelo	r16,r3,r16
+	lwz	r3,_UC_VREGS+(17*4)(r31)
+	evmergelo	r17,r3,r17
+	lwz	r3,_UC_VREGS+(18*4)(r31)
+	evmergelo	r18,r3,r18
+	lwz	r3,_UC_VREGS+(19*4)(r31)
+	evmergelo	r19,r3,r19
+	lwz	r3,_UC_VREGS+(20*4)(r31)
+	evmergelo	r20,r3,r20
+	lwz	r3,_UC_VREGS+(21*4)(r31)
+	evmergelo	r21,r3,r21
+	lwz	r3,_UC_VREGS+(22*4)(r31)
+	evmergelo	r22,r3,r22
+	lwz	r3,_UC_VREGS+(23*4)(r31)
+	evmergelo	r23,r3,r23
+	lwz	r3,_UC_VREGS+(24*4)(r31)
+	evmergelo	r24,r3,r24
+	lwz	r3,_UC_VREGS+(25*4)(r31)
+	evmergelo	r25,r3,r25
+	lwz	r3,_UC_VREGS+(26*4)(r31)
+	evmergelo	r26,r3,r26
+	lwz	r3,_UC_VREGS+(27*4)(r31)
+	evmergelo	r27,r3,r27
+	lwz	r3,_UC_VREGS+(28*4)(r31)
+	evmergelo	r28,r3,r28
+	lwz	r3,_UC_VREGS+(29*4)(r31)
+	evmergelo	r29,r3,r29
+	lwz	r3,_UC_VREGS+(30*4)(r31)
+	evmergelo	r30,r3,r30
+	lwz	r3,_UC_VREGS+(31*4)(r31)
+	evmergelo	r31,r3,r31
+	lwz	r3,_UC_VREGS+(32*4)(r31)
+	mtspefscr	r3
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/powerpc/powerpc32/e500/fpu/setcontext.S glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/powerpc/powerpc32/e500/fpu/setcontext.S
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/powerpc/powerpc32/e500/fpu/setcontext.S	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/powerpc/powerpc32/e500/fpu/setcontext.S	2007-03-27 14:59:27.000000000 +0200
@@ -0,0 +1,60 @@
+/* Jump to a new context.
+   Copyright (C) 2002, 2004, 2005, 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <sysdep.h>
+#include <rtld-global-offsets.h>
+#include <shlib-compat.h>
+
+#define __ASSEMBLY__
+#include <asm/ptrace.h>
+#include "ucontext_i.h"
+
+#define __CONTEXT_FUNC_NAME __setcontext
+#undef __CONTEXT_ENABLE_FPRS
+#undef __CONTEXT_ENABLE_VRS
+#define __CONTEXT_EXTRA
+
+#include "setcontext-common.S"
+
+versioned_symbol (libc, __setcontext, setcontext, GLIBC_2_3_4)
+
+#if SHLIB_COMPAT (libc, GLIBC_2_3_3, GLIBC_2_3_4)
+
+/* For the nofpu case the old/new versions are the same function.  */  
+strong_alias (__setcontext, __novec_setcontext)
+
+compat_symbol (libc, __novec_setcontext, setcontext, GLIBC_2_3_3)
+
+#endif
+
+#if SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_3_3)
+
+#define _ERRNO_H	1
+#include <bits/errno.h>
+
+	compat_text_section
+ENTRY (__setcontext_stub)
+	li	r3,ENOSYS
+	b	__syscall_error@local
+END (__setcontext_stub)
+	.previous
+
+compat_symbol (libc, __setcontext_stub, setcontext, GLIBC_2_0)
+
+#endif
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/powerpc/powerpc32/e500/fpu/swapcontext.S glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/powerpc/powerpc32/e500/fpu/swapcontext.S
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/powerpc/powerpc32/e500/fpu/swapcontext.S	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/powerpc/powerpc32/e500/fpu/swapcontext.S	2007-03-27 14:59:27.000000000 +0200
@@ -0,0 +1,60 @@
+/* Save current context and jump to a new context.
+   Copyright (C) 2002, 2004, 2005, 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <sysdep.h>
+#include <rtld-global-offsets.h>
+#include <shlib-compat.h>
+
+#define __ASSEMBLY__
+#include <asm/ptrace.h>
+#include "ucontext_i.h"
+
+#define __CONTEXT_FUNC_NAME __swapcontext
+#undef __CONTEXT_ENABLE_FPRS
+#undef __CONTEXT_ENABLE_VRS
+#define __CONTEXT_EXTRA
+
+# include "swapcontext-common.S"
+
+versioned_symbol (libc, __swapcontext, swapcontext, GLIBC_2_3_4)
+
+#if SHLIB_COMPAT (libc, GLIBC_2_3_3, GLIBC_2_3_4)
+
+/* For the nofpu case the old/new versions are the same function.  */  
+strong_alias (__swapcontext, __novec_swapcontext)
+
+compat_symbol (libc, __novec_swapcontext, swapcontext, GLIBC_2_3_3)
+
+#endif
+
+#if SHLIB_COMPAT (libc, GLIBC_2_1, GLIBC_2_3_3)
+
+#define _ERRNO_H	1
+#include <bits/errno.h>
+
+	compat_text_section
+ENTRY (__swapcontext_stub)
+	li	r3,ENOSYS
+	b	__syscall_error@local
+END (__swapcontext_stub)
+	.previous
+
+compat_symbol (libc, __swapcontext_stub, swapcontext, GLIBC_2_1)
+
+#endif
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/powerpc/powerpc32/e500/single/Implies glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/powerpc/powerpc32/e500/single/Implies
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/powerpc/powerpc32/e500/single/Implies	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/powerpc/powerpc32/e500/single/Implies	2007-03-27 14:59:27.000000000 +0200
@@ -0,0 +1 @@
+powerpc/powerpc32/e500/soft-fp
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/powerpc/powerpc32/nofpu/getcontext.S glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/powerpc/powerpc32/nofpu/getcontext.S
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/powerpc/powerpc32/nofpu/getcontext.S	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/powerpc/powerpc32/nofpu/getcontext.S	2007-03-27 14:59:26.000000000 +0200
@@ -0,0 +1,59 @@
+/* Save current context.
+   Copyright (C) 2002, 2004, 2005, 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <sysdep.h>
+#include <rtld-global-offsets.h>
+#include <shlib-compat.h>
+
+#define __ASSEMBLY__
+#include <asm/ptrace.h>
+#include "ucontext_i.h"
+
+#define __CONTEXT_FUNC_NAME __getcontext
+#undef __CONTEXT_ENABLE_FPRS
+#undef __CONTEXT_ENABLE_VRS
+
+#include "getcontext-common.S"
+
+versioned_symbol (libc, __getcontext, getcontext, GLIBC_2_3_4)
+
+#if SHLIB_COMPAT (libc, GLIBC_2_3_3, GLIBC_2_3_4)
+
+/* For the nofpu case the old/new versions are the same function.  */  
+strong_alias (__getcontext, __novec_getcontext)
+
+compat_symbol (libc, __novec_getcontext, getcontext, GLIBC_2_3_3)
+
+#endif
+
+#if SHLIB_COMPAT (libc, GLIBC_2_1, GLIBC_2_3_3)
+
+#define _ERRNO_H	1
+#include <bits/errno.h>
+
+	compat_text_section
+ENTRY (__getcontext_stub)
+	li	r3,ENOSYS
+	b	__syscall_error@local
+END (__getcontext_stub)
+	.previous
+
+compat_symbol (libc, __getcontext_stub, getcontext, GLIBC_2_1)
+
+#endif
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/powerpc/powerpc32/nofpu/Implies glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/powerpc/powerpc32/nofpu/Implies
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/powerpc/powerpc32/nofpu/Implies	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/powerpc/powerpc32/nofpu/Implies	2007-03-27 14:59:26.000000000 +0200
@@ -0,0 +1,2 @@
+powerpc/nofpu
+powerpc/soft-fp
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/powerpc/powerpc32/nofpu/setcontext.S glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/powerpc/powerpc32/nofpu/setcontext.S
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/powerpc/powerpc32/nofpu/setcontext.S	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/powerpc/powerpc32/nofpu/setcontext.S	2007-03-27 14:59:26.000000000 +0200
@@ -0,0 +1,59 @@
+/* Jump to a new context.
+   Copyright (C) 2002, 2004, 2005, 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <sysdep.h>
+#include <rtld-global-offsets.h>
+#include <shlib-compat.h>
+
+#define __ASSEMBLY__
+#include <asm/ptrace.h>
+#include "ucontext_i.h"
+
+#define __CONTEXT_FUNC_NAME __setcontext
+#undef __CONTEXT_ENABLE_FPRS
+#undef __CONTEXT_ENABLE_VRS
+
+#include "setcontext-common.S"
+
+versioned_symbol (libc, __setcontext, setcontext, GLIBC_2_3_4)
+
+#if SHLIB_COMPAT (libc, GLIBC_2_3_3, GLIBC_2_3_4)
+
+/* For the nofpu case the old/new versions are the same function.  */  
+strong_alias (__setcontext, __novec_setcontext)
+
+compat_symbol (libc, __novec_setcontext, setcontext, GLIBC_2_3_3)
+
+#endif
+
+#if SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_3_3)
+
+#define _ERRNO_H	1
+#include <bits/errno.h>
+
+	compat_text_section
+ENTRY (__setcontext_stub)
+	li	r3,ENOSYS
+	b	__syscall_error@local
+END (__setcontext_stub)
+	.previous
+
+compat_symbol (libc, __setcontext_stub, setcontext, GLIBC_2_0)
+
+#endif
diff -Naur glibc-ports-2.5/sysdeps/unix/sysv/linux/powerpc/powerpc32/nofpu/swapcontext.S glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/powerpc/powerpc32/nofpu/swapcontext.S
--- glibc-ports-2.5/sysdeps/unix/sysv/linux/powerpc/powerpc32/nofpu/swapcontext.S	1970-01-01 01:00:00.000000000 +0100
+++ glibc-ports-2.5-cs/sysdeps/unix/sysv/linux/powerpc/powerpc32/nofpu/swapcontext.S	2007-03-27 14:59:26.000000000 +0200
@@ -0,0 +1,59 @@
+/* Save current context and jump to a new context.
+   Copyright (C) 2002, 2004, 2005, 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <sysdep.h>
+#include <rtld-global-offsets.h>
+#include <shlib-compat.h>
+
+#define __ASSEMBLY__
+#include <asm/ptrace.h>
+#include "ucontext_i.h"
+
+#define __CONTEXT_FUNC_NAME __swapcontext
+#undef __CONTEXT_ENABLE_FPRS
+#undef __CONTEXT_ENABLE_VRS
+
+# include "swapcontext-common.S"
+
+versioned_symbol (libc, __swapcontext, swapcontext, GLIBC_2_3_4)
+
+#if SHLIB_COMPAT (libc, GLIBC_2_3_3, GLIBC_2_3_4)
+
+/* For the nofpu case the old/new versions are the same function.  */  
+strong_alias (__swapcontext, __novec_swapcontext)
+
+compat_symbol (libc, __novec_swapcontext, swapcontext, GLIBC_2_3_3)
+
+#endif
+
+#if SHLIB_COMPAT (libc, GLIBC_2_1, GLIBC_2_3_3)
+
+#define _ERRNO_H	1
+#include <bits/errno.h>
+
+	compat_text_section
+ENTRY (__swapcontext_stub)
+	li	r3,ENOSYS
+	b	__syscall_error@local
+END (__swapcontext_stub)
+	.previous
+
+compat_symbol (libc, __swapcontext_stub, swapcontext, GLIBC_2_1)
+
+#endif
